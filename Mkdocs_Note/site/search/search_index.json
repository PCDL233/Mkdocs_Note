{"config":{"lang":["ja"],"separator":"[\\s\\-\uff0c\u3002]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to My Wiki","text":""},{"location":"#_1","title":"\u524d\u8a00","text":"<p>\u672c\u4eba\u662f\u4e00\u540d\u5728\u8bfb\u5927\u5b66\u751f\uff0c\u6240\u8bfb\u4e13\u4e1a\u4e3a\u8ba1\u7b97\u673a\u3002\u672c\u7f51\u9875\u7528\u4e8e\u8bb0\u5f55\u6211\u7684\u5b66\u4e60\u7b14\u8bb0\uff0c \u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u524d\u7aef\uff08HTML CSS JavaScrip\uff09\u57fa\u7840\u3001\u6570\u636e\u7ed3\u6784\u5185\u5bb9\u3001C\u8bed\u8a00\u57fa\u7840\u77e5\u8bc6 \u7b49\u3002</p>"},{"location":"#_2","title":"\u76ee\u524d\u7684\u5185\u5bb9","text":"<ul> <li><code>Markdown</code> - \u5173\u4e8eMarkdown\u8bed\u8a00\u7684\u5b66\u4e60\u4e0e\u4f7f\u7528\u3002</li> <li><code>\u7b97\u6cd5\u53ef\u89c6\u5316</code> - \u4e00\u4e2a\u53ef\u4ee5\u8ba9\u521d\u5b66\u8005\u6e05\u6670\u4e86\u89e3\u7b97\u6cd5\u5185\u90e8\u53d8\u5316\u5b9e\u73b0\u7684\u7f51\u7ad9\u3002</li> <li><code>c\u8bed\u8a00\u57fa\u7840</code>   - \u7f16\u7a0b\u521d\u5b66\u8005\u521d\u671f\u63a5\u89e6\u7684\u8bed\u8a00\u3002</li> <li><code>c++STL\u6a21\u677f</code> - \u80fd\u591f\u9ad8\u6548\u7684\u53c2\u4e0e\u89e3\u51b3\u7b97\u6cd5\u7ade\u8d5b\u4e2d\u7684\u96be\u9898.</li> <li><code>\u6570\u636e\u7ed3\u6784</code>   -\u8ba1\u7b97\u673a\u4e13\u4e1a\u5927\u4e00\u5728\u8bfb\u5b66\u751f\u7684\u96be\u70b9\u3002</li> </ul>"},{"location":"#_3","title":"\u6279\u8bc4\u4e0e\u6307\u6b63","text":"<p>\u5982\u679c\u8fd9\u4e2aWiki\u7f51\u9875\u88ab\u4f60\u6d4f\u89c8\uff0c\u8bf7\u5229\u7528\u4f60\u5b9d\u8d35\u7684\u65f6\u95f4\u63d0\u51fa\u5efa\u8bae</p> <pre><code>\u5177\u4f53\u7684\u53c2\u4e0e\u65b9\u5f0f\uff1a\n\n1.\u4f18\u5148\u4f7f\u7528Markdown\u6587\u672c\uff1a\u6307\u51fa\u539f\u6587\u4e0d\u8db3\u4e4b\u5904\uff0c\u5199\u4e0b\u60a8\u7684\u60f3\u6cd5\n\n2.\u81f3\u5c11\u7528Word\u6587\u6863\n\n3.\u786e\u4fdd\u4fee\u6b63\u5185\u5bb9\u7684\u5b8c\u6574\u6027\u53ca\u5176\u6b63\u786e\u6027\n</code></pre> <p>\u672c\u4eba\u90ae\u7bb1\uff1a2815834616@QQ.com</p> <p>\u611f\u8c22\u60a8\u5149\u4e34\u6211\u7684\u7f51\u7ad9\uff0c\u5e0c\u671b\u60a8\u5728\u8fd9\u91cc\u5ea6\u8fc7\u6109\u5feb\u7684\u65f6\u5149\u3002</p>"},{"location":"JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","title":"JavaScript","text":""},{"location":"JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#javascript","title":"JavaScript","text":"<p>\u662f\u4e00\u79cd\u5ba2\u6237\u7aef\u811a\u672c\u8bed\u8a00---&gt;\u7279\u70b9\u662f\uff1a\u7ffb\u8bd1\u4e00\u6b21\uff0c\u6267\u884c\u4e00\u6b21\uff1b\u9010\u884c\u6267\u884c\u3002</p>"},{"location":"JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#_1","title":"\u6d4f\u89c8\u5668\u7684\u7ec4\u6210","text":"<ul> <li>\u6e32\u67d3\u5f15\u64ce\uff08HTMI\u3001CSS\uff09</li> <li>js\u5f15\u64ce\uff08JS\u89e3\u91ca\u5668\uff09</li> </ul>"},{"location":"JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#javascript_1","title":"JavaScript\u7684\u7ec4\u6210","text":"<ol> <li>ECMAScript---&gt;JavaScript\u8bed\u6cd5 </li> <li>DOM---&gt;\u9875\u9762\u6587\u6863\u5bf9\u8c61\u6a21\u578b</li> <li>BOM---&gt;\u6d4f\u89c8\u5668\u5bf9\u8c61\u6a21\u578b</li> </ol>"},{"location":"%E7%AE%97%E6%B3%95%E5%8F%AF%E8%A7%86%E5%8C%96%E7%BD%91%E7%AB%99/","title":"\u7b97\u6cd5\u53ef\u89c6\u5316\u5b66\u4e60\u7f51\u7ad9","text":""},{"location":"%E7%AE%97%E6%B3%95%E5%8F%AF%E8%A7%86%E5%8C%96%E7%BD%91%E7%AB%99/#_1","title":"\u70b9\u51fb\u8df3\u8f6c\uff1a \u53ef\u89c6\u5316\u7f51\u7ad9","text":""},{"location":"c%2B%2B/C%2B%2B%20%E4%B8%ADstring%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95%EF%BC%9A/","title":"string","text":""},{"location":"c%2B%2B/C%2B%2B%20%E4%B8%ADstring%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95%EF%BC%9A/#c-string","title":"C++ \u4e2dstring\u51fd\u6570\u7528\u6cd5\uff1a","text":""},{"location":"c%2B%2B/C%2B%2B%20%E4%B8%ADstring%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95%EF%BC%9A/#string","title":"string\u7684\u5927\u5c0f\u548c\u5bb9\u91cf\uff1a","text":""},{"location":"c%2B%2B/C%2B%2B%20%E4%B8%ADstring%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95%EF%BC%9A/#sizelength","title":"<code>size()</code>\u548c<code>length()</code>","text":"<p>\u200b               \uff1a\u8fd4\u56destring\u6240\u4f5c\u7528\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\nusing namespace std;\nint main()\n{\nstring num(\"1234567\");\ncout&lt;&lt;\"size=\"&lt;&lt;num.size()&lt;&lt;endl;\n//\u8c03\u7528size\u548clength\u51fd\u6570\u8f93\u51fa\u5b57\u7b26\u4e32num\u7684\u957f\u5ea6\ncout&lt;&lt;\"length=\"&lt;&lt;num.length()&lt;&lt;endl;\n//\u8f93\u51fa\u4e3asize=7\uff0clength=7\nreturn 0;\n}\n</code></pre>"},{"location":"c%2B%2B/C%2B%2B%20%E4%B8%ADstring%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95%EF%BC%9A/#max_size","title":"<code>max_size()</code>","text":"<p>\u200b       \u8fd4\u56de\u5b57\u7b26\u4e32\u6700\u591a\u5305\u542b\u7684\u5b57\u7b26\u6570\uff0c\u8d85\u51fa\u4f1a\u663e\u793a\u5f02\u5e38</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\nusing namespace std;\nint main()\n{\nstring num(\"1234567\");\ncout&lt;&lt;\"max_size=\"&lt;&lt;num.max_size()&lt;&lt;endl;\nreturn 0;//\u8f93\u51fa\u4e3amax_size=2147483647\n}\n</code></pre>"},{"location":"c%2B%2B/C%2B%2B%20%E4%B8%ADstring%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95%EF%BC%9A/#capacity","title":"<code>capacity()</code>","text":"<p>\u200b       \u91cd\u65b0\u5206\u914d\u5185\u5b58\u4e4b\u524d\uff0cstring\u5bf9\u8c61\u80fd\u5305\u542b\u7684\u6700\u5927\u5b57\u7b26\u6570</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\nusing namespace std;\nint main()\n{\nstring num(\"1234567\");\ncout&lt;&lt;\"capacity=\"&lt;&lt;num.capacity()&lt;&lt;endl;\nreturn 0;\n//\u8f93\u51fa\u4e3acapacity=15,\u5373\u5728\u91cd\u65b0\u5206\u914d\u5185\u5b58\u4e4b\u524dnum\u5b57\u7b26\u4e32\u6700\u5927\u80fd\u5305\u5bb9\u7684\u5b57\u7b26\u6570\u4e3a15\n}\n</code></pre>"},{"location":"c%2B%2B/C%2B%2B%20%E4%B8%ADstring%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95%EF%BC%9A/#stringcompare","title":"string\u7684\u5b57\u7b26\u4e32\u6bd4\u8f83\uff1a<code>compare(\uff09</code>\u51fd\u6570","text":"<p>\u200b   \u5c06\u5b57\u7b26\u6309\u5b57\u5178\u987a\u5e8f\u8fdb\u884c\u9010\u4e00\u7684\u6bd4\u8f83\u3002\u5b57\u5178\u6392\u5e8f\u9760\u524d\u7684\u5b57\u7b26\u5c0f,\u6bd4\u8f83\u7684\u987a\u5e8f\u662f\u4ece\u524d\u5411\u540e\u6bd4\u8f83(\u9075\u4eceASCII\u7801)\u3002</p> <p>\u200b       \u4f8b\u5982\uff1astr1(\"abc\")&lt;str2(\"ABC\")\u2014\u2014str1.compare(str2)</p> <p>\u200b       \u8fd4\u56de\u503c\u4e3a\uff1a1\u2014\u2014\u5927\u4e8e\uff1b\uff08-1\uff09\u2014\u2014\u5c0f\u4e8e\uff1b0\u2014\u2014\u7b49\u4e8e</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\nusing namespace std;\nint main()\n{\nstring s1(\"abc\");//\u5728ASCII\u7801\u4e2da=97\uff0cA=65\nstring s2(\"ABC\");\ncout&lt;&lt;\"s1.compare(s2)=\"&lt;&lt;s1.compare(s2)&lt;&lt;endl;\nreturn 0;\n//\u8f93\u51fa\u4e3as1.compare(s2)=1,\u5373s1\u5927\u4e8es2\n}\n</code></pre>"},{"location":"c%2B%2B/C%2B%2B%20%E4%B8%ADstring%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95%EF%BC%9A/#push_backinsertappend","title":"\u5b57\u7b26\u4e32\u7684\u63d2\u5165\uff1a<code>push_back()</code>\u3001<code>insert()</code>\u3001<code>append()</code>","text":""},{"location":"c%2B%2B/C%2B%2B%20%E4%B8%ADstring%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95%EF%BC%9A/#push_back","title":"<code>push_back()\u51fd\u6570</code>","text":"<p>\u200b           \uff1a\u53ea\u80fd\u5728\u539f\u6709\u7684\u5b57\u7b26\u4e32\u7684\u6700\u540e\u9762\u63d2\u5165\u65b0\u7684\u5b57\u7b26</p> <pre><code>e.g\uff1astring s1(\"chin\");\ns1.push_back('a');\n//\u5728\u5b57\u7b26\u4e32chin\u540e\u63d2\u5165\u4e00\u4e2aa\u5b57\u7b26\uff0c\u8f93\u51fa\u4e3a\uff1achina\n</code></pre>"},{"location":"c%2B%2B/C%2B%2B%20%E4%B8%ADstring%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95%EF%BC%9A/#append","title":"<code>append()\u51fd\u6570</code>","text":"<p>1\u3001\u76f4\u63a5\u5728\u539f\u6709\u5b57\u7b26\u4e32\u540e\u6dfb\u52a0\u65b0\u7684\u5b57\u7b26\u4e32</p> <pre><code>string s1(\"chi\");\nstring s2(\"na\");\ns1.append(s2);//\u5c06\u5b57\u7b26\u4e32s2\u4e2d\u7684\u5b57\u7b26\u6dfb\u52a0\u5230s1\u5b57\u7b26\u4e32\u7684\u540e\u9762\ncout&lt;&lt;s1;//\u8f93\u51fa\u4e3a\uff1achina\n</code></pre> <p>2\u3001\u6dfb\u52a0\u65b0\u5b57\u7b26\u4e32\u7684\u4e00\u90e8\u5206</p> <pre><code>string s1(\"I love\");\nstring s2(\"xx china\");\ns1.append(s2,2,6);//\u5c06\u5b57\u7b26\u4e32s2\u4e2d\u4ece\u7b2c2\u4e2a\u5b57\u7b26\u540e\u9762\u7684\u8fde\u7eed6\u4e2a\u5b57\u7b26\u6dfb\u52a0\u5230s1\u4e2d\u3002\ncout&lt;&lt;s1;//\u8f93\u51fa\u4e3a\uff1aI love china\n</code></pre> <p>\u200b   \u82e5\u662f\u6dfb\u52a0\u7684\u5b50\u4e32\u4e2d\u53ea\u6709\u7d22\u5f15\u5f00\u59cb\u7684\u4f4d\u7f6e\uff0c\u6ca1\u6709\u957f\u5ea6\uff0c\u5219\u8868\u793a\u5b57\u7b26\u4e32\u4ece<code>\u7b2cn\u4e2a\u5b57\u7b26\u5230\u672b\u5c3e</code>\u7684\u5b57\u7b26\u8fde\u63a5\u5230\u5f53\u524d\u5b57\u7b26\u4e32\u672b\u5c3e\u3002</p> <pre><code>string s1(\"I love\");\nstring s2(\"xx china\");\ns1.append(s2,2);//\u5c06\u5b57\u7b26\u4e32s2\u4e2d\u4ece\u7b2c2\u4e2a\u5b57\u7b26\u540e\u9762\u4e00\u76f4\u5230s2\u5b57\u7b26\u4e32\u5c3e\u7684\u5b57\u7b26\u6dfb\u52a0\u5230s1\ncout&lt;&lt;s1;//\u8f93\u51fa\u4e3a\uff1aI love china\n</code></pre> <p>\u5728string\u540e\u9762\u6dfb\u52a0\u591a\u4e2a\u76f8\u540c\u5b57\u7b26,\u5982\u4e0b</p> <pre><code>  string s1 = \"hello\";\ns1.append(3, '!'); //\u5728\u5f53\u524d\u5b57\u7b26\u4e32\u7ed3\u5c3e\u6dfb\u52a03\u4e2a\u5b57\u7b26!\n//\u8f93\u51fa\u4e3a\uff1a s1 = \"hello!!!\";\n</code></pre>"},{"location":"c%2B%2B/C%2B%2B%20%E4%B8%ADstring%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95%EF%BC%9A/#insert","title":"<code>insert()\u51fd\u6570\uff1a</code>","text":"<pre><code>string s(\"hina\");\ns.insert(s.begin(),c);\n//\u62ec\u53f7\u524d\u9762\u7684\u4e3a\u5b57\u7b26\u4e32s\u7684\u5f00\u5934\uff08\u5373\u4f4d\u7f6e\uff09\uff0c\u540e\u9762\u662f\u8981\u63d2\u5165\u7684\u5b57\u7b26\ncout&lt;&lt;s;//\u8f93\u51fa\u4e3a\uff1aChina\n</code></pre>"},{"location":"c%2B%2B/C%2B%2B%20%E4%B8%ADstring%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95%EF%BC%9A/#erase","title":"<code>erase()\u51fd\u6570</code>\uff1a","text":"<p>\u200b       \u5220\u9664\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\uff0c\u4ece\u6307\u5b9a\u5bb9\u5668\u5220\u9664\u6307\u5b9a\u4f4d\u7f6e\u7684\u5143\u7d20\u6216\u67d0\u6bb5\u8303\u56f4\u5185\u7684\u5143\u7d20 </p> <p>1\u3001\u5220\u9664\u6307\u5b9a\u4f4d\u7f6e\u7684\u5b57\u7b26\u3002</p> <pre><code>iterator erase (iterator p);\n</code></pre> <p>2\u3001\u5220\u9664\u6307\u5b9a\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\u3002</p> <pre><code>string&amp; erase(size_t pos=0, size_t len = npos);\n</code></pre> <p>\u5176\u4e2d\uff0c\u53c2\u6570pos\u8868\u793a\u8981\u5220\u9664\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u5176\u9ed8\u8ba4\u503c\u662f0\uff1blen\u8868\u793a\u8981\u5220\u9664\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u5176\u9ed8\u8ba4\u503c\u662fstring::npos\u3002\u8fd4\u56de\u503c\u662f\u5220\u9664\u540e\u7684\u5b57\u7b26\u4e32\u3002</p> <p>3\u3001\u5220\u9664\u6307\u5b9a\u8303\u56f4\u7684\u5b57\u7b26\u4e32\u3002\u2014\u2014\u8303\u56f4\u662f[first, last)\u3002</p> <pre><code>iterator erase (iterator first, iterator last);\n</code></pre>"},{"location":"c%2B%2B/C%2B%2B%20%E4%B8%ADstring%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95%EF%BC%9A/#_1","title":"<code>\u5220\u9664\u4f8b\u9898\uff1a</code>","text":"<pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\nusing namespace std;\nint main()\n{\nstring str(\"Hello World\uff01\uff01\uff01\");\nstr.erase(str.begin()+5);//\u5220\u9664\u4ecestr\u5b57\u7b26\u4e32\u5f00\u59cb\uff08\u4ece0\u5f00\u59cb\uff09\u540e\u9762\u7b2c5\u4e2a\u5b57\u7b26\ncout &lt;&lt; str&lt;&lt;endl;//\u8f93\u51fa\u4e3a\uff1aHelloWorld\uff01\uff01\uff01\n}\n</code></pre> <pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\nusing namespace std;\nint main()\n{\nstring str(\"Hello World\uff01\uff01\uff01\");\nstr.erase(6, 5);//\u5220\u9664\u4ecestr\u5b57\u7b26\u4e32\u7b2c6\u4e2a\u5b57\u7b26\u540e\u9762\u76845\u4e2a\u5b57\u7b26\ncout &lt;&lt; str&lt;&lt;endl;//\u8f93\u51fa\u4e3a\uff1aHello \uff01\uff01\uff01\n}\n</code></pre> <pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\nusing namespace std;\nint main()\n{\nstring str(\"Hello World\uff01\uff01\uff01\");\nstr.erase(str.begin() + 5, str.end() - 2);\n//\u8f93\u51fa\u4ece\u90a3\u4e2a\u5b57\u7b26\u4e32\u5f00\u5934\u5f80\u540e\u7b2c5\u4e2a\u5b57\u7b26\u548c\u4ece\u5c3e\u5f80\u524d\u6570\u7b2c2\u4e2a\u5b57\u7b26\u4e4b\u95f4\u7684\u5b57\u7b26\u8303\u56f4\u5220\u9664\ncout &lt;&lt; str &lt;&lt; endl;//\u8f93\u51fa\u4e3a\uff1aHello\uff01\n}\n</code></pre>"},{"location":"c%2B%2B/C%2B%2B%20%E4%B8%ADstring%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95%EF%BC%9A/#stringappend","title":"string\u62fc\u63a5\u5b57\u7b26\u4e32\uff1a<code>append()</code>","text":"<pre><code>#include&lt;iostream&gt;\n#incluce&lt;string&gt;\nusing namespace std;\nint main()\n{\nstring s1(\"Hello World!\");\nstring s2(\"abc\");\ns1.append(s2);//\u5c06s2\u7684\u5185\u5bb9\u62fc\u63a5\u5230s1\u540e\u9762\ncout&lt;&lt;\"s1:\"&lt;&lt;s1&lt;&lt;endl;\nreturn 0;\n}\n//\u8f93\u51fa---&gt;s1:Hello World!abc\n</code></pre>"},{"location":"c%2B%2B/C%2B%2B%20%E4%B8%ADstring%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95%EF%BC%9A/#stringreplace","title":"string\u7684\u5b57\u7b26\u66ff\u6362\uff1areplace()","text":"<pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\nusing namespace std;\nint main()\n{\nstring s(\"Hello World\");\ns.replace(6,5,\"!!!\");\n//\u62ec\u53f7\u4e2d\u7b2c1\u4e2a\u6570\u5b57\u8868\u793a\u539f\u6765\u5b57\u7b26\u4e32\u4e2d\u8981\u66ff\u6362\u7684\u5b57\u7b26\u5f00\u59cb\u7684\u6240\u5728\u4f4d\u7f6e\uff0c\u7b2c2\u4e2a\u6570\u5b57\u8868\u793a\u8981\u628a\u539f\u6765\u5b57\u7b26\u4e32\u4e2d\u7684\u51e0\u4e2a\u5b57\u7b26\u66ff\u6362\u3002\n//\u5c06s\u4e2d\u7684\u7b2c6\u4e2a\u5b57\u7b26\u540e\u9762\u76845\u4e2a\u5b57\u7b26\u5168\u90e8\u66ff\u6362\u6210\"!!!\"\u3002\ncout&lt;&lt;s&lt;&lt;endl;\nreturn 0;\n}\n//\u8f93\u51fa\u4e3a\uff1aHello !!!\n</code></pre>"},{"location":"c%2B%2B/C%2B%2B%20%E4%B8%ADstring%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95%EF%BC%9A/#string_1","title":"string\u4e2d\u7684\u5927\u5c0f\u5199\u8f6c\u6362","text":"<p>\u200b           <code>tolower()</code>\u3001<code>toupper()</code>\u3001<code>transform()</code></p> <pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\nusing namespace std;\nint main()\n{\nstring s=(\"HELLO\");\nfor(int i=0;i&lt;s.length();i++)\n//\u901a\u8fc7\u5faa\u73af\u8fdb\u884cc\u8bed\u8a00\u5b57\u7b26\u6570\u7ec4\u7684\u4e00\u4e2a\u4e2a\u8f6c\u5316\u64cd\u4f5c\n{\ns[i]=tolower(s[i]);\n}\ncout&lt;&lt;s&lt;&lt;endl;\nreturn 0;\n}//\u8f93\u51fa---&gt;hello\n</code></pre>"},{"location":"c%2B%2B/C%2B%2B%20%E4%B8%ADstring%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95%EF%BC%9A/#stl-transform","title":"STL\u4e2d\u7684 transform()\u7528\u6cd5\uff1a","text":"<pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include &lt;algorithm&gt;//\u8fd0\u7528STL\u4e2d\u7684transform\uff08\uff09\u7684\u5934\u6587\u4ef6\nusing namespace std;\nint main()\n{\nstring s1 = (\"HELLO\");\nstring s2 = (\"hello\");\ntransform(s2.begin(), s2.end(), s2.begin(), ::toupper);//\u5316\u4e3a\u5927\u5199\ntransform(s1.begin(), s1.end(), s1.begin(), ::tolower);//\u5316\u4e3a\u5c0f\u5199\ncout &lt;&lt; s1 &lt;&lt; \" \" &lt;&lt; s2 &lt;&lt; endl;\nreturn 0;\n}\n//\u8f93\u51fa----&gt;hello HELLO\n</code></pre>"},{"location":"c%2B%2B/C%2B%2B%20%E4%B8%ADstring%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95%EF%BC%9A/#-find","title":"\u67e5\u627e---&gt;<code>find()</code>","text":"<pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\nusing namespace std;\nint main()\n{\nint x=0;\nstring s=(\"abcdefg\");\nx=s.find(\"de\");\ncout&lt;&lt;x&lt;&lt;endl;//\u8f93\u51fa\u4e3a3\uff1b\nx=s.find(\"e\",1);//\u4ece\u5b57\u7b26\u4e32\u7b2c1\u4e2a\u5b57\u7b26\u5f00\u59cb\u67e5\u627e\u201ce\u201d\u8fd9\u4e2a\u5b57\u7b26\ncout&lt;&lt;x&lt;&lt;endl;//\u8f93\u51fa\u4e3a4\uff1b\nx=s.rfind(\"e\");//\u4ece\u5b57\u7b26\u4e32\u5c3e\u5f00\u59cb\u67e5\u627e\u201ce\u201d\ncout&lt;&lt;x&lt;&lt;endl;//\u8f93\u51fa\u4e3a4\uff1b\nx=s.find_first_of(\"1e2344\");\n//\u5728\u8be5\u5b57\u7b26\u4e32\u4e2d\u67e5\u627e\u7b2c\u4e00\u4e2a\u5c5e\u4e8e\u5b57\u7b26\u4e32s\u7684\u5b57\u7b26\ncout&lt;&lt;x&lt;&lt;endl;\n//\u8f93\u51fa\u4e3a4\uff0c\u8868\u793a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u5c5e\u4e8es\u4e2d\u7684\u5b57\u7b26\u662fs\u4e2d\u76844---e\uff1b\nx= s.find_first_not_of(\"abcdh\") \uff1b\n//\u5728\u8be5\u5b57\u7b26\u4e32\u4e2d\u67e5\u627e\u7b2c\u4e00\u4e2a\u4e0d\u5c5e\u4e8e\u5b57\u7b26\u4e32s\u7684\u5b57\u7b26\ncout&lt;&lt;x;//\u8f93\u51fa\uff1a4---h\nreturn 0;\n}\n</code></pre>"},{"location":"c%2B%2B/C%2B%2B%20%E4%B8%ADstring%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95%EF%BC%9A/#substr","title":"\u622a\u53d6\u5b57\u7b26\u4e32\uff1a<code>substr()</code>","text":"<p>\u200b   [strtok]\u51fd\u6570\u4f1a\u628a\u5206\u5272\u524d\u7684\u5b57\u7b26\u4e32\u7834\u574f\u6389\uff0c\u5373\u6bcf\u6b21\u5206\u5272\u540e\uff0c\u539f\u6765\u7684\u5b57\u7b26\u4e32\u5c31\u4f1a\u5c11\u6389\u4e00\u90e8\u5206\uff0c\u5b8c\u6574\u6027\u4f1a\u88ab\u7834\u574f\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\nusing namespace std;\nint main()\n{\nstring s=(\"hello world admin\");\nstring m;\nm=s.substr(6,5);//\u622a\u53d6\u5b57\u7b26\u4e32\u662f\u4e2d\u7b2c6\u4e2a\u5b57\u7b26\u540e\u97625\u4e2a\u5b57\u7b26\ncout&lt;&lt;m;\nreturn 0\uff1b//\u8f93\u51fa---&gt;world\n}\n</code></pre>"},{"location":"c%2B%2B/C%2B%2B%20%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89/","title":"c++\u6807\u51c6\u6a21\u677f(STL)","text":""},{"location":"c%2B%2B/C%2B%2B%20%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89/#c-stl","title":"C++ \u6807\u51c6\u6a21\u677f\u5e93\uff08STL\uff09","text":""},{"location":"c%2B%2B/C%2B%2B%20%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89/#_1","title":"\u7279\u70b9\uff1a","text":"<p>1\u3001\u6807\u51c6\u6a21\u677f\u5e93\u4e2d\u7684\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u662f\u5206\u79bb\u7684</p> <p>2\u3001\u4e0d\u662f\u9762\u5411\u5bf9\u8c61\u7684</p>"},{"location":"c%2B%2B/C%2B%2B%20%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89/#stl","title":"STL\u516d\u5927\u7ec4\u4ef6\uff1a","text":"<ol> <li> <p><code>\u5bb9\u5668</code>\uff08Container)\uff1a\u4e3a\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u6a21\u677f\u7c7b\u7684\u65b9\u6cd5\u63d0\u4f9b\u3002\u4e3a\u4e86\u8bbf\u95ee\u5bb9\u5668\u4e2d\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u4f7f\u7528\u7531\u5bb9\u5668\u7c7b\u8f93\u51fa\u7684\u8fed\u4ee3\u5668\u3002</p> </li> <li> <p><code>\u8fed\u4ee3\u5668</code>\uff08Lterator\uff09\uff1a\u63d0\u4f9b\u4e86\u8bbf\u95ee\u5bb9\u5668\u4e2d\u5bf9\u8c61\u7684\u65b9\u6cd5\u3002\u53ef\u4ee5\u4f7f\u7528\u4e00\u5bf9\u8fed\u4ee3\u5668\u6307\u5b9alist\u6216vector\u4e2d\u7684\u4e00\u5b9a\u8303\u56f4\u7684\u5bf9\u8c61\u3002\u8fed\u4ee3\u5668\u5c31\u5982\u540c\u4e00\u4e2a\u6307\u9488\u3002</p> </li> <li> <p><code>\u7b97\u6cd5</code>\uff08Algorithm\uff09\uff1a\u662f\u7528\u6765\u64cd\u4f5c\u5bb9\u5668\u4e2d\u7684\u6570\u636e\u7684\u6a21\u677f\u51fd\u6570\u3002</p> </li> <li> <p><code>\u4eff\u51fd\u6570</code>\uff08Functor\uff09\uff1a\u662f\u4e00\u4e2a\u5b9a\u4e49\u4e86operator\uff08\uff09\u7684\u5bf9\u8c61\uff08\u5373\u91cd\u8f7d\u4e86\u62ec\u53f7\u8fd0\u7b97\u7b26\uff09\uff0c\u53ef\u4ee5\u5c06\u5b83\u89c6\u4e3a\u4e00\u822c\u7684\u51fd\u6570\uff0c\u4f46\u5b83\u662f\u4e00\u4e2a\u7c7b\u3002\u4f46\u5b83\u4e0e\u4e00\u822c\u51fd\u6570\u7684\u533a\u522b\u662f\u5176\u529f\u80fd\u662f\u5728\u5176\u6210\u5458\u51fd\u6570operator()\u4e2d\u5b9a\u4e49\uff0c\u4e3b\u8981\u5177\u6709\u4ee5\u4e0b\u4e09\u4e2a\u4f18\u70b9:</p> </li> </ol> <p>\uff081\uff09\u6bd4\u4e00\u822c\u7684\u51fd\u6570\u7075\u6d3b\uff0c\u5e94\u4e3a\u4eff\u51fd\u6570\u62e5\u6709\u72b6\u6001\uff08\u5373\u6709\u6210\u5458\u53d8\u91cf\u505a\u6570\u636e\u7684\u8bb0\u5f55\uff09\uff1b</p> <p>\uff082\uff09\u4eff\u51fd\u6570\u578b\u522b\u53ef\u4ee5\u4f5c\u4e3a\u6a21\u677f\u53c2\u6570\uff1b</p> <p>\uff083\uff09\u4eff\u51fd\u6570\u8981\u6bd4\u51fd\u6570\u6307\u9488\u7684\u6267\u884c\u901f\u5ea6\u8981\u5feb\uff1b</p> <ol> <li><code>\u9002\u914d\u5668</code>\uff08Adaptor\uff09\uff1a\u5bb9\u5668\u9002\u914d\u5668\uff0c\u8fed\u4ee3\u5668\u9002\u914d\u5668\u548c\u51fd\u6570\u9002\u914d\u5668\u3002</li> </ol> <p>\u200b        \u80fd\u591f\u5c06\u4eff\u51fd\u6570\u548c\u53e6\u4e00\u4e2a\u4eff\u51fd\u6570\uff08\u6216\u67d0\u4e2a\u503c\uff0c\u6216\u67d0\u4e2a\u4e00\u822c\u51fd\u6570\uff09\u7ed3\u5408\u8d77\u6765\u7684\u4eff\u51fd\u6570\u3002</p> <p>\u51fd\u6570\u914d\u63a5\u5668\u5305\u542b\u5728\u5934\u6587\u4ef6<code>&lt;functional&gt;</code>\u4e2d\u3002</p> <ol> <li><code>\u5206\u914d\u5668</code>\uff08allocator\uff09\uff1a\u7528\u7279\u6b8a\u5bf9\u8c61\u5904\u7406<code>[\u5185\u5b58]</code>\u7684\u5206\u914d\u548c\u89c4\u5212\uff0c\u8fd9\u6837\u7684\u5bf9\u8c61\u79f0\u4e3a\u5206\u914d\u5668\u3002</li> </ol> <p>#### </p>"},{"location":"c%2B%2B/C%2B%2B%20%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89/#queueslistsstacks","title":"queues(\u961f\u5217)\uff0cLists(\u94fe\u8868)\uff0cstacks(\u6808)","text":""},{"location":"c%2B%2B/C%2B%2B%20%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89/#c-vectors","title":"\u987a\u5e8f\u7ed3\u6784\uff1aC++ Vectors","text":"\u51fd\u6570 \u8868\u8ff0 c.assign(beg,end) \u5c06[beg; end)\u533a\u95f4\u4e2d\u7684\u6570\u636e\u8d4b\u503c\u7ed9c\u3002 c.assign(n,x) \u5c06n\u4e2ax\u7684\u5143\u7d20\u62f7\u8d1d\u8d4b\u503c\u7ed9c\u3002 c.at(idx) \u4f20\u56de\u7d22\u5f15<code>i</code>\u6240\u6307\u7684\u6570\u636e\uff0c\u5982\u679c<code>i</code>\u8d8a\u754c\uff0c\u629b\u51faout_of_range\u3002 c.back() \u4f20\u56de\u6700\u540e\u4e00\u4e2a\u6570\u636e\uff0c\u4e0d\u68c0\u67e5\u8fd9\u4e2a\u6570\u636e\u662f\u5426\u5b58\u5728\u3002 c.begin() \u4f20\u56de\u8fed\u4ee3\u5668\u4e2d\u7684\u7b2c\u4e00\u4e2a\u6570\u636e\u3002 c.capacity() \u8fd4\u56de\u5bb9\u5668\u4e2d\u6570\u636e\u4e2a\u6570\u3002 c.clear() \u79fb\u9664\u5bb9\u5668\u4e2d\u6240\u6709\u6570\u636e\u3002 c.empty() \u5224\u65ad\u5bb9\u5668\u662f\u5426\u4e3a\u7a7a\u3002 c.end() \u6307\u5411\u8fed\u4ee3\u5668\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u6570\u636e\u5730\u5740\u3002 c.erase(pos) \u5220\u9664pos\u4f4d\u7f6e\u7684\u6570\u636e\uff0c\u4f20\u56de\u4e0b\u4e00\u4e2a\u6570\u636e\u7684\u4f4d\u7f6e\u3002 c.erase(beg,end) \u5220\u9664[beg,end)\u533a\u95f4\u7684\u6570\u636e\uff0c\u4f20\u56de\u4e0b\u4e00\u4e2a\u6570\u636e\u7684\u4f4d\u7f6e\u3002 c.front() \u4f20\u56de\u7b2c\u4e00\u4e2a\u6570\u636e\u3002 get_allocator \u4f7f\u7528\u6784\u9020\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u62f7\u8d1d\u3002 c.insert(pos,elem) \u5728pos\u4f4d\u7f6e\u63d2\u5165\u4e00\u4e2aelem\u62f7\u8d1d\uff0c\u4f20\u56de\u65b0\u6570\u636e\u4f4d\u7f6e\u3002 c.insert(pos,n,x) \u5728pos\u4f4d\u7f6e\u63d2\u5165n\u4e2ax\u5143\u7d20\u6570\u636e\u3002\u65e0\u8fd4\u56de\u503c\u3002 c.insert(pos,beg,end) \u5728pos\u4f4d\u7f6e\u63d2\u5165\u5728[beg,end)\u533a\u95f4\u7684\u6570\u636e\u3002\u65e0\u8fd4\u56de\u503c c.max_size() \u8fd4\u56de\u5bb9\u5668\u4e2d\u6700\u5927\u6570\u636e\u7684\u6570\u91cf c.pop_back() \u5220\u9664\u6700\u540e\u4e00\u4e2a\u6570\u636e\u3002 c.push_back(elem) \u5728\u5c3e\u90e8\u52a0\u5165\u4e00\u4e2a\u6570\u636e\u3002 c.rbegin() \u4f20\u56de\u4e00\u4e2a\u9006\u5411\u961f\u5217\u7684\u7b2c\u4e00\u4e2a\u6570\u636e\u3002 c.rend() \u4f20\u56de\u4e00\u4e2a\u9006\u5411\u961f\u5217\u7684\u6700\u540e\u4e00\u4e2a\u6570\u636e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u3002 c.resize(num) \u91cd\u65b0\u6307\u5b9a\u961f\u5217\u7684\u957f\u5ea6\u3002 c.reserve() \u4fdd\u7559\u9002\u5f53\u7684\u5bb9\u91cf\u3002 c.size() \u8fd4\u56de\u5bb9\u5668\u4e2d\u5b9e\u9645\u6570\u636e\u7684\u4e2a\u6570\u3002 c1.swap(c2) \u5c06c1\u548cc2\u5143\u7d20\u4e92\u6362\u3002 swap(c1,c2) \u5c06c1\u548cc2\u5143\u7d20\u4e92\u6362\u3002"},{"location":"c%2B%2B/C%2B%2B%20%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89/#constructors","title":"<code>Constructors</code>    \u6784\u9020\u51fd\u6570","text":"<pre><code>    vector\u662f\u7531STL\u63d0\u4f9b\u7684\u4e00\u79cd\u5e8f\u5217\u5f0f\u5bb9\u5668\uff0c\u5b83\u7684\u5e95\u5c42\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a**\u52a8\u6001\u6570\u7ec4**\u3002\u5982\u8981\u4f7f\u7528vector\uff0c\u9700\u8981`#include&lt;vector&gt;`\u3002\n</code></pre> <p>\u8bed\u6cd5\uff1avector&lt;\u5143\u7d20\u7c7b\u578b&gt;\u6570\u636e\u5bf9\u8c61\u540d\uff08\u6570\u636e\u957f\u5ea6\uff0c\u5143\u7d20\u521d\u503c\uff09</p> <p>\u4f8b\uff1a</p> <pre><code>vector&lt;int&gt; v1( 5, 42 );\n//\u6784\u9020\u4e86\u4e00\u4e2a\u5305\u542b5\u4e2a\u503c\u4e3a42\u7684\u5143\u7d20\u7684Vector\n</code></pre>"},{"location":"c%2B%2B/C%2B%2B%20%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89/#assign","title":"<code>assign\uff08\uff09</code>\u51fd\u6570","text":"<pre><code>\u8bed\u6cd5\uff1ac.assign(n,elem)-----&gt;//c.assign(n,elem)\nc.assign(beg,end)------&gt;//\u5c06[beg; end)\u533a\u95f4\u4e2d\u7684\u6570\u636e\u8d4b\u503c\u7ed9c\u3002\n</code></pre> <pre><code>void assign(const_iterator first,const_iterator last);\n//\u76f8\u5f53\u4e8e\u62f7\u8d1d\u51fd\u6570\uff0c\u5c06\u533a\u95f4[first,last)\u4e2d\u7684\u5143\u7d20\u8d4b\u503c\u5230\u5f53\u524d\u7684vector\u5bb9\u5668\u4e2d\nvoid assign(size_type n,const T&amp; x = T());\n//\u8d4b n \u4e2a\u503c\u4e3a x \u7684\u5143\u7d20\u5230 vector \u5bb9\u5668\u4e2d\uff0c\u5e76\u4e14\u6e05\u9664\u6389 vector \u5bb9\u5668\u4e2d\u4ee5\u524d\u7684\u5185\u5bb9\u3002\n</code></pre> <pre><code>   //\u8f93\u5165\nvector&lt;int&gt; v1;\nvector&lt;int&gt; v2;\n//assigning\nv1.assign(5, 100);\nv2.assign(v1.begin(), v1.end());\n//\u8f93\u51fa\n//if we print the value\nv1: 100 100 100 100 100\nv2: 100 100 100 100 100\n</code></pre>"},{"location":"c%2B%2B/C%2B%2B%20%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89/#at","title":"<code>at\uff08\uff09</code>\u51fd\u6570","text":"<p>\u8bed\u6cd5\uff1ac.at(i)------&gt;\u4f20\u56de\u7d22\u5f15<code>i</code>\u6240\u6307\u7684\u6570\u636e\uff0c\u5982\u679c<code>i</code>\u8d8a\u754c\uff0c\u629b\u51faout_of_range\u6216\u8005\u7ec8\u6b62\u7a0b\u5e8f\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\nusing namespace std;\nint main()\n{\nstring str;\ncin&gt;&gt;str;  //str==\"12345\"\nchar ch;\nch = str.at(0);\ncout&lt;&lt;ch;   //\u8f93\u51fach=='1';\nreturn 0;\n}\n</code></pre>"},{"location":"c%2B%2B/C%2B%2B%20%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89/#back","title":"<code>back\uff08\uff09</code>\u51fd\u6570","text":"<p>\u200b       \uff1a\u8fd4\u56de\u5f53\u524dvector\u5bb9\u5668\u4e2d\u672b\u5c3e\u5143\u7d20\u7684\u5f15\u7528\u3002</p> <p>\u8bed\u6cd5\uff1ac.back()------&gt;\u8fd4\u56dec\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u4e0d\u68c0\u67e5\u8fd9\u4e2a\u6570\u636e\u662f\u5426\u5b58\u5728</p> <p><code>front\uff08\uff09</code>\u51fd\u6570\uff1a</p> <p>\u200b       \u8fd4\u56de\u5f53\u524dvector\u8d77\u59cb\u5143\u7d20\u7684\u5f15\u7528</p> <pre><code>\u8bed\u6cd5\uff1ac.front()------&gt;//\u8fd4\u56dec\u4e2d\u521d\u59cb\u7684\u5143\u7d20\u3002\n</code></pre> <pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;vector&gt;\nusing namespace std;\nint main()\n{\nvector&lt;int&gt; s1;//\u5b9a\u4e49\u4e00\u4e2a\u7a7a\u7684\u5bb9\u5668s1\uff1b\nfor(int i=0;i&lt;4;i++)\n{\ns1.push_back(i);//\u5229\u7528\u5faa\u73af\u5c06i\u63d2\u5165\u5230s1\u5bb9\u5668\u4e2d\n}\ncout&lt;&lt;s1.back()&lt;&lt;endl&lt;&lt;s1.front()&lt;&lt;endl;\n//\u8fd4\u56des1\u5bb9\u5668\u4e2d\u7684\u6700\u540e\u7684\u5143\u7d20\u548c\u521d\u59cb\u5143\u7d20\uff0c\u8f93\u51fa\u4e3a3\uff0c0\uff1b\nreturn 0;       }\n</code></pre>"},{"location":"c%2B%2B/C%2B%2B%20%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89/#begin","title":"<code>begin()</code>\u51fd\u6570","text":"<p>\u200b       \uff1a\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u5f53\u524dvector(\u5bb9\u5668)\u8d77\u59cb\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff08<code>iterator</code>\uff09</p>"},{"location":"c%2B%2B/C%2B%2B%20%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89/#end","title":"<code>end</code>\u51fd\u6570","text":"<p>\u200b       \uff1a\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u5f53\u524dvector\u672b\u5c3e\u5143\u7d20\u7684\u4e0b\u4e00\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668\uff08<code>iterator</code>\uff09\uff1b\u4e0ebegina()\u51fd\u6570\u76f8\u4f3c\u3002</p>"},{"location":"c%2B%2B/C%2B%2B%20%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89/#rbegin","title":"<code>rbegin()</code>\u51fd\u6570","text":"<p>\u200b           \uff1a\u8fd4\u56de\u6307\u5411\u5f53\u524dvector\u672b\u5c3e\u4f4d\u7f6e\u7684\u9006\u8fed\u4ee3\u5668\uff0c\u4e0eend()\u51fd\u6570\u76f8\u4f3c\u3002</p>"},{"location":"c%2B%2B/C%2B%2B%20%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89/#rend","title":"<code>rend()</code>\u51fd\u6570","text":"<p>\u200b           \uff1a\u8fd4\u56de\u6307\u5411\u5f53\u524dvector\u8d77\u59cb\u4f4d\u7f6e\u7684\u9006\u8fed\u4ee3\u5668,\u4e0ebegin()\u51fd\u6570\u76f8\u4f3c</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;vector&gt;\nusing namespace std;\nint main()\n{\nvector&lt;int&gt; s1(2,56);//\u5b9a\u4e49\u4e00\u4e2a\u5b58\u653e2\u4e2a\"56\"\u7684\u5bb9\u5668s1;\nvector&lt;int&gt;::iterator it;//\u5b9a\u4e49\u4e00\u4e2a\u8fed\u4ee3\u5668it\n//\u7528\u8fed\u4ee3it\u6765\u63a5\u6536\u5bb9\u5668\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5730\u5740\nfor(it=s1.begin();it!=s1.end();it++)//\u5229\u7528\u8fed\u4ee3\u5668it\u4eces1\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\n{\ncout&lt;&lt;*it&lt;&lt;endl;//\u8f93\u51fa\u89e3\u5f15\u7528it\u7684\u503c\uff1b\n}\nreturn 0;\n}\n</code></pre>"},{"location":"c%2B%2B/C%2B%2B%20%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89/#capacity","title":"<code>capacity\uff08\uff09</code>\u51fd\u6570","text":"<p>\u200b       \u6307\u5bb9\u5668\u5728\u5206\u914d\u65b0\u7684\u5b58\u50a8\u7a7a\u95f4\u4e4b\u524d\u80fd\u5b58\u50a8\u7684\u5143\u7d20\u603b\u6570\u3002capacity\uff08\uff09\u662f\u5bb9\u5668\u53ef\u5b58\u50a8\u7684\u6700\u5927\u603b\u6570\uff0csize\uff08\uff09\u662f\u5f53\u524d\u5bb9\u5668\u5b58\u50a8\u7684\u4e2a\u6570\uff08\u5373\u5bb9\u5668\u5b9e\u9645\u5b58\u50a8\u7684\u5143\u7d20\u7684\u4e2a\u6570\uff09\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;vector&gt;\nusing namespace std;\nint main()\n{\nvector&lt;int&gt; v;  //\u6b64\u65f6\u6ca1\u6709\u521d\u59cb\u5316\uff0c\u6240\u4ee5size()\u548ccapacity()\u90fd\u662f0\uff1b\nv.push_back(1);\ncout&lt;&lt;\"size=\"&lt;&lt;v.size()&lt;&lt;\" capacity=\"&lt;&lt;v.capacity()&lt;&lt;endl;\n//\u6b64\u65f6\u5bb9\u5668\u5185\u6709\u4e00\u4e2a\u5143\u7d20\u4e86\uff0c\u90a3\u4e48size()\u548ccapacity()\u90fd\u662f1\nv.push_back(1);\ncout&lt;&lt;\"size=\"&lt;&lt;v.size()&lt;&lt;\" capacity=\"&lt;&lt;v.capacity()&lt;&lt;endl;\n//\u6b64\u65f6\u5bb9\u5668\u5185\u80fd\u591f\u63d0\u4f9b\u7684\u7a7a\u95f4capacity()\u4e0d\u591f\u7528\u4e86\uff0c\u9700\u8981\u7533\u8bf7\u5185\u5bb9\uff0c\u7533\u8bf7\u591a\u5c11\u5462\uff0c\u7533\u8bf7\u540e\u7684\u5927\u5c0f\u5e94\u8be5\u662f\u4ee5\u524d\u76842\u500d\uff0c\u90a3\u5c31\u5e94\u8be5\u662f2\u4e86\uff0c\u6b64\u65f6\u6709\u4e24\u4e2a\u5143\u7d20\uff0csize\uff08\uff09\u4e3a2\uff0ccapacity\uff08\uff09\u4e5f\u662f2\nv.push_back(1);\ncout&lt;&lt;\"size=\"&lt;&lt;v.size()&lt;&lt;\" capacity=\"&lt;&lt;v.capacity()&lt;&lt;endl;\n//\u6b64\u65f6\u5bb9\u5668\u80fd\u591f\u63d0\u4f9b\u7684\u7a7a\u95f4\u662f2\uff0c\u53c8\u589e\u52a0\u5143\u7d20\uff0c\u4e0d\u591f\uff0c\u9700\u8981\u7533\u8bf7\u7a7a\u95f4\uff0c\u7533\u8bf7\u540e\u7684\u7a7a\u95f4\u4e3a\u539f\u67652\u500d\uff0c\u5c31\u662f4\u4e86\uff0c\u90a3\u4e48size()\u4e3a3\uff0ccapacity\uff08\uff09\u4e3a4\nv.push_back(1);\ncout&lt;&lt;\"size=\"&lt;&lt;v.size()&lt;&lt;\" capacity=\"&lt;&lt;v.capacity()&lt;&lt;endl;\n//\u5bb9\u5668\u8fd8\u80fd\u591f\u63d0\u4f9b\u4e00\u4e2a\u7a7a\u95f4\uff0c\u4e0d\u9700\u8981\u7533\u8bf7\u65b0\u7a7a\u95f4\uff0csize()\u4e3a4\uff0ccapacity\uff08\uff09\u4e3a4\nv.push_back(1);\ncout&lt;&lt;\"size=\"&lt;&lt;v.size()&lt;&lt;\" capacity=\"&lt;&lt;v.capacity()&lt;&lt;endl;\n//\u7a7a\u95f4\u4e0d\u591f\uff0c\u9700\u8981\u7533\u8bf7\uff0csize()\u4e3a5\uff0ccapacity\u4e3a8\nreturn 0;\n}\n//\u8f93\u51fa\u4e3a\uff1a\nsize=1 capacity=1\nsize=2 capacity=2\nsize=3 capacity=4\nsize=4 capacity=4\nsize=5 capacity=8\n</code></pre>"},{"location":"c%2B%2B/C%2B%2B%20%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89/#clear","title":"<code>clear()</code>\u51fd\u6570","text":"<p>\u200b       \u5220\u9664\u5f53\u524dvector\u4e2d\u7684\u6240\u6709\u5143\u7d20\u3002</p> <pre><code>\u8bed\u6cd5\uff1ac. clear();-----&gt;//\u79fb\u9664\u5bb9\u5668c\u4e2d\u6240\u6709\u7684\u5143\u7d20\u3002\n</code></pre> <pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;vector&gt;\nusing namespace std;\nint main()\n{\nint a[5]={1,2,3,4,5};\nvector&lt;int&gt; s1(a,a+6);\nvector&lt;int&gt;::iterator it;//\u5b9a\u4e49\u8fed\u4ee3\u5668it\u548cmi\nvector&lt;int&gt;::iterator mi;\nfor(it=s1.begin();it!=s1.end();it++)//\u5229\u7528\u8fed\u4ee3\u5668it\u4eces1\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\n{\ncout&lt;&lt;*it&lt;&lt;endl;//\u8f93\u51fa\u89e3\u5f15\u7528it\u7684\u503c\uff1b\n}\ns1.clear();//\u6e05\u9664\u540es1\u5bb9\u5668\u4e3a\u7a7a\u3002\nfor(mi=s1.begin();mi!=s1.end();mi++)//\u5229\u7528\u8fed\u4ee3\u5668mi\u4eces1\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\n{\ncout&lt;&lt;*mi&lt;&lt;endl;//\u8f93\u51fa\u89e3\u5f15\u7528mi\u7684\u503c\uff1b\n}\nreturn 0;\n}\n</code></pre> <p></p> <p></p>"},{"location":"c%2B%2B/C%2B%2B%20%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89/#empty","title":"<code>empty()</code>\u51fd\u6570","text":"<p>\u200b       \u7528\u6765\u6d4b\u8bd5\u53d8\u91cf\u662f\u5426\u5df2\u7ecf\u914d\u7f6e\u3002\u82e5\u53d8\u91cf\u5df2\u5b58\u5728\u3001\u975e\u7a7a\u5b57\u7b26\u4e32\u6216\u8005\u975e\u96f6\uff0c\u5219\u8fd4\u56de false \u503c\uff1b\u53cd\u4e4b\u8fd4\u56de true\u503c\u3002\u6240\u4ee5\uff0c\u5f53\u5b57\u7b26\u4e32\u7684\u503c\u4e3a0\u65f6\uff0c\u4e5f\u8fd4\u56detrue\uff0c\u5c31\u662f\u6267\u884cempty\u5185\u90e8\u7684\u8bed\u53e5\u3002</p> <p>\u5373\uff1a\u9a8c\u8bc1\u5f53\u524d\u8fd9\u4e2a\u5bb9\u5668\u662f\u5426\u5df2\u7ecf\u8d4b\u503c\uff08\u5df2\u7ecf\u6709\u5143\u7d20\u5728\u91cc\u9762\uff09</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;vector&gt;\nusing namespace std;\nint main()\n{\nvector&lt;int&gt; s;\nint s1=s.empty();\ncout&lt;&lt;\"s1=\"&lt;&lt;s1&lt;&lt;endl;\n//\u8f93\u51fa\uff1as1=1\uff0c\u6ca1\u6709\u5bb9\u7eb3\u4efb\u4f55\u5143\u7d20\u8fd4\u56de1-----&gt;\u4e3a\u771f\ns.assign(5, 100);\nint s2=s.empty();\ncout&lt;&lt;\"s2=\"&lt;&lt;s2;\n//\u8f93\u51fa\uff1as2=0\uff0c\u6709\u5143\u7d20\u4e86\uff0c\u8fd4\u56de\u503c\u4e3a0----&gt;\u4e3a\u5047\nreturn 0;\n}\n</code></pre> <p>\u53ef\u505a\u4e3a\u5faa\u73af\u7684\u6761\u4ef6\u6267\u884c\uff1a</p> <pre><code>while( !v.empty() )------&gt;//\u4f5c\u4e3a\u5faa\u73af\u6267\u884c\u7684\u5224\u65ad\u6761\u4ef6\n{\ncout &lt;&lt; v.back() &lt;&lt; endl;\nv.pop_back();\n}\n</code></pre>"},{"location":"c%2B%2B/C%2B%2B%20%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89/#erase","title":"<code>erase()\u51fd\u6570</code>","text":"<p>\u200b       \uff1a\u8981\u4e48\u5220\u4f5c\u6307\u5b9a\u4f4d\u7f6eloc\u7684\u5143\u7d20,\u8981\u4e48\u5220\u9664\u533a\u95f4[start, end)\u7684\u6240\u6709\u5143\u7d20\u3002\u8fd4\u56de\u503c\u662f\u6307\u5411\u5220\u9664\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668(\u5373\u4e0b\u4e00\u4e2a\u6570\u636e\u7684<code>\u4f4d\u7f6e</code>\uff09\u3002</p> <pre><code>c.erase(pos)----&gt;//\u5220\u9664pos\u4f4d\u7f6e\u7684\u6570\u636e\uff0c\u4f20\u56de\u4e0b\u4e00\u4e2a\u6570\u636e\u7684\u4f4d\u7f6e\u3002\nc.erase(beg,end)----&gt;//\u5220\u9664[beg,end)\u533a\u95f4\u7684\u6570\u636e\uff0c\u4f20\u56de\u4e0b\u4e00\u4e2a\u6570\u636e\u7684\u4f4d\u7f6e\u3002\n</code></pre> <pre><code>#include&lt;iostream&gt;\n#include&lt;vector&gt;\n#include&lt;string&gt;\nusing namespace std;\nint main()\n{\nstring s = { \"abcdef\"};\ns.erase(s.begin()+3);\ncout &lt;&lt; s;//\u8f93\u51fa\uff1aabcef\uff0c\u5c06\u5b57\u7b26'd'\u5220\u9664\uff1b\ns.erase(s.begin() + 3,s.end());\ncout &lt;&lt; s &lt;&lt; endl;//\u8f93\u51fa\uff1aabc\uff0c\u5c06\u5b57\u7b26\u4e32\u4e2d\u533a\u95f4[3,6)\u7684\u5b57\u7b26\u5220\u9664\uff1b\nreturn 0;\n}\n</code></pre>"},{"location":"c%2B%2B/C%2B%2B%20%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89/#pop_back","title":"<code>pop_back()</code>\u51fd\u6570","text":"<p>\u200b           \uff1a\u5220\u9664\u5f53\u524d\u5bb9\u5668\u4e2d\uff08vector)\u6700\u540e\u7684\u4e00\u4e2a\u5143\u7d20\u3002</p> <pre><code>\u8bed\u6cd5\uff1avoid pop_back();\nvector&lt;int&gt; c;\nc.pop_back();-----&gt;//\u5220\u9664\u5bb9\u5668c\u4e2d\u6700\u540e\u7684\u5143\u7d20\u3002\n</code></pre> <pre><code>#include&lt;iostream&gt;\n#include&lt;vector&gt;\n#include&lt;string&gt;\nusing namespace std;\nint main()\n{\nvector&lt;int&gt; s;\nfor (int i = 0; i &lt; 10; i++)\ns.push_back(i);\nvector&lt;int&gt;::iterator b;\nfor (b = s.begin(); b != s.end(); b++)\n{\ncout &lt;&lt; *b &lt;&lt; \" \";//\u8f93\u51fa\uff1a0 1 2 3 4 5 6 7 8 9\n}\ncout &lt;&lt; endl;\ns.pop_back();//\u5220\u9664\u5bb9\u5668s\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20'9'\u3002\nvector&lt;int&gt;::iterator a;\nfor (a = s.begin(); a != s.end(); a++)\n{\ncout &lt;&lt; *a &lt;&lt; \" \";//\u8f93\u51fa\uff1a0 1 2 3 4 5 6 7 8\n}\n}\n</code></pre>"},{"location":"c%2B%2B/C%2B%2B%20%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89/#push_back","title":"<code>push_back()\u51fd\u6570</code>","text":"<p>\u200b           \uff1a\u6dfb\u52a0\u5143\u7d20\u5230\u5f53\u524d\u5bb9\u5668\uff08vector\uff09\u672b\u5c3e\uff0c\uff08\u63d2\u5165\u5143\u7d20\u5230\u5bb9\u5668\u4e2d\uff09\uff1b</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;vector&gt;\n#include&lt;string&gt;\nusing namespace std;\nint main()\n{\nstring s1;\nfor (char i = 'a'; i&lt;'a'+10; i++)\n{\ns1.push_back(i);//\u4ecei='a'\u5f00\u59cb\u7684\u5b57\u7b26\u63d2\u5165s1\u4e2d\n}\nvector&lt;int&gt; s2;\nfor (int i = 0; i &lt;10; i++)\n{\ns2.push_back(i);//\u5c06i\u7684\u503c\u63d2\u5165\u5bb9\u5668s2\u4e2d\n}\ncout &lt;&lt; \"s1=\"&lt;&lt; s1 &lt;&lt; endl;//\u8f93\u51fa\uff1as1=abcdefghij\nvector&lt;int&gt;::iterator a;\ncout &lt;&lt; \"s2=\";\nfor (a = s2.begin(); a != s2.end(); a++)\n{\ncout  &lt;&lt; *a &lt;&lt; \" \";//\u8f93\u51fa\uff1as2=0 1 2 3 4 5 6 7 8 9\n}\nreturn 0;\n}\n</code></pre>"},{"location":"c%2B%2B/C%2B%2B%20%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89/#reserve","title":"<code>reserve()</code>\u51fd\u6570","text":"<p>\u200b           \uff1a\u4e3a\u5f53\u524dvector\u9884\u7559\u81f3\u5c11\u5171\u5bb9\u7eb3size\u4e2a\u5143\u7d20\u7684\u7a7a\u95f4.(\u8bd1\u6ce8:\u5b9e\u9645\u7a7a\u95f4\u53ef\u80fd\u5927\u4e8esize)\u3002\u8c03\u6574vector\u5927\u5c0f\uff0c\u4f7f\u4e4b\u53ef\u4ee5\u5bb9\u7eb3n\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u5f53\u524dvector\u5bb9\u91cf\u5c0f\u4e8en\uff0c\u5219\u6269\u5c55\u5bb9\u91cf\u81f3n\uff0c\u5176\u4ed6\u60c5\u51b5\u5219\u4e0d\u8fdb\u884c\u5b58\u50a8\u91cd\u65b0\u5206\u914d\uff0c\u5bf9\u5bb9\u91cf\u6ca1\u6709\u5f71\u54cd\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\nint main()\n{\nint  s1;\nvector&lt;int&gt; a1;\ns1 = a1.capacity();//\u5b9a\u4e49\u662fs1\u5b58\u50a8\u5bb9\u5668a1\u7684\u6700\u5927\u5b58\u50a8\u6570\ncout &lt;&lt; \"a1:\" &lt;&lt; endl;\nfor (int i = 0; i &lt; 100; i++) {\na1.push_back(i);//\u5411\u5bb9\u5668\u4e2d\u63d2\u5165i\u7684\u503c\nif (s1 != a1.capacity()) {\ns1 = a1.capacity();\ncout &lt;&lt; \"capacity changed: \" &lt;&lt; s1 &lt;&lt; '\\n';\n//\u8f93\u51fa\u5bb9\u5668\u6700\u5927\u5b58\u50a8\u6570\u7684\u53d8\u5316\uff1a1\uff0c2\uff0c3\uff0c4\uff0c6\uff0c9\uff0c13\uff0c19......\n//\u5bb9\u5668\u4e2d\u7684\u6700\u5927\u5b58\u50a8\u6570\u968f\u7740\u5143\u7d20\u7684\u589e\u52a0\u800c\u589e\u52a0\n}\n}\nvector&lt;int&gt; a2;\ns1 = a2.capacity();//\u5c06\u5bb9\u5668a1\u7684\u6700\u5927\u5b58\u50a8\u6570\u8d4b\u503c\u7ed9s1\u3002\na2.reserve(500);   // \u76f4\u63a5\u8c03\u6574\u5bb9\u5668bar\u7684\u7a7a\u95f4\u4e3a100\u3002\ncout &lt;&lt;\"a2:\"&lt;&lt;endl;\nfor (int i = 0; i &lt; 100; ++i) {\na2.push_back(i);\nif (s1 != a2.capacity()) {\ns1 = a2.capacity();\ncout &lt;&lt; \"capacity changed: \" &lt;&lt; s1 &lt;&lt; '\\n';\n//\u5bb9\u5668\u8db3\u591f\u5b58\u50a8\u589e\u52a0\u7684\u503c\uff0c\u6240\u4ee5\u8f93\u51fa\u7684\u503c\u4e0d\u4f1a\u6539\u53d8\uff1b\u8f93\u51fa\u4e3a\uff1a500\u3002\n}\n}\nreturn 0;\n}\n</code></pre>"},{"location":"c%2B%2B/C%2B%2B%20%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89/#resize","title":"<code>resize()</code>\u51fd\u6570","text":"<p>\u200b       </p> <pre><code>c.resize(num)-----&gt;\u6539\u53d8c\u5bb9\u5668\u7684\u5b58\u50a8\u5927\u5c0f\u4e3anum(\u6570\u5b57)\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\nint main()\n{\nvector&lt;int&gt; s;\nfor(int i=0;i&lt;10;i++)\n{\ns.push_back(i);\n}\ncout&lt;&lt;\"size of:\"&lt;&lt;s.size()&lt;&lt;endl;//\u8f93\u51fa=size of:10\ns.resize(100);//\u91cd\u65b0\u8c03\u6574\u5bb9\u5668s\u7684size\u4e3a100\uff1b\ncout&lt;&lt;\"changed size of:\"&lt;&lt;s.size()&lt;&lt;endl;//\u8f93\u51fa=changed size of:100\nreturn 0;\n}\n</code></pre>"},{"location":"c%2B%2B/C%2B%2B%20%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89/#swap","title":"<code>swap()</code>\u51fd\u6570","text":"<pre><code>c1.swap(c2)-----&gt;\u5c06c1\u548cc2\u5143\u7d20\u4e92\u6362\u3002\nswap(c1,c2)-----&gt;\u5c06c1\u548cc2\u5143\u7d20\u4e92\u6362\u3002\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\nint main()\n{\nvector&lt;int&gt; s1;\ns1.assign(1, 500);\nvector&lt;int&gt; s2;\ns2.assign(1, 100);\ncout &lt;&lt; \"s1=\" &lt;&lt; s1[0] &lt;&lt; \"s2=\" &lt;&lt; s2[0] &lt;&lt; endl;\nswap(s1, s2);\ncout &lt;&lt; \"changed s1=\" &lt;&lt; s1[0] &lt;&lt; \"changed s2=\" &lt;&lt; s2[0] &lt;&lt; endl;\nreturn 0;\n//\u8f93\u51fa\uff1as1=500s2=100\n//changed s1=100changed s2=500\n}\n</code></pre>"},{"location":"c%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E2%80%94%E2%80%94%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95%EF%BC%9A/","title":"\u6392\u5e8f\u65b9\u6cd5","text":""},{"location":"c%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E2%80%94%E2%80%94%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95%EF%BC%9A/#c","title":"C\u8bed\u8a00\u2014\u2014\u6392\u5e8f\u65b9\u6cd5\uff1a","text":"<p>\u6392\u5e8f\u5206\u4e3a\uff1a\u5185\u6392\u5e8f\u548c\u5916\u6392\u5e8f\u3002</p> <p><code>\u5185\u6392\u5e8f</code>\uff1a\u63d2\u5165\u6392\u5e8f\u3001\u4ea4\u6362\u6392\u5e8f\u3001\u9009\u62e9\u6392\u5e8f\u3001\u5f52\u5e76\u6392\u5e8f</p> <p>\u7b80\u5355\u7b97\u6cd5\uff1a\u5192\u6ce1\u6392\u5e8f\u3001\u7b80\u5355\u6392\u5e8f\u3001\u76f4\u63a5\u63d2\u5165\u6392\u5e8f</p> <p>\u6539\u8fdb\u7b97\u6cd5\uff1a\u5e0c\u5c14\u6392\u5e8f\u3001\u5806\u6392\u5e8f\u3001\u5f52\u5e76\u6392\u5e8f\u3001\u5feb\u901f\u6392\u5e8f\u3002</p>"},{"location":"c%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E2%80%94%E2%80%94%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95%EF%BC%9A/#_1","title":"<code>\u5192\u6ce1\u6392\u5e8f</code>\uff1a","text":"<p>\u200b   \u4e24\u4e24\u6bd4\u8f83\u76f8\u90bb\u8bb0\u5f55\u7684\u5173\u952e\u5b57\uff0c\u5982\u679c\u53cd\u5e8f\u5219\u4ea4\u6362\uff0c\u76f4\u5230\u6ca1\u6709\u53cd\u5e8f\u7684\u8bb0\u5f55\u4e3a\u6b62\u3002</p> <pre><code>#include&lt;stdio.h&gt;\nint main()\n{\nint i, j, t;\nint sum[20] = {95,95,94,93,93,92,89,89,86,85,84,83,83,82,82,81,80,78,76};\nprintf(\"\u8f93\u5165\u4f60\u8981\u63d2\u5165\u5b66\u751f\u7684\u6210\u7ee9:\");\nscanf_s(\"%d\", &amp;sum[19]); //\u8f93\u5165\u63d2\u5165\u7684\u6210\u7ee9\nfor (j = 0; j &lt; 19; j++) //\u5192\u6ce1\u6cd5\u6392\u5e8f\uff0c\u4ece\u5c0f\u5230\u5927\u91cd\u65b0\u6392\u5e8f\n//\u5f53j=0\u65f6\uff0c\u4e0ei=0,\u4e00\u76f4\u6301\u7eed\u5230i&lt;19\u7684\u503c\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u5927\u4e8e\u5219\u4ea4\u6362\n//\u7b2c2\u6b21\u4ecei=1\u5f00\u59cb\uff0c\u4e0ej=0,\u4e00\u76f4\u6301\u7eed\u5230i&lt;18\u7684\u503c\u8fdb\u884c\u6bd4\u8f83\n{\nfor (i = 0; i &lt; 19-j; i++)\n{\nif (sum[i] &gt; sum[i + 1])//\u4f7f\u7528\u7b2c\u4e09\u53d8\u91cf\u4ea4\u6362\u5927\u5c0f\n{\nt = sum[i];\nsum[i] = sum[i + 1];\nsum[i + 1] = t;\n}\n}\n}\nprintf(\"\u91cd\u65b0\u6392\u5e8f\u540e\u7684\u6210\u7ee9\u4e3a\uff1a\\n\"); //\u8f93\u51fa\u4ece\u5927\u5230\u5c0f\u91cd\u65b0\u6392\u5e8f\u540e\u7684\u6210\u7ee9\nfor (i =19;i&gt;=0;i--)\n{\nprintf(\"%d \", sum[i]);\n}\nreturn 0;\n}\n</code></pre>"},{"location":"c%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E2%80%94%E2%80%94%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95%EF%BC%9A/#_2","title":"<code>\u7b80\u5355\u9009\u62e9\u6392\u5e8f</code>\uff1a","text":"<p>\u200b   \u901a\u8fc7n-i\u6b21\u5173\u952e\u5b57\u95f4\u7684\u6bd4\u8f83\uff0c\u4ecen-i+1\u4e2a\u8bb0\u5f55\u4e2d\u9009\u51fa\u5173\u952e\u5b57\u6700\u5c0f\u7684\u8bb0\u5f55\uff0c\u5e76\u548c\u7b2c  i\uff081\u2264i\u2264n\uff09\u4e2a\u8bb0\u5f55\u4ea4\u6362\u3002</p> <p>\u200b   </p> <pre><code>#include&lt;stdio.h&gt;\nint main() {\nint n, m, i, j, p, temp;\nint arr[100];\nscanf_s(\"%d\", &amp;n);\nfor (i = 0; i &lt; n; i++)\n{\nscanf_s(\"%d\", &amp;arr[i]);                     //\u8f93\u5165 \n}\nfor (i = 0; i &lt; n - 1; i++)\n{\np = i;                            //p\u7528\u4e8e\u8bb0\u5f55\u6700\u5c0f\u5143\u7d20\u7684\u4e0b\u6807\nfor (j = i + 1; j &lt; n; j++)  //\u4ece\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u6bcf\u4e00\u4e2a\u5143\u7d20(\u4e0b\u6807\u4e3ai)\u548c\u540e\u9762\u7684\u5143\u7d20\u8fdb\u884c\u6bd4\u8f83\uff0c\u627e\u5230\u5269\u4e0b\u5143\u7d20\u4e2d\u6700\u5c0f\u7684\u90a3\u4e00\u4e2a\n{      if (arr[p] &gt; arr[j])\np = j;\n}\ntemp = arr[i];                        //temp\u662f\u4ea4\u6362\u4e24\u6570\u65f6\u7684\u4e2d\u95f4\u53d8\u91cf\narr[i] = arr[p];\narr[p] = temp;\n}\nfor (i = 0; i &lt; n; i++) {\nprintf(\"%d \", arr[i]);                      //\u8f93\u51fa \n}\nreturn 0;\n}\n</code></pre>"},{"location":"c%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E2%80%94%E2%80%94%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95%EF%BC%9A/#_3","title":"<code>\u76f4\u63a5\u63d2\u5165\u6392\u5e8f</code>\uff1a","text":"<p>\u200b   \u76f4\u63a5\u63d2\u5165\u6392\u5e8f\u5c31\u662f\u5c06\u4e00\u4e2a\u8bb0\u5f55\u63d2\u5165\u5230\u5df2\u7ecf\u6392\u597d\u5e8f\u7684\u6709\u5e8f\u8868\u4e2d\uff0c\u4ece\u800c\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u3001\u8bb0\u5f55\u589e\u52a0\u4e86\u4e00\u4e2a\u6570\u7684\u6709\u5e8f\u8868\u3002</p> <p>\u200b   \u901a\u8fc7\u6784\u5efa\u6709\u5e8f\u5e8f\u5217\uff0c\u5bf9\u4e8e\u672a\u6392\u5e8f\u6570\u636e\uff0c\u5728\u5df2\u6392\u5e8f\u5e8f\u5217\u4e2d\u4ece\u540e\u5411\u524d\u626b\u63cf\uff0c\u627e\u5230\u76f8\u5e94\u4f4d\u7f6e\u5e76\u63d2\u5165\u3002 <pre><code>//\u63d2\u5165\u6392\u5e8f(\u4ece\u5c0f\u5230\u5927) \n#include&lt;stdio.h&gt;\nint num[100];\nint main()\n{\nint i = 0, n, m = 0, temp = 0;\nprintf(\"\u8f93\u5165\u6570\u5b57\u4e2a\u6570\uff1a\\n\");\nscanf_s(\"%d\", &amp;n);\nprintf(\"\u8f93\u5165\u6570\u5b57:\");\nfor (int j = 0; j &lt; n; j++)\nscanf_s(\"%d\", &amp;num[j]);//\u8f93\u5165\u6570\u5b57\u5b58\u50a8\u5230\u6570\u7ec4\u3002\nfor (i = 1; i &lt; n; i++)\n{\ntemp = num[i];//\u5c06temp\u6bcf\u4e00\u6b21\u8d4b\u503c\u7ed9temp\nm = i - 1;\nwhile (m &gt;= 0 &amp;&amp; temp &lt; num[m])   //\u6539\u987a\u5e8f \n{\nnum[m + 1] = num[m];//\u6ee1\u8db3\u6761\u4ef6\u7684\uff0c\u4e0e\u540e\u9762\u7684\u6570\u4ea4\u6362\uff0c\u8f83\u5927\u7684\u653e\u5728\u540e\u9762\nm--;\n}\nnum[m + 1] = temp;\n}\nfor (i = 0; i &lt; n - 1; i++)//\u8f93\u51fa\nprintf(\"%d \", num[i]);\nprintf(\"%d\\n\", num[i]);\nreturn 0;\n}\n</code></pre></p>"},{"location":"c%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E2%80%94%E2%80%94%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95%EF%BC%9A/#_4","title":"<code>\u5feb\u901f\u6392\u5e8f</code>\uff1a","text":""},{"location":"c%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0%EF%BC%9A/","title":"\u5b57\u7b26\u4e32\u51fd\u6570","text":""},{"location":"c%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0%EF%BC%9A/#c","title":"C\u8bed\u8a00\u5b57\u7b26\u4e32\u51fd\u6570\uff1a","text":"<p>\u5b57\u7b26\u4e32\u7684\u5b9a\u4e49\uff1a</p> <p>\u200b           \u5b57\u7b26\u4e32\u5e38\u91cf\u662f\u7531\u53cc\u5f15\u53f7\uff08\u201c \u201d\uff09\u5f15\u8d77\u6765\u7684\u5b57\u7b26\u5e8f\u5217\u3002</p> <p>\u200b           \u4f8b\u5982\uff1a\u201chello world\uff01\u201d       \u201c C program\u201d\u7b49\u3002</p> <p>\u5b57\u7b26\u4e32\u548c\u5b57\u7b26\u5e38\u91cf\u7684\u5dee\u522b\u5728\u4e8e\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u7684\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u540e\u9762\u52a0\u4e0a\u4e00\u4e2a\u7a7a\u64cd\u4f5c\u7b26<code>'\\0'</code>\uff0c\u4f5c\u4e3a\u5b57\u7b26\u4e32\u7ed3\u675f\u7684\u6807\u5fd7\u3002</p> <p>\u5b57\u7b26\u51fd\u6570\uff1a</p>"},{"location":"c%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0%EF%BC%9A/#gets","title":"<code>gets</code>\u51fd\u6570","text":"<p>\u200b       \uff1a\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u51fd\u6570\u3002</p> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\nint main()\n{\nchar str[10];//\u5b9a\u4e49\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\ngets(str);//\u8c03\u7528gets\u51fd\u6570\u63a5\u6536\u8f93\u5165\u7684\u5b57\u7b26\u4e32\nreturn 0;\n}\n</code></pre>"},{"location":"c%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0%EF%BC%9A/#puts","title":"<code>puts</code>\u51fd\u6570","text":"<p>\u200b       \uff1a\u8f93\u51fa\u5b57\u7b26\u4e32\u7684\u51fd\u6570\u3002</p> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\nint main()\n{\nchar str[10]={\"C program\"};\nputs(str);//\u8c03\u7528puts\u51fd\u6570\uff0c\u8f93\u51fastr\u6570\u7ec4\u4e2d\u7684\u5b57\u7b26\u4e32\u3002\nreturn 0;\n}\n</code></pre>"},{"location":"c%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0%EF%BC%9A/#strcat","title":"<code>strcat</code>\u51fd\u6570","text":"<p>\u200b       \uff1a\u5c06\u5b57\u7b26\u4e32\u62fc\u63a5\u8d77\u6765\u7684\u51fd\u6570\u3002\u5c06\u5b57\u7b26\u4e322\u4e0e\u5b57\u7b26\u4e321\u8fdb\u884c\u62fc\u63a5\uff0c\u7136\u540e\u653e\u5728\u5b57\u7b26\u4e321\u6240\u5728\u7684\u5b57\u7b26\u6570\u7ec4\u4e2d\u3002</p> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\nint main()\n{\nchar s1[10]={\"chi\"},s2[10]={\"na\"};//\u5b9a\u4e49\u4e24\u4e2a\u5b57\u7b26\u6570\u7ec4\u5206\u522b\u5b58\u50a8\u5b57\u7b26\u4e32\nstrcat(s1,s2);//\u5c06s1\u4e0es2\u4e2d\u7684\u5b57\u7b26\u4e32\u8fdb\u884c\u62fc\u63a5\uff0c\u518d\u5b58\u50a8\u5728s1\u4e2d\nputs(s1);//\u8f93\u51fas1\uff0c\u4e3achina\u3002\nreturn 0;\n}\n</code></pre>"},{"location":"c%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0%EF%BC%9A/#strcpy","title":"<code>strcpy</code>\u51fd\u6570","text":"<p>\u200b       \uff1a\u590d\u5236\u5b57\u7b26\u4e32\u7684\u51fd\u6570\u3002</p> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\nint main()\n{\nchar s1[10]={\"china\"};\nchar s2[10]={\"abc\"};\nstrcpy(s1,s2);//\u5c06\u5b57\u7b26\u4e32s2\u590d\u5236\u5230s1\u4e2d\u3002\nputs(s1);//\u8f93\u51fas1\uff0c\u4e3a\uff1aabc\nreturn 0;\n}\n</code></pre>"},{"location":"c%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0%EF%BC%9A/#strlen","title":"<code>strlen</code>\u51fd\u6570","text":"<p>\u200b       \uff1a\u6d4b\u91cf\u5b57\u7b26\u4e32\u957f\u5ea6\u7684\u51fd\u6570\uff0c\u4e0d\u5305\u62ec<code>'\\0'</code>(\u7a7a\u5b57\u7b26)\u3002</p> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\nint main()\n{\nchar s1={\"qweqweq\"};\nint m=strlen(s1);//\u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf\u5b58\u50a8\u5b57\u7b26\u4e32s1\u7684\u957f\u5ea6\nprintf(\"%d\",m);//\u8f93\u51fa\u5b57\u7b26\u4e32s1\u957f\u5ea6,\u8f93\u51fa\u4e3a7\nreturn 0;\n}\n</code></pre>"},{"location":"c%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0%EF%BC%9A/#strlwr","title":"<code>strlwr</code>\u51fd\u6570","text":"<p>\u200b           \uff1a\u5c06\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b57\u6bcd\u8f6c\u6362\u4e3a\u5c0f\u5199\u7684\u3002</p> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\nint main()\n{\nchar s1[10]={\"AbbA\"};\nstrlwr(s1);//\u5c06\u5927\u5199\u8f6c\u6362\u4e3a\u5c0f\u5199\nputs(s1);//\u8f93\u51fa\u4e3a\uff1aabba\nreturn 0;\n}\n</code></pre>"},{"location":"c%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0%EF%BC%9A/#strupr","title":"<code>strupr</code>\u51fd\u6570","text":"<p>\u200b           \uff1a\u5c06\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b57\u6bcd\u8f6c\u6362\u4e3a\u5927\u5199\u7684\u3002</p> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\nint main()\n{\nchar s1[10]={\"aBBa\"};\nstrupr(s1);\nputs(s1);//\u8f93\u51fa\u4e3a\uff1aABBA\nreturn 0;\n}\n</code></pre>"},{"location":"c%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0%EF%BC%9A/#strstr","title":"<code>strstr</code>\u51fd\u6570","text":"<p>\u200b       \uff1a\u67e5\u627e\u5b57\u7b26\u4e32\u7684\u51fd\u6570</p> <p>\u200b       \u51fd\u6570\u7528\u4e8e\u5224\u65ad\u5b57\u7b26\u4e32str2\u662f\u5426\u662fstr1\u7684\u5b50\u4e32\u3002\u5982\u679c\u662f\uff0c\u5219\u8be5\u51fd\u6570\u8fd4\u56destr2\u5728str1\u4e2d\u9996\u6b21\u51fa\u73b0\u7684\u5730\u5740\uff1b\u5426\u5219\uff0c\u8fd4\u56deNULL\uff08\u4e3a\u7a7a\uff09\u3002\u5982\u679c\u627e\u5230\u8be5\u6570\u7ec4\uff0c\u5c31\u4f1a\u4ece\u627e\u5230\u7684\u5730\u65b9\u5f00\u59cb\u8f93\u51fa\uff1b</p> <pre><code>#include &lt;string.h&gt;\n#include &lt;stdio.h&gt; int main()\n{\nchar a[10] = \"abcdefg\";\nchar b[10] = \"bc\";\nchar* ret = strstr(a, b);\n//\u5b9a\u4e49\u4e00\u4e2a\u6307\u9488\u53d8\u91cf\u5b58\u50a8\u5b57\u7b26\u4e32bc\u5728a\u6570\u7ec4\u4e2d\u9996\u6b21\u51fa\u73b0\u7684\u5730\u5740\u3002\nprintf(\"%s\\n\", *ret);  //\u8f93\u51fa bcdefg\nreturn 0;\n}\n</code></pre>"},{"location":"c%E8%AF%AD%E8%A8%80/c%E8%AF%AD%E8%A8%80%E2%80%94%E2%80%94%E9%80%92%E5%BD%92/","title":"\u9012\u5f52","text":""},{"location":"c%E8%AF%AD%E8%A8%80/c%E8%AF%AD%E8%A8%80%E2%80%94%E2%80%94%E9%80%92%E5%BD%92/#c","title":"c\u8bed\u8a00\u2014\u2014\u9012\u5f52","text":"<p>\u200b   \u5728C\u8bed\u8a00\u4e2d\uff0c\u4e00\u4e2a\u8c03\u7528\u81ea\u8eab\u7684\u51fd\u6570\u2014\u2014\u79f0\u4e3a\u51fd\u6570\u9012\u5f52\u3002(<code>\u81ea\u5df1\u8c03\u7528\u81ea\u5df1</code>)</p> <p>\u200b   \u9012\u5f52\u7684\u65b9\u5f0f\uff1a<code>\u7528\u5c0f\u7684\u7a0b\u5e8f\u89e3\u51b3\u590d\u6742\u95ee\u9898</code></p> <p>\u200b       \u901a\u5e38\u628a\u4e00\u4e2a\u5927\u578b\u590d\u6742\u7684\u95ee\u9898\u5c42\u5c42\u8f6c\u5316\u4e3a\u4e00\u4e2a\u4e0e\u539f\u95ee\u9898\u76f8\u4f3c\u7684\u89c4\u6a21\u8f83\u5c0f\u7684\u95ee\u9898\u6765\u6c42\u89e3</p>"},{"location":"c%E8%AF%AD%E8%A8%80/c%E8%AF%AD%E8%A8%80%E2%80%94%E2%80%94%E9%80%92%E5%BD%92/#_1","title":"\u6761\u4ef6\uff1a","text":"<ol> <li>\u8981\u6709--<code>\u9650\u5236\u6761\u4ef6</code>--\uff0c\u5f53\u6ee1\u8db3\u8fd9\u4e2a\u9650\u5236\u6761\u4ef6\u65f6\uff0c\u9012\u5f52\u4e0d\u5728\u7ee7\u7eed\u3002</li> <li>\u5faa\u73af\u4e2d\u7684\u503c<code>\u8981\u6709\u89c4\u5f8b</code>\uff0c\u4f8b\u5982\uff1a1 2 3 4 .....\u8fd9\u6837\u7684\u6570\u5217</li> <li>\u6bcf\u6b21\u9012\u5f52\u540e\uff0c\u5c31\u8d8a\u6765\u8d8a\u63a5\u8fd1\u6700\u540e\u7684\u9650\u5236\u6761\u4ef6\u3002</li> </ol> <p>\u4f8b\u9898\uff1a</p> <p>\u200b       </p> <pre><code>1   3   5   7   9   11  13  ......\n{\nf(n)=f(n-1)+2;//\u6570\u5217\u8868\u8fbe\u5f0f\nf(1)=1;//\u9012\u5f52\u51fa\u53e3\n}\n</code></pre> <pre><code>#include&lt;stdio.h&gt;\nint f(int n)\n{\nif(n==1)//\u5f53\u7b2c1\u9879\u65f6\uff08n=1\u65f6\uff09\uff0c\u76f4\u63a5\u8fd4\u56de1\uff1b\n{\nreturn 1;\n}\nelse return (f(n-1)+2);//\u9012\u5f52\u5f0f{\u7b2c10\u9879=\u7b2c9\u9879+2\uff0c\u7b2c9\u9879=\u7b2c8\u9879+2\uff0c...\u7b2c2\u9879=\u7b2c1\u9879+2\uff0c\u7b2c1\u9879\uff08n=1)=1}\n}\nint main()\n{\nint num=f(10);//\u8c03\u7528\u51fd\u6570\nprintf(\"num=%d\",num);\n}\n</code></pre> <pre><code>\u8ba1\u7b971+2+3+4+5...+n\u7684\u503c\u2014\u2014\u2014\u2014f(n)=f(n-1)+n;\n#include&lt;stdio.h&gt;\nint sum(int n)\n{\nif(n==1)//\u9012\u5f52\u51fa\u53e3\n{\nreturn 1;\n}\nelse {\nreturn (sum(n-1)+n);//\u9012\u5f52\u5f0f\n}\n}\nint mian()\n{\nint num=sum(100);\nprintf(\"num=%d\",num);\n}\n</code></pre>"},{"location":"c%E8%AF%AD%E8%A8%80/%E6%9E%9A%E4%B8%BE%E6%B3%95%EF%BC%88%E7%A9%B7%E4%B8%BE%E6%B3%95%EF%BC%89/","title":"\u7a77\u4e3e\u6cd5","text":""},{"location":"c%E8%AF%AD%E8%A8%80/%E6%9E%9A%E4%B8%BE%E6%B3%95%EF%BC%88%E7%A9%B7%E4%B8%BE%E6%B3%95%EF%BC%89/#_1","title":"\u679a\u4e3e\u6cd5\uff08\u7a77\u4e3e\u6cd5\uff09\uff1a","text":"<p>\u200b       \u5728\u5206\u6790\u95ee\u9898\u65f6\uff0c\u9010\u4e00\u5217\u4e3e\u51fa\u6240\u6709\u7684\u60c5\u51b5\uff0c\u7136\u540e\u5224\u65ad\u5217\u4e3e\u7684\u7b54\u6848\u662f\u5426\u7b26\u5408\u9898\u610f\u3002\u4e0d\u7b26\u5408\u5c31\u8df3\u8fc7\uff0c\u6700\u540e\u8f93\u51fa\u6240\u6709\u7b26\u5408\u7684\u7b54\u6848\u3002</p> <p>\u679a\u4e3e\u6cd5\u662f\u901a\u8fc7\u727a\u7272\u65f6\u95f4\u6765\u6362\u53d6\u7b54\u6848\u7684\u5168\u9762\u6027\u3002\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u9ad8\uff09</p> <ol> <li>\u786e\u5b9a\u679a\u4e3e\u7684\u5bf9\u8c61\u3001\u8303\u56f4\u3001\u5224\u65ad\u6761\u4ef6\u3002</li> <li>\u5229\u7528\u5faa\u73af\u4e00\u4e2a\u4e2a\u9a8c\u8bc1\u3002</li> </ol> <p>\u4f8b\u9898\uff1a</p> <p>\u76d2\u5b50\u53d6\u7403\u95ee\u9898\u2014\u2014\u67092\u4e2a\u7ea2\u7403\u30013\u4e2a\u9ec4\u7403\u30014\u4e2a\u767d\u7403\uff0c\u4efb\u610f\u53d64\u4e2a\u7403\uff0c\u5176\u4e2d\u5fc5\u987b\u6709\u4e00\u4e2a\u7ea2\u7403\uff0c\u8f93\u51fa\u6240\u6709\u65b9\u6848\u3002</p> <pre><code>#include&lt;stdio.h&gt;\nint main()\n{\nint i=2,j=3,k=4;//\u5b9a\u4e493\u4e2a\u53d8\u91cf\u6765\u786e\u5b9a\u679a\u4e3e\u5bf9\u8c61\nfor(i=1;i&lt;=2;i++)//\u7ea2\u7403\u5fc5\u987b\u6709\u4e00\u4e2a\u6240\u4ee5i\u4ece1\u5f00\u59cb\uff0c\u5217\u4e3e\u7ea2\u7403\u7684\u4e2a\u6570\n{\nfor(j=0;j&lt;=3;j++)//\u5217\u4e3e\u9ec4\u7403\u7684\u4e2a\u6570\n{\nfor(k=0;k&lt;=4;k++)//\u5217\u4e3e\u767d\u7403\u7684\u4e2a\u6570\n{\nif(i+k+j==4)//\u5224\u65ad\u6761\u4ef6\n{\nprintf(\"\u7ea2\u7403\uff1a%d \u9ec4\u7403\uff1a%d \u767d\u7403\uff1a%d\",i,j,k);\nprintf(\"\\n\");\n} }\n}\n}\nreturn 0;\n}\n</code></pre> <pre><code>\u7b97\u6cd5\u4f18\u5316\uff0c\u51cf\u5c11\u5faa\u73af\u6b21\u6570\n</code></pre> <pre><code>#include&lt;stdio.h&gt;\nint main()\n{\nint i=2,j=3;\nfor(i=1;i&lt;=2;i++)\n{\nfor(j=0;j&lt;=3;j++)\n{\nif(4-i-j&gt;=0&amp;&amp;4-j-i&lt;=4)//\u75284-i-j\u6765\u8868\u793a\u767d\u7403\u7684\u6570\u91cf\n{\nprintf(\"\u7ea2\u7403\uff1a%d \u9ec4\u7403\uff1a%d \u767d\u7403\uff1a%d\",i,j,4-i-j);\nprintf(\"\\n\");\n}\n}\n}\nreturn 0;\n}\n</code></pre>"},{"location":"sortAlgorithm/bubbleSort/","title":"\u5192\u6ce1\u6392\u5e8f(Bubble Sort)","text":"<p>\u2003\u2003\u5192\u6ce1\u6392\u5e8f\u662f\u6700\u7b80\u5355\u3001\u6700\u7ecf\u5178\u7684\u6392\u5e8f\u7b97\u6cd5\u3002\u65e0\u8bba\u54ea\u672c\u6559\u6750\uff0c\u4e00\u65e6\u8c08\u5230\u6392\u5e8f\u7b97\u6cd5\uff0c\u90fd\u4f1a\u5148\u8ba8\u8bba\u5192\u6ce1\u6392\u5e8f\u3002</p>"},{"location":"sortAlgorithm/bubbleSort/#_1","title":"\u539f\u7406","text":"<p>\u2003\u2003\u5047\u5b9a\u4e00\u4e2a\u957f\u4e3a\\(n\\)\u7684\u5e8f\u5217\uff0c\u90a3\u4e48\u672a\u4f18\u5316\u7684\u5192\u6ce1\u6392\u5e8f\u81f3\u5c11\u4f1a\u8fdb\u884c\\(n-1\\)\u8f6e\uff0c\u6bcf\u8f6e\u4e2d\uff0c\u5bf9\u5e8f\u5217\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u4e24\u4e24\u6bd4\u8f83\uff0c\u4f9d\u636e\u6392\u5e8f\u89c4\u5219(\u5347\u5e8f\u6216\u964d\u5e8f)\uff0c\u5c06\u6700\u5927/\u6700\u5c0f\u503c\u653e\u5728\u6700\u540e\u3002\u6bcf\u8fdb\u884c\u4e00\u8f6e\uff0c\u603b\u80fd\u5728\u5f85\u6392\u5e8f\u7684\u5e8f\u5217\u4e2d\u627e\u5230\u6700\u5c0f/\u6700\u5927\u503c\u5e76\u5c06\u5176\u653e\u5728\u5f85\u6392\u5e8f\u5e8f\u5217\u7684\u6700\u53f3\u8fb9\u3002\u56e0\u6b64\uff0c\u7ecf\u8fc7\\(n-1\\)\u8f6e\u540e(\u56e0\u4e3a\u6700\u540e\u4e00\u8f6e\u6240\u5269\u4e0b\u7684\u5143\u7d20\u4e00\u5b9a\u662f\u6709\u5e8f\u7684)\uff0c\u6574\u4e2a\u5e8f\u5217\u5c31\u53d8\u6210\u4e86\u6709\u5e8f\u5e8f\u5217\u3002</p> <p></p> <p>\u4e0a\u9762\u52a8\u56fe\u4e2d\uff0c\u851a\u84dd\u8272\u5c31\u662f\u5f85\u6392\u5e8f\u5e8f\u5217\uff0c\u9ec4\u8272\u662f\u5df2\u6392\u5e8f\u5e8f\u5217\uff0c\u7eff\u8272\u662f\u6b63\u5728\u6267\u884c\u4e24\u4e24\u5224\u65ad\u4e0e\u4ea4\u6362\u7684\u5143\u7d20\u3002</p>"},{"location":"sortAlgorithm/bubbleSort/#_2","title":"\u5b9e\u73b0","text":""},{"location":"sortAlgorithm/bubbleSort/#_3","title":"\u4ee3\u7801\u4e00","text":"<pre><code>void bubbleSortWay1(int arr[],int len){\nfor(int i=0;i&lt;len-1;i++){\nfor(int j=0;j&lt;len-1-i;j++){\nif(arr[j] &gt; arr[j+1]){\nint t = arr[j];\narr[j] = arr[j+1];\narr[j+1] = t;\n}\n}\n}\n}\n</code></pre> <p>\u2003\u2003\u6700\u5916\u5c42\u7684 for \u5faa\u73af\u6bcf\u7ecf\u8fc7\u4e00\u8f6e\uff0c\u5269\u4f59\u6570\u5b57\u4e2d\u7684\u6700\u5927\u503c\u5c31\u4f1a\u88ab\u79fb\u52a8\u5230\u5f53\u524d\u8f6e\u6b21\u7684\u6700\u540e\u4e00\u4f4d\uff0c\u4e2d\u9014\u4e5f\u4f1a\u6709\u4e00\u4e9b\u76f8\u90bb\u7684\u6570\u5b57\u7ecf\u8fc7\u4ea4\u6362\u53d8\u5f97\u6709\u5e8f\u3002\u603b\u5171\u6bd4\u8f83\u6b21\u6570\u662f\\((n-1)+(n-2)+(n-3)+...+1\\)\u3002</p> <p>\u2003\u2003\u8fd9\u79cd\u5199\u6cd5\u76f8\u5f53\u4e8e\u76f8\u90bb\u7684\u6570\u5b57\u4e24\u4e24\u6bd4\u8f83\uff0c\u5e76\u4e14\u89c4\u5b9a\uff1a\u201c\u8c01\u5927\u8c01\u7ad9\u53f3\u8fb9\u201d\u3002\u7ecf\u8fc7 \\(n\u22121\\) \u8f6e\uff0c\u6570\u5b57\u5c31\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u5b8c\u6210\u4e86\u3002\u6574\u4e2a\u8fc7\u7a0b\u770b\u8d77\u6765\u5c31\u50cf\u4e00\u4e2a\u4e2a\u6c14\u6ce1\u4e0d\u65ad\u4e0a\u6d6e\uff0c\u8fd9\u4e5f\u662f\u201c\u5192\u6ce1\u6392\u5e8f\u6cd5\u201d\u540d\u5b57\u7684\u7531\u6765\u3002</p>"},{"location":"sortAlgorithm/bubbleSort/#_4","title":"\u4ee3\u7801\u4e8c","text":"<p>\u2003\u2003\u4ee3\u7801\u4e8c\u662f\u6839\u636e\u4ee3\u7801\u4e00\u4f18\u5316\u800c\u6765\u7684\u3002</p> <pre><code>void bubbleSortWay2(int arr[],int len){\n// \u5f53\u524d\u8fd9\u8f6e\u7684\u5f85\u6392\u5e8f\u5217\u662f\u5426\u53d1\u751f\u4e86\u4ea4\u6362(\u662f\u5426\u662f\u6709\u5e8f\u7684)\n// true\u4e3a\u6ca1\u6709\u4ea4\u6362(\u6709\u5e8f)\nbool flag;\nfor(int i=0;i&lt;len-1;i++){\nflag = true;\nfor(int j=0;j&lt;len-1-i;j++){\nif(arr[j] &gt; arr[j+1]){\nint t = arr[j];\narr[j] = arr[j+1];\narr[j+1] = t;\nflag = false;\n}\n}\n// \u5982\u679c\u5df2\u662f\u6709\u5e8f\uff0c\u5219\u540e\u5e8f\u51e0\u8f6e\u4e0d\u5fc5\u6267\u884c\nif(flag){\nbreak;\n}\n}\n}\n</code></pre> <p>\u2003\u2003\u6211\u4eec\u77e5\u9053\u5192\u6ce1\u6392\u5e8f\u6bcf\u4e00\u8f6e\u90fd\u9700\u8981\u5bf9\u5f85\u6392\u5e8f\u6570\u7ec4\u8fdb\u884c\u4e24\u4e24\u6bd4\u8f83\u5e76\u4f9d\u636e\u6bd4\u8f83\u7ed3\u6784\u8fdb\u884c\u4ea4\u6362\u3002\u53ef\u4ee5\u5047\u8bbe\u5728\u67d0\u4e00\u8f6e\u4e2d\uff0c\u5f85\u6392\u5e8f\u5217\u6ca1\u6709\u51fa\u73b0\u4ea4\u6362\uff0c\u5176\u5b9e\u5c31\u8bf4\u660e\u4e86\u6574\u4e2a\u5e8f\u5217\u5df2\u662f\u6709\u5e8f\u72b6\u6001\u4e86\u3002\u6b64\u65f6\uff0c\u82e5\u4e0d\u91c7\u53d6\u7b56\u7565\uff0c\u7b97\u6cd5\u540e\u5e8f\u8fd8\u4f1a\u5bf9\u6709\u5e8f\u5e8f\u5217\u8fdb\u884c\u65e0\u7528\u7684\u6bd4\u8f83\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5f15\u5165\u4e00\u4e2a\u53d8\u91cf\u6765\u5224\u65ad\u5f53\u524d\u8fd9\u8f6e\u662f\u5426\u6267\u884c\u4e86\u4ea4\u6362\uff0c\u82e5\u6ca1\u6709\u6267\u884c\uff0c\u5219\u8bf4\u660e\u5df2\u662f\u6709\u5e8f\u7684\u4e86\uff0c\u8df3\u51fa\u5faa\u73af\u5373\u53ef\u3002</p> <p></p> <p>\u4e0a\u56fe\u6f14\u793a\u4e86\u4ee3\u7801\u4e8c\u7684\u6267\u884c\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u770b\u5230\uff0c\u5728\u7b2c\u4e09\u8f6e\u4e2d\u6ca1\u6709\u53d1\u751f\u4ea4\u6362\uff0c\u8bf4\u660e\u5e8f\u5217\u5df2\u662f\u6709\u5e8f\u7684\u4e86\uff0c\u4e0d\u5728\u6267\u884c\u540e\u5e8f\u51e0\u8f6e\u3002</p>"},{"location":"sortAlgorithm/bubbleSort/#_5","title":"\u4ee3\u7801\u4e09","text":"<p>\u2003\u2003\u4e00\u822c\u7684\u5192\u6ce1\u6392\u5e8f\u4ee3\u7801\u4f7f\u7528\u7684\u5c31\u662f\u4ee3\u7801\u4e8c\uff0c\u6b64\u5904\u4ecb\u7ecd\u7684\u4ee3\u7801\u4e09\u5e76\u4e0d\u5e38\u7528\uff0c\u662f\u57fa\u4e8e\u4ee3\u7801\u4e8c\u7684\u518d\u5ea6\u4f18\u5316\u3002</p> <pre><code>void bubbleSortWay3(int arr[],int len){\n// \u8bb0\u5f55\u6700\u540e\u4e00\u6b21\u4ea4\u6362\u7684\u4f4d\u7f6e\uff0c\u521d\u59cb\u5316\u662f\u6570\u7ec4\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\nint lastSwap = len-1;\n// \u8bb0\u5f55\u4ea4\u6362\u4f4d\u7f6e\nint lastIndex = -1;\nbool flag;\nfor(int i=0;i&lt;len-1;i++){\nflag = true;\nfor(int j=0;j&lt;lastSwap;j++){\nif(arr[j] &gt; arr[j+1]){\nint t = arr[j];\narr[j] = arr[j+1];\narr[j+1] = t;\nflag = false;\n// \u8bb0\u5f55\u4ea4\u6362\u4f4d\u7f6e\nlastIndex = i;\n}\n}\n// \u66f4\u65b0\u6700\u540e\u4e00\u6b21\u4ea4\u6362\u7684\u4f4d\u7f6e\n// \u4e0b\u4e00\u8f6e\u6392\u5e8f\u5c31\u53ea\u9700\u5bf9\u8be5\u4f4d\u7f6e\u4e4b\u524d\u7684\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\u5373\u53ef\nlastSwap = lastIndex;\nif(flag){\nbreak;\n}\n}\n}\n</code></pre> <p>\u2003\u2003\u5728\u6bcf\u4e00\u8f6e\u4e2d\uff0c\u6211\u4eec\u8bb0\u5f55\u6700\u540e\u4e00\u6b21\u8fdb\u884c\u4ea4\u6362\u7684\u4f4d\u7f6e\u5373\u53ef\uff0c\u56e0\u4e3a\u6700\u540e\u4e00\u6b21\u8fdb\u884c\u4ea4\u6362\u7684\u4f4d\u7f6e\u7684\u540e\u9762\u4e00\u5b9a\u662f\u6709\u5e8f\u7684\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u8be5\u4f4d\u7f6e\u4e4b\u524d\u7684\u5e8f\u5217\u8fdb\u884c\u6392\u5e8f\u3002</p> <p>\u2003\u2003\u6839\u636e\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u5224\u65ad\u5192\u6ce1\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u5206\u522b\u4e3a\uff1a\\(O(n^2)\\)\u548c\\(O(1)\\)\u3002</p>"},{"location":"sortAlgorithm/bubbleSort/#_6","title":"\u4e60\u9898","text":""},{"location":"sortAlgorithm/bubbleSort/#_7","title":"\u4e60\u9898\u4e00","text":"<p>\u2003\u2003\u8f93\u5165\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u628a\u6570\u7ec4\u91cc\u6240\u6709\u6570\u5b57\u62fc\u63a5\u8d77\u6765\u6392\u6210\u4e00\u4e2a\u6570\uff0c\u6253\u5370\u80fd\u62fc\u63a5\u51fa\u7684\u6240\u6709\u6570\u5b57\u4e2d\u6700\u5c0f\u7684\u4e00\u4e2a\u3002</p> <p>\u793a\u4f8b\u4e00</p> <pre><code>\u8f93\u5165: [10,2]\n\u8f93\u51fa: \"102\"\n</code></pre> <p>\u793a\u4f8b\u4e8c</p> <pre><code>\u8f93\u5165: [3,30,34,5,9]\n\u8f93\u51fa: \"3033459\"\n</code></pre> <p>\u601d\u8def</p> <ul> <li>\u9898\u76ee\u8981\u6c42\u4f7f\u7528\u6570\u7ec4\u4e2d\u6240\u6709\u7684\u6570\u8fdb\u884c\u62fc\u63a5\uff0c\u4f7f\u5f97\u62fc\u63a5\u540e\u7684\u6570\u662f\u6240\u6709\u6392\u5217\u4e2d\u6700\u5c0f\u7684\u3002</li> <li>\u6211\u4eec\u91c7\u7528\u8d2a\u5fc3\u7b56\u7565\uff0c\u4ece\u5c40\u90e8\u6700\u4f18\u89e3\u5f97\u5230\u5168\u5c40\u6700\u4f18\u89e3\u3002\u6211\u4eec\u5229\u7528\u5192\u6ce1\u6392\u5e8f\uff0c\u6bcf\u6b21\u5c06\u6570\u7ec4\u4e2d\u7684\u4e24\u4e2a\u6bd4\u8f83\u5143\u7d20\\(a\\)\u548c\\(b\\)\u7ec4\u6210\u4e24\u79cd\u5b57\u7b26\u4e32\"\\(ab\\)\"\u548c\"\\(ba\\)\"\u3002\u82e5\"\\(ab\\)\" &gt; \"\\(ba\\)\",\u5219\u5c06\\(a\\)\u548c\\(b\\)\u8fdb\u884c\u4ea4\u6362\u3002\u7531\u5192\u6ce1\u6392\u5e8f\u539f\u7406\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u6bcf\u8fdb\u884c\u4e00\u8f6e\u6bd4\u8f83\uff0c\u6700\u53f3\u8fb9\u7684\u5df2\u6392\u5e8f\u5217\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u4e00\u5b9a\u662f\u6700\u5c0f\u7684\u3002\u5f53\u6574\u4e2a\u5e8f\u5217\u4f9d\u636e\"\\(ab\\)\"\u548c\"\\(ba\\)\"\u7684\u5927\u5c0f\u5173\u7cfb\u6392\u5e8f\u5b8c\u6210\u540e\uff0c\u6574\u4e2a\u5e8f\u5217\u62fc\u63a5\u8d77\u6765\u7684\u5b57\u7b26\u4e32\u4e00\u5b9a\u662f\u6700\u5c0f\u7684\u3002\u8bc1\u660e\u7565\u3002</li> <li>\u672c\u9898\u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u9053\u6392\u5e8f\u9898\uff0c\u5e76\u4e14\u4f7f\u7528\u7684\u6392\u5e8f\u65b9\u6cd5\u53ea\u80fd\u662f\u57fa\u4e8e\u6bd4\u8f83\u7684\u6392\u5e8f\u65b9\u6cd5\u3002\u6bd4\u8f83\u89c4\u5219\u5c31\u662f\u4f9d\u636e\"\\(ab\\)\"\u548c\"\\(ba\\)\"\u4e24\u5b57\u7b26\u4e32\u7684\u5927\u5c0f\u5173\u7cfb\u8fdb\u884c\u7684\u3002</li> </ul> <p>\u4ee3\u7801</p> <pre><code>class Solution {\npublic:\nstring minNumber(vector&lt;int&gt;&amp; nums) {\nbool flag;\nint len = nums.size();\nfor(int i=0;i&lt;len-1;i++){\nfor(int j=0;j&lt;len-1-i;j++){\n// \u5b57\u7b26\u4e32: \"ab\"\nstring ab = to_string(nums[j]) + to_string(nums[j+1]);\n// \u5b57\u7b26\u4e32: \"ba\"\nstring ba = to_string(nums[j+1]) + to_string(nums[j]);\nif(ab &gt; ba){\n// \u4ea4\u6362\u4e24\u6570,\u8c03\u7528Algorithm\u5e93\u5df2\u5b9e\u73b0\u7684\u51fd\u6570\nswap(nums[j],nums[j+1]);\nflag = false;\n}\n}\nif(flag){\nbreak;\n}\n}\nstring ans = \"\";\nfor(int i=0;i&lt;len;i++){\nans += to_string(nums[i]);\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"sortAlgorithm/bubbleSort/#_8","title":"\u4e60\u9898\u4e8c","text":"<p>\u2003\u2003\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 \\(nums\\)\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u5c06\u6240\u6709 \\(0\\) \u79fb\u52a8\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u540c\u65f6\u4fdd\u6301\u975e\u96f6\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u3002\u8bf7\u6ce8\u610f \uff0c\u5fc5\u987b\u5728\u4e0d\u590d\u5236\u6570\u7ec4\u7684\u60c5\u51b5\u4e0b\u539f\u5730\u5bf9\u6570\u7ec4\u8fdb\u884c\u64cd\u4f5c\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u8f93\u5165: nums = [0,1,0,3,12]\n\u8f93\u51fa: [1,3,12,0,0]\n</code></pre> <p>\u601d\u8def</p> <ul> <li>\u672c\u9898\u8ba9\u5728\u4e00\u4e2a\u7ed9\u5b9a\u7684\u6570\u7ec4\u4e2d\uff0c\u5728\u4fdd\u8bc1\u5176\u975e\u96f6\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u60c5\u51b5\u4e0b\uff0c\u5c06\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u96f6\u79fb\u52a8\u81f3\u6570\u7ec4\u5c3e\u90e8\u3002</li> <li>\u626f\u5f00\u4e0b\u8bdd\u9898\uff1a\u5176\u5b9e\u6570\u7ec4\u4e2d\u7684\u96f6\u5c31\u53ef\u4ee5\u60f3\u8c61\u6210\"\u6ce1\u6ce1\"\uff0c\u8fd9\u4e9b\"\u6ce1\u6ce1\"\u5192\u51fa\u7684\u65b9\u5411\u5c31\u662f\u6570\u7ec4\u6700\u53f3\u8fb9\u3002</li> <li>\u5f53\u524d\u5143\u7d20\\(a_j\\)\u4e3a\\(0\\)\u65f6\uff0c\u6211\u4eec\u5c06\\(a_j\\)\u4e0e\\(a_{j+1}\\)\u8fdb\u884c\u4ea4\u6362\u3002\u8fdb\u884c\\(n-1\\)\u8f6e\u540e\uff0c\u5143\u7d20\u4e3a\\(0\\)\u7684\u5143\u7d20\u5c31\u90fd\u5728\u6570\u7ec4\u6700\u53f3\u8fb9\u4e86\u3002</li> </ul> <p>\u4ee3\u7801</p> <pre><code>class Solution {\npublic:\nvoid moveZeroes(vector&lt;int&gt;&amp; nums) {\nint len = nums.size();\nbool flag;\nfor(int i=0;i&lt;len-1;i++){\nflag = true;\nfor(int j=0;j&lt;len-i-1;j++){\nif(0 == nums[j]){\nint t = nums[j+1];\nnums[j+1] = nums[j];\nnums[j] = t;\nflag =false;\n}\n}\nif(flag){\nreturn;\n}\n}\n}\n};\n</code></pre>"},{"location":"sortAlgorithm/bubbleSort/#_9","title":"\u603b\u7ed3","text":"<p>\u5192\u6ce1\u6392\u5e8f\u4f18\u70b9\uff1a</p> <ul> <li>\u5192\u6ce1\u6392\u5e8f\u6613\u4e8e\u7406\u89e3\u4e0e\u5b9e\u73b0\uff1b</li> <li>\u4e0d\u9700\u8981\u989d\u5916\u7684\u5b58\u50a8\u7a7a\u95f4</li> <li>\u9002\u7528\u4e8e\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b</li> <li>\u5192\u6ce1\u6392\u5e8f\u662f\u4e00\u79cd\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u7a33\u5b9a\u5c31\u662f\u5728\u9488\u5bf9\u76f8\u540c\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\u65f6\uff0c\u5b83\u53ef\u4ee5\u4fdd\u8bc1\u5176\u539f\u6709\u7684\u76f8\u5bf9\u987a\u5e8f\u3002</li> </ul> <p>\u5b9e\u9645\u4e0a\uff0c\u5192\u6ce1\u6392\u5e8f\u7684\u7a33\u5b9a\u4e0e\u5426\u4e3b\u8981\u662f\u770b\u4f60\u5177\u4f53\u4ee3\u7801\u5b9e\u73b0\u7684\u6bd4\u8f83\u903b\u8f91\u3002\u5927\u591a\u6570\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5\u90fd\u53ef\u4ee5\u56e0\u4e3a\u5177\u4f53\u7684\u5b9e\u73b0\u903b\u8f91\u4ea7\u751f\u4e0d\u7a33\u5b9a\u7684\u6392\u5e8f\u7ed3\u679c\u3002\u4f46\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7a33\u5b9a\u6027\u53ea\u8981\u53ef\u63a7\uff0c\u90fd\u53ef\u4ee5\u5f52\u4e3a\u7a33\u5b9a\u6392\u5e8f\u3002</p> <p>\u5192\u6ce1\u6392\u5e8f\u7f3a\u70b9\uff1a</p> <ul> <li>\u5192\u6ce1\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(n^2)\\),\u5728\u9488\u5bf9\u5927\u578b\u6570\u636e\u7684\u6392\u5e8f\u65f6\uff0c\u6548\u7387\u5341\u5206\u4f4e\uff1b</li> </ul>"},{"location":"sortAlgorithm/countingSort/","title":"\u8ba1\u6570\u6392\u5e8f","text":"<p>\u2003\u2003\u8ba1\u6570\u6392\u5e8f\uff08Counting sort\uff09\u662f\u4e00\u79cd\u7a33\u5b9a\u7684\u7ebf\u6027\u65f6\u95f4\u6392\u5e8f\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u4e8e1954\u5e74\u7531Harold H. Seward \u63d0\u51fa\u3002\u8ba1\u6570\u6392\u5e8f\u4f7f\u7528\u4e00\u4e2a\u989d\u5916\u7684\u6570\u7ec4\\(C\\) \uff0c\u5176\u4e2d\u7b2c\\(i\\)\u4e2a\u5143\u7d20\u662f\u5f85\u6392\u5e8f\u6570\u7ec4\\(A\\)\u4e2d\u503c\u7b49\u4e8e\\(i\\)\u7684\u5143\u7d20\u7684\u4e2a\u6570\u3002\u7136\u540e\u6839\u636e\u6570\u7ec4\\(C\\) \u6765\u5c06\\(A\\)\u4e2d\u7684\u5143\u7d20\u6392\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\u3002</p> <p>\u2003\u2003\u8ba1\u6570\u6392\u5e8f\u4e0d\u662f\u6bd4\u8f83\u6392\u5e8f\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u5177\u6709\\(O(nlogn)\\)\u7684\u4e0b\u9650\u3002\u5f53\u8f93\u5165\u5143\u7d20\u662f\\(n\\)\u4e2a0\u5230\\(k\\)\u4e4b\u95f4\u7684\u6574\u6570\u65f6\uff0c\u5b83\u7684\u8fd0\u884c\u65f6\u95f4\u662f\\(O(n+k)\\)\u3002</p>"},{"location":"sortAlgorithm/countingSort/#_2","title":"\u539f\u7406","text":"<p>\u2003\u2003\u8ba1\u6570\u6392\u5e8f\u7edf\u8ba1\u5e8f\u5217\u4e2d\u5143\u7d20\u4e2a\u6570\uff0c\u7136\u540e\u5728\u6700\u5c0f\u5143\u7d20\u5230\u6700\u5927\u5143\u7d20\u7684\u8303\u56f4\u5185\uff0c\u4f9d\u636e\u5143\u7d20\u4e2a\u6570\u5bf9\u6570\u7ec4\u8fdb\u884c\u91cd\u65b0\u586b\u5145\u4f7f\u5f97\u6574\u4e2a\u5143\u7d20\u53d8\u5f97\u6709\u5e8f\u3002\u52a8\u753b\u6f14\u793a\u5982\u4e0b\uff1a</p> <p></p> <p>\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ul> <li>\u5148\u627e\u5230\u5f85\u6392\u5143\u7d20\u7684\u6700\u5927\u6700\u5c0f\u5143\u7d20\\(maxE\\)\u548c\\(minE\\)\u3002\u5f97\u5230\u8ba1\u6570\u8303\u56f4:\\(maxE-minE + 1\\).</li> <li>\u7edf\u8ba1\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u503c\u4e3a\\(elem - minE\\)\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u5b58\u5165\u6570\u7ec4C\u7684\u7b2c\\(elem-minE\\)\u9879.</li> <li>\u5bf9\u6240\u6709\u7684\u8ba1\u6570\u7d2f\u52a0(\u4ece\\(C\\)\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u6bcf\u4e00\u9879\u548c\u524d\u4e00\u9879\u76f8\u52a0)</li> <li>\u53cd\u5411\u586b\u5145\u76ee\u6807\u6570\u7ec4\uff1b\u5c06\u6bcf\u4e2a\u5143\u7d20\\(i\\)\u653e\u5728\u65b0\u6570\u7ec4\u7684\u7b2c\\(C(elem-min)\\)\u9879\uff0c\u6bcf\u653e\u4e00\u4e2a\u5143\u7d20\uff0c\u8ba1\u6570\u6570\u7ec4\\(C\\)\u81ea\u51cf\u4e00\u3002</li> </ul>"},{"location":"sortAlgorithm/countingSort/#_3","title":"\u5b9e\u73b0","text":"<pre><code>void countingSort(int arr[],int len){\n// \u627e\u5230\u6700\u503c\nint maxE = arr[0],minE = arr[0];\nfor(int i=1;i&lt;len;i++){\nif(arr[i] &gt; maxE){\nmaxE = arr[i];\n}\nif(arr[i] &lt; minE){\nminE = arr[i];\n}\n} // \u8303\u56f4\nint range = maxE - minE + 1;\n// \u8ba1\u6570\u6570\u7ec4\nint cnt[range];\nmemset(cnt,0,sizeof(cnt));\n// \u7edf\u8ba1\u6bcf\u4e2a\u5143\u7d20\u7684\u6b21\u6570\nfor(int i=0;i&lt;len;i++){\ncnt[arr[i] - minE]++;\n} // \u5f53\u524d\u9879\u52a0\u4e0a\u524d\u4e00\u9879\nfor(int i=1;i&lt;range;i++){\ncnt[i] += cnt[i-1];\n} // \u8d4b\u503c\nint output[len];\nfor(int i=len-1;i&gt;=0;i--){\n// \u7d2f\u52a0\u540e\u7684cnt[arr[i] - minE]\u8868\u793aarr[i]\u6bd4\u524dcnt[arr[i]-minE]\u4e2a\u5143\u7d20\u5927\n// \u4e0b\u6807\u4ece0\u5f00\u59cb\uff0c\u56e0\u6b64\u9700\u8981\u51cf1\noutput[cnt[arr[i] - minE] - 1] = arr[i];\ncnt[arr[i]-minE]--;\n} // \u62f7\u8d1d\nfor(int i=0;i&lt;len;i++){\narr[i] = output[i];\n}\n}\n</code></pre>"},{"location":"sortAlgorithm/countingSort/#_4","title":"\u4e60\u9898","text":""},{"location":"sortAlgorithm/countingSort/#_5","title":"\u4e60\u9898\u4e00","text":"<p>\u2003\u2003\u7ed9\u4f60\u4e24\u4e2a\u6570\u7ec4\uff0c\\(arr1\\) \u548c\u00a0\\(arr2\\)\uff0c\\(arr2\\)\u00a0\u4e2d\u7684\u5143\u7d20\u5404\u4e0d\u76f8\u540c\uff0c\\(arr2\\) \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u51fa\u73b0\u5728\u00a0\\(arr1\\)\u00a0\u4e2d\u3002\u5bf9 \\(arr1\\)\u00a0\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\uff0c\u4f7f \\(arr1\\) \u4e2d\u9879\u7684\u76f8\u5bf9\u987a\u5e8f\u548c\u00a0\\(arr2\\)\u00a0\u4e2d\u7684\u76f8\u5bf9\u987a\u5e8f\u76f8\u540c\u3002\u672a\u5728\u00a0\\(arr2\\)\u00a0\u4e2d\u51fa\u73b0\u8fc7\u7684\u5143\u7d20\u9700\u8981\u6309\u7167\u5347\u5e8f\u653e\u5728\u00a0\\(arr1\\)\u00a0\u7684\u672b\u5c3e\u3002</p> <p>\u2003\u2003\u6570\u7ec4\u6bcf\u4e2a\u5143\u7d20\u503c\u4e0d\u8d85\u8fc71000\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u8f93\u5165\uff1aarr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]\n\u8f93\u51fa\uff1a[2,2,2,1,4,3,3,9,6,7,19]\n</code></pre> <p>\u5206\u6790</p> <ul> <li>\u6570\u7ec4\\(arr2\\)\u662f\\(arr1\\)\u7684\u5b50\u6570\u7ec4\uff0c\u9898\u76ee\u8981\u6c42\u4fdd\u8bc1\\(arr2\\)\u6570\u7ec4\u76f8\u5bf9\u987a\u5e8f\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\\(arr1\\)\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u8fd4\u56de\u6392\u5e8f\u7ed3\u679c\u3002</li> <li>\u672c\u9898\u4f7f\u7528\u8ba1\u6570\u601d\u60f3\uff0c\u5bf9\\(arr1\\)\u7684\u6bcf\u4e2a\u5143\u7d20\u8fdb\u884c\u8ba1\u6570\uff1b</li> <li>\u8981\u6c42\\(arr2\\)\u7684\u76f8\u5bf9\u987a\u5e8f\u4e0d\u53d8\uff0c\u56e0\u6b64\u6211\u4eec\u5148\u586b\u5145\\(arr2\\)\u7684\u5143\u7d20\uff0c\u518d\u586b\u5145\\(arr1\\)\u7684\u5269\u4f59\u5143\u7d20\u3002</li> </ul> <p>\u4ee3\u7801</p> <pre><code>class Solution {\npublic:\nvector&lt;int&gt; relativeSortArray(vector&lt;int&gt;&amp; arr1, vector&lt;int&gt;&amp; arr2) {\nvector&lt;int&gt; cnt(1001);\nfor(auto e: arr1){\ncnt[e]++;\n}\nvector&lt;int&gt; ans(arr1.size());\nint index = 0;\n// \u5148\u586b\u5145arr2\u7684\u5143\u7d20\nfor(auto e: arr2){\nfor(int i=0;i&lt;cnt[e];i++){\nans[index++] = e;\n}\ncnt[e] = 0;\n}\n// \u518d\u586b\u5145arr1\u51cf\u53bbarr2\u7684\u5143\u7d20\u96c6\nfor(int i=0;i&lt;=1000;i++){\nfor(int j=0;j&lt;cnt[i];j++){\nans[index++] = i;\n}\n}\nreturn ans;\n}   };\n</code></pre>"},{"location":"sortAlgorithm/heapSort/","title":"\u5806\u6392\u5e8f(Heap Sort)","text":"<p>\u2003\u2003\u5806\u6392\u5e8f\u662f\u5229\u7528\u5806\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u800c\u8bbe\u8ba1\u7684\u4e00\u79cd\u6392\u5e8f\u7b97\u6cd5\uff0c\u5806\u6392\u5e8f\u662f\u4e00\u79cd\u9009\u62e9\u6392\u5e8f\uff0c\u5b83\u7684\u6700\u574f\uff0c\u6700\u597d\uff0c\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u4e3a\\(O(nlogn)\\)\uff0c\u4f46\u5806\u6392\u5e8f\u662f\u4e0d\u7a33\u5b9a\u6392\u5e8f\u3002</p>"},{"location":"sortAlgorithm/heapSort/#_1","title":"\u539f\u7406","text":"<p>\u2003\u2003\u4f9d\u636e\u5806\u7684\u6027\u8d28\uff0c\u53ef\u4ee5\u5c06\u5806\u5206\u4e3a\u5927\u9876\u5806\u548c\u5c0f\u9876\u5806:</p> <ul> <li>\u5927\u9876\u5806\uff1a \u7236\u8282\u70b9\u7684\u503c\u90fd\u5927\u4e8e\u6216\u7b49\u4e8e\u5176\u5de6\u53f3\u5b50\u8282\u70b9\u7684\u503c\uff1b</li> <li>\u5c0f\u9876\u5806\uff1a \u7236\u8282\u70b9\u7684\u503c\u90fd\u5c0f\u4e8e\u6216\u7b49\u4e8e\u5176\u5de6\u53f3\u5b50\u8282\u70b9\u7684\u503c\uff1b</li> </ul> <p></p> <p>\u2003\u2003\u9996\u5148\uff0c\u5806\u53ef\u4ee5\u88ab\u770b\u6210\u4e00\u4e2a\u8fd1\u4f3c\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\u6765\u5b9e\u73b0\u3002\u5bf9\u4e8e\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u9759\u6001\u5b58\u50a8\uff0c\u7ed9\u5b9a\u67d0\u4e2a\u7ed3\u70b9\u7684\u7f16\u53f7\\(i\\),\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5f97\u5230\u5176\u5de6\u53f3\u5b50\u8282\u70b9\u7684\u7f16\u53f7\uff1a</p> <ul> <li>\\(left(i) = 2*i + 1\\);</li> <li>\\(right(i) = 2*i + 2\\)</li> </ul> <p>\u5982\u4e0b\uff1a </p> <p>\u2003\u2003\u56e0\u6b64\uff0c\u5927\u9876\u5806\u548c\u5c0f\u9876\u5806\u7528\u516c\u5f0f\u63cf\u8ff0\u5982\u4e0b\uff1a</p> <ul> <li>\u5927\u9876\u5806: \\(arr[i] &gt;= arr[2i + 1] \\&amp;\\&amp; arr[i] &gt;= arr[2i + 2]\\)</li> <li>\u5c0f\u9876\u5806: \\(arr[i] &lt;= arr[2i + 1] \\&amp;\\&amp; arr[i] &lt;= arr[2i + 2]\\)</li> </ul> <p>\u2003\u2003\u5806\u6392\u5e8f(\u4ee5\u5347\u5e8f\u4e3a\u4f8b)\u8fc7\u7a0b\u5982\u4e0b\uff1a</p> <ul> <li>\u7528\u6570\u5217\u6784\u5efa\u51fa\u4e00\u4e2a\u5927\u9876\u5806\uff0c\u53d6\u51fa\u5806\u9876\u7684\u6570\u5b57\u5e76\u5c06\u8be5\u5143\u7d20\u4e0e\u672b\u5c3e\u5143\u7d20\u4ea4\u6362\uff1b</li> <li>\u8c03\u6574\u5269\u4f59\u7684\u6570\u5b57\uff0c\u6784\u5efa\u51fa\u65b0\u7684\u5927\u9876\u5806\uff0c\u518d\u6b21\u53d6\u51fa\u5806\u9876\u5143\u7d20\uff1b</li> <li>\u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\uff0c\u76f4\u81f3\u5806\u7684\u5927\u5c0f\u4e3a\u96f6\u3002</li> </ul> <p>\u2003\u2003\u82b1\u51e0\u5341\u79d2\u89c2\u770b\u4e0b\u5806\u6392\u5e8f\u7684\u6574\u4e2a\u6d41\u7a0b</p> <p></p> <p>\u2003\u2003\u56e0\u6b64\uff0c\u5806\u6392\u5e8f\u4e2d\u6211\u4eec\u9700\u8981\u89e3\u51b3\u4e24\u4e2a\u4e3b\u8981\u95ee\u9898\uff1a</p> <ul> <li>\u5982\u4f55\u6784\u5efa\u5927\u9876\u5806\uff1f</li> <li>\u53d6\u51fa\u5806\u9876\u5143\u7d20\u540e\uff0c\u5982\u4f55\u5c06\u5269\u4f59\u6570\u5b57\u8c03\u6574\u6210\u65b0\u7684\u5927\u9876\u5806\uff1f</li> </ul>"},{"location":"sortAlgorithm/heapSort/#_2","title":"\u5b9e\u73b0","text":"<p>\u2003\u2003\u4ece\u52a8\u753b\u6f14\u793a\u4e2d\u53ef\u4ee5\u770b\u5230\uff0c\u6784\u5efa\u5806\u7684\u8fc7\u7a0b\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u8c03\u6574\u7684\u8fc7\u7a0b\u3002\u56e0\u6b64\uff0c\u53ea\u9700\u8981\u5355\u72ec\u5b9e\u73b0\u4e00\u4e2a\u8c03\u6574\u51fd\u6570\\(heapify(arr,i,N)\\)\u3002\u5b83\u8868\u793a\u5bf9\u8282\u70b9\\(i\\),\u8fdb\u884c\u8c03\u6574\u3002\u8c03\u6574\u8fc7\u7a0b\u65e0\u975e\u5c31\u662f\uff1a\u5c06\u8282\u70b9\\(i\\)\u7684\u503c\u4e0e\u8282\u70b9\\(i\u30012i+1\u30012i+2\\)\u4e2d\u7684\u6700\u5927\u503c\u8fdb\u884c\u4ea4\u6362\u3002</p> <pre><code>void heapify(int arr[], int N, int i)\n{\n// \u4e09\u4e2a\u8282\u70b9\u7684\u6700\u5927\u503c\u521d\u59cb\u5316\u4e3a\u7236\u8282\u70b9i\nint largest = i;\n// \u5de6\u5b69\u5b50\nint l = 2 * i + 1;\n// \u53f3\u5b69\u5b50\nint r = 2 * i + 2;\n// \u5224\u65ad\u5de6\u5b69\u5b50\u7684\u503c\u662f\u5426\u6bd4\u7236\u8282\u70b9\u7684\u503c\u5927\uff0c\u82e5\u5927\uff0c\u66f4\u65b0\nif (l &lt; N &amp;&amp; arr[l] &gt; arr[largest])\nlargest = l;\n// \u5224\u65ad\u53f3\u5b69\u5b50\u7684\u503c\u662f\u5426\u6bd4\u7236\u8282\u70b9\u7684\u503c\u5927\uff0c\u82e5\u5927\uff0c\u66f4\u65b0\nif (r &lt; N &amp;&amp; arr[r] &gt; arr[largest])\nlargest = r;\n// \u82e5\u6700\u5927\u503c\u4e0d\u662f\u7ed3\u70b9i,\u5219\u9700\u8981\u5c06\u6700\u5927\u7ed3\u70b9\u4f5c\u4e3a\u7236\u8282\u70b9\u4ece\u800c\u6784\u5efa\u5927\u9876\u5806\nif (largest != i) {\nswap(arr[i], arr[largest]);\n// \u518d\u6b21\u8c03\u6574\u4ea4\u6362\u540e\u7684\u5927\u9876\u5806\nheapify(arr, N, largest);\n}\n}\n</code></pre> <p>\u2003\u2003\u6709\u4e86\u4e0a\u8ff0\u4ee3\u7801\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5199\u51fa\u6784\u5efa\u5927\u9876\u5806\u7684\u4ee3\u7801\uff0c\u6784\u5efa\u8fc7\u7a0b\u662f\u81ea\u5e95\u5411\u4e0a\u7684\uff1a</p> <pre><code>for (int i = N / 2 - 1; i &gt;= 0; i--)\nheapify(arr, N, i);\n</code></pre> <p>\u5bf9\u4e8e\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u6570\u7ec4\u5b58\u50a8\\(arr\\),\u5176\u6700\u540e\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\u7684\u4e0b\u6807\u4e3a\\((len/2)-1\\)\u3002</p> <p>\u2003\u2003\u4e4b\u540e\u6392\u5e8f\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u4e00\u8fb9\u53d6\u8d70\u5806\u9876\u5143\u7d20\u4e0e\u6570\u7ec4\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u8fdb\u884c\u4ea4\u6362\uff0c\u4e00\u8fb9\u8c03\u6574\u5806:</p> <pre><code>    for (int i = N - 1; i &gt; 0; i--) {\n// \u5c06\u5806\u9876\u5143\u7d20\u4e0e\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u8fdb\u884c\u4ea4\u6362\nswap(arr[0], arr[i]);\n// \u8c03\u6574\u5269\u4f59\u6570\u7ec4\uff0c\u4f7f\u5176\u6ee1\u8db3\u5927\u9876\u5806\nheapify(arr, i, 0);\n}\n</code></pre> <p>\u5b8c\u6574\u4ee3\u7801:</p> <pre><code>// \u5806\u8c03\u6574\nvoid heapify(int arr[],int len,int i){\nint largest = i;\nint l = 2*i + 1;\nint r = 2*i + 2;\nif(l &lt; len &amp;&amp; arr[l] &gt; arr[largest]){\nlargest = l;\n}\nif(r &lt; len &amp;&amp; arr[r] &gt; arr[largest]){\nlargest = r;\n}\nif(largest != i){\nswap(arr[i],arr[largest]);\nheapify(arr,len,largest);\n}\n}\nvoid heapSort(int arr[],int len){\n// \u6784\u5efa\u5927\u9876\u5806\nfor(int i = len/2 - 1;i &gt;= 0;i--){\nheapify(arr,len,i);\n}\n// \u53d6\u51fa\u5806\u9876\u5143\u7d20\u5e76\u4e0e\u5f85\u6392\u5e8f\u5e8f\u5217\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u4ea4\u6362\nfor(int i = len-1;i&gt;0;i--){\nswap(arr[i],arr[0]);\nheapify(arr,i,0);\n}\n}\n</code></pre>"},{"location":"sortAlgorithm/heapSort/#_3","title":"\u4e60\u9898","text":""},{"location":"sortAlgorithm/heapSort/#_4","title":"\u4e60\u9898\u4e00","text":"<p>\u2003\u2003\u7ed9\u5b9a\u6574\u6570\u6570\u7ec4 \\(nums\\) \u548c\u6574\u6570 \\(k\\)\uff0c\u8bf7\u8fd4\u56de\u6570\u7ec4\u4e2d\u7b2c \\(k\\) \u4e2a\u6700\u5927\u7684\u5143\u7d20\u3002\u8bf7\u6ce8\u610f\uff0c\u4f60\u9700\u8981\u627e\u7684\u662f\u6570\u7ec4\u6392\u5e8f\u540e\u7684\u7b2c \\(k\\) \u4e2a\u6700\u5927\u7684\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u7b2c \\(k\\) \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002</p> <p>\u601d\u8def</p> <p>\u2003\u2003\u5bf9\u4e8e\u5806\u6392\u5e8f\uff0c\u6bcf\u6b21\u8c03\u6574\u540e\u7684\u5806\u9876\u5143\u7d20\u5c31\u662f\u6240\u6709\u5143\u7d20\u7684\u6700\u5927\u503c\uff0c\u56e0\u6b64\uff0c\u672c\u9898\u5176\u5b9e\u5c31\u662f\u6c42\u8c03\u6574\\(k\\)\u6b21\u540e\u7684\u5806\u9876\u5143\u7d20\u662f\u591a\u5c11\u3002</p> <p>\u4ee3\u7801</p> <pre><code>class Solution {\npublic:\nint findKthLargest(vector&lt;int&gt;&amp; nums, int k) {\n// \u6784\u5efa\u5927\u9876\u5806,\u8c03\u6574\u4e861\u6b21\nint len = nums.size();\nfor(int i = len/2 -1;i &gt;= 0;i--){\nheapify(nums,i,len);\n}\n// \u8c03\u6574k-1\u6b21\nfor(int i = len-1;i &gt; len-k;i--){\nswap(nums[0],nums[i]);\nheapify(nums, 0, i);\n}\n// \u76f4\u63a5\u8fd4\u56de\u8c03\u6574\u4e86k\u6b21\u540e\u7684\u5806\u9876\u5143\u7d20\nreturn nums[0];\n}\nvoid heapify(vector&lt;int&gt;&amp; nums,int i,int n){\nint largest = i;\nint l = 2*i+1;\nint r = 2*i+2;\nif(l &lt; n &amp;&amp; nums[l] &gt; nums[largest]){\nlargest = l;\n}\nif(r &lt; n &amp;&amp; nums[r] &gt; nums[largest]){\nlargest = r;\n}\nif(largest != i){\nswap(nums[i],nums[largest]);\nheapify(nums,largest,n);\n}\n}\n};\n</code></pre>"},{"location":"sortAlgorithm/heapSort/#_5","title":"\u4e60\u9898\u4e8c","text":"<p>\u2003\u2003\u8f93\u5165\u6574\u6570\u6570\u7ec4 \\(arr\\) \uff0c\u627e\u51fa\u5176\u4e2d\u6700\u5c0f\u7684 \\(k\\) \u4e2a\u6570\u3002\u4f8b\u5982\uff0c\u8f93\u51654\u30015\u30011\u30016\u30012\u30017\u30013\u30018\u8fd98\u4e2a\u6570\u5b57\uff0c\u5219\u6700\u5c0f\u76844\u4e2a\u6570\u5b57\u662f1\u30012\u30013\u30014\u3002</p> <p>\u601d\u8def</p> <p>\u2003\u2003\u672c\u9898\u5176\u5b9e\u5c31\u662f\u6c42\u8c03\u6574\\(k\\)\u6b21\u5c0f\u9876\u5806\u4e2d\uff0c\u6bcf\u6b21\u7684\u6700\u5c0f\u503c\u6240\u6784\u6210\u7684\u6570\u7ec4\u3002</p> <p>\u4ee3\u7801</p> <pre><code>class Solution {\npublic:\nvector&lt;int&gt; getLeastNumbers(vector&lt;int&gt;&amp; arr, int k) {\n// \u82e5k=0\uff0c\u5219\u8fd4\u56de\u7a7a\u5e8f\u5217\nif(0==k){\nreturn {};\n}\n// \u6784\u5efa\u5c0f\u9876\u5806\nint N = arr.size();\nfor(int i=N/2-1;i &gt;= 0;i--){\nheapify(arr,N,i);\n}\nvector&lt;int&gt; ans;\nfor(int i=N-1;i &gt; N-k;i--){\nans.push_back(arr[0]);\nswap(arr[0],arr[i]);\nheapify(arr,i,0);\n}\n// k-1\u6b21\u8c03\u6574\u540e\uff0c\u8fd8\u9700\u8981\u5c06\u5806\u9876\u5143\u7d20\u53d6\u51fa\nans.push_back(arr[0]);\nreturn ans;\n}\nvoid heapify(vector&lt;int&gt;&amp; arr,int n,int i){\nint minn = i;\nint l = 2 * i + 1;\nint r = 2 * i + 2;\nif(l &lt; n &amp;&amp; arr[l] &lt; arr[minn]){\nminn = l;\n}\nif(r &lt; n &amp;&amp; arr[r] &lt; arr[minn]){\nminn = r;\n}\nif(minn != i){\nswap(arr[i],arr[minn]);\nheapify(arr,n,minn);\n}\n}\n};\n</code></pre>"},{"location":"sortAlgorithm/insertionSort/","title":"\u63d2\u5165\u6392\u5e8f(Insertion Sort)","text":""},{"location":"sortAlgorithm/insertionSort/#_1","title":"\u539f\u7406","text":"<p>\u2003\u2003\u63d2\u5165\u6392\u5e8f\u662f\u4e00\u79cd\u6700\u7b80\u5355\u76f4\u89c2\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u662f\u901a\u8fc7\u6784\u5efa\u6709\u5e8f\u5e8f\u5217\uff0c\u5bf9\u4e8e\u672a\u6392\u5e8f\u6570\u636e\uff0c\u5728\u5df2\u6392\u5e8f\u5e8f\u5217\u4e2d\u4ece\u540e\u5411\u524d\u626b\u63cf\uff0c\u5e76\u627e\u5230\u76f8\u5e94\u4f4d\u7f6e\u63d2\u5165\u3002\u6d41\u7a0b\u5982\u4e0b\uff1a</p> <ul> <li>\u5c06\u5f85\u6392\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u770b\u505a\u662f\u4e00\u4e2a\u6709\u5e8f\u5e8f\u5217\uff0c\u628a\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5230\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5f53\u505a\u65e0\u5e8f\u5e8f\u5217\uff1b</li> <li>\u4ece\u5934\u5230\u5c3e\u4f9d\u6b21\u626b\u63cf\u672a\u6392\u5e8f\u5e8f\u5217\uff0c\u5c06\u626b\u63cf\u5230\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u63d2\u5165\u6709\u5e8f\u5e8f\u5217\u7684\u9002\u5f53\u4f4d\u7f6e\uff1b</li> <li>\uff08\u82e5\u5f85\u63d2\u5165\u7684\u5143\u7d20\u4e0e\u6709\u5e8f\u5e8f\u5217\u4e2d\u7684\u67d0\u4e2a\u5143\u7d20\u76f8\u7b49\uff0c\u5219\u5c06\u5f85\u63d2\u5165\u5143\u7d20\u63d2\u5165\u5230\u76f8\u7b49\u5143\u7d20\u7684\u540e\u9762\uff0c\u4fdd\u8bc1\u6392\u5e8f\u7684\u7a33\u5b9a\u6027\uff09\u3002</li> </ul> <p>\u63d2\u5165\u6392\u5e8f\u7684\u539f\u7406\u548c\u6253\u6251\u514b\u724c\u7c7b\u4f3c\uff0c\u62ff\u6597\u5730\u4e3b\u6765\u8bf4\uff0c\u4e2a\u4eba\u7684\u724c\u5c31\u559c\u6b22\u4ece\u5de6\u5f80\u53f3\u653e\u7f6e\uff0c\u4ece\u7b2c\u4e8c\u5f20\u6536\u5230\u7684\u724c\u5f00\u59cb\uff0c\u6bcf\u6536\u5230\u4e00\u5f20\u724c\u5c31\u786e\u8ba4\u8be5\u724c\u5e94\u8be5\u5728\u624b\u4e2d\u4ec0\u4e48\u4f4d\u7f6e\u3002\u76f4\u81f3\u724c\u53d1\u5b8c\u540e\uff0c\u624b\u4e0a\u7684\u724c\u5c31\u5904\u4e8e\u4e00\u4e2a\u6709\u5e8f\u72b6\u6001\u3002</p> <p>\u63d2\u5165\u6392\u5e8f\u6709\u4e24\u79cd\u5199\u6cd5\uff1a</p> <ul> <li>\u4ea4\u6362\u6cd5\uff1a\u5728\u65b0\u6570\u5b57\u63d2\u5165\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u65ad\u4e0e\u524d\u9762\u7684\u6570\u5b57\u4ea4\u6362\uff0c\u76f4\u5230\u627e\u5230\u5408\u9002\u7684\u4f4d\u7f6e\u3002</li> <li>\u79fb\u52a8\u6cd5\uff1a\u5728\u65b0\u6570\u5b57\u63d2\u5165\u8fc7\u7a0b\u4e2d\uff0c\u4e0e\u524d\u9762\u7684\u6570\u4e0d\u65ad\u6bd4\u8f83\uff0c\u524d\u9762\u7684\u6570\u4e0d\u65ad\u5411\u540e\u632a\u51fa\u4f4d\u7f6e\uff0c\u5f53\u65b0\u6570\u627e\u5230\u81ea\u5df1\u7684\u4f4d\u7f6e\u540e\uff0c\u63d2\u5165\u5373\u53ef\u3002</li> </ul> <p>\u4e3a\u4e86\u66f4\u597d\u7a81\u51fa\u63d2\u5165\u8fd9\u4e00\u7279\u6027\uff0c\u4e00\u822c\u9009\u62e9\u79fb\u52a8\u6cd5\u8fdb\u884c\u5b9e\u73b0\u3002\u4e0b\u56fe\u6f14\u793a\u7684\u5c31\u662f\u79fb\u52a8\u6cd5\u5b9e\u73b0\u7684\u63d2\u5165\u6392\u5e8f </p>"},{"location":"sortAlgorithm/insertionSort/#_2","title":"\u5b9e\u73b0","text":""},{"location":"sortAlgorithm/insertionSort/#_3","title":"\u4ee3\u7801\u4e00\uff1a\u4ea4\u6362\u6cd5","text":"<pre><code>void insertionSort_swap(int arr[],int len){\n// \u4ece\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5f00\u59cb\u6267\u884c\uff0c\u56e0\u4e3a\u7b2c\u4e00\u4e2a\u5143\u7d20\u53ef\u4ee5\u89c6\u4e3a\u6709\u5e8f\nfor(int i=1;i&lt;len;i++){\n// j\u662f\u8d77\u59cb\u4f4d\u7f6e\nint j = i;\n// \u5f53\u524d\u5143\u7d20\u6bd4\u5de6\u8fb9\u7684\u5143\u7d20\u5c0f\uff0c\u5c31\u4ea4\u6362\uff0c\u76f4\u5230\u8be5\u5143\u7d20\u5230\u8fbe\u8be5\u5230\u7684\u4f4d\u7f6e\nwhile(j &gt;= 1 &amp;&amp; arr[j] &lt; arr[j-1]){\nint t = arr[j];\narr[j] = arr[j-1];\narr[j-1] = t;\n// \u4e0d\u65ad\u5411\u5de6\u8fdb\u884c\u4ea4\u6362\nj--;\n}\n}\n}\n</code></pre> <p>\u2003\u2003\u5bf9\u4e8e\u957f\u5ea6\u5c0f\u4e8e2\u7684\u5f85\u6392\u5e8f\u5217\uff0c\u5176\u672c\u8eab\u5c31\u662f\u6709\u5e8f\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u4ece\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5f00\u59cb\u6267\u884c\u63d2\u5165\u6392\u5e8f\u3002\u6574\u4e2a\u8fc7\u7a0b\u5176\u5b9e\u5c31\u7c7b\u4f3c\u4e0e\u4e00\u4e2a\u4e2a\u5b50\u77ee\u7684\u4eba\u60f3\u8981\u5728\u4eba\u7fa4\u4e2d\u770b\u620f\u4e00\u6837\u3002\u4ed6\u9700\u8981\u4e0d\u65ad\u8ddf\u4e2a\u5b50\u9ad8(\u5143\u7d20\u5927)\u7684\u4eba\u4ea4\u6362\u4f4d\u7f6e\uff0c\u76f4\u5230\u524d\u9762\u7684\u4eba\u6bd4\u4ed6\u77ee\uff0c\u540e\u9762\u7684\u4eba\u6bd4\u4ed6\u9ad8\uff08\u627e\u5230\u5408\u9002\u4f4d\u7f6e\uff09\uff0c\u624d\u80fd\u770b\u5230\u620f\uff08\u5176\u5b9e\u66f4\u60f3\u8bf4\u770b\u70ed\u95f9\uff0c\u4e2d\u56fd\u4eba\u7684\u4f20\u7edf\u561b\uff09\u3002</p>"},{"location":"sortAlgorithm/insertionSort/#_4","title":"\u4ee3\u7801\u4e8c\uff1a\u79fb\u52a8\u6cd5","text":"<p>\u2003\u2003\u901a\u8fc7\u4ea4\u6362\u6cd5\uff0c\u53ef\u4ee5\u53d1\u73b0\u7b97\u6cd5\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u5176\u5b9e\u505a\u4e86\u5f88\u591a\u6ca1\u5fc5\u8981\u7684\u4ea4\u6362\u3002\u6211\u4eec\u53ea\u9700\u8981\u5c06\u5927\u7684\u6570\u4e0d\u65ad\u5f80\u540e\u632a\uff0c\u76f4\u5230\u7a7a\u51fa\u6765\u7684\u4f4d\u7f6e\u9002\u5408\u5f53\u524d\u5143\u7d20\u540e\uff0c\u63d2\u5165\u5373\u53ef\u3002</p> <pre><code>void insertionSort_move(int arr[],int len){\nfor(int i=1;i&lt;len;i++){\nint j = i - 1;\n// t\u662f\u5f53\u524d\u5143\u7d20\nint t = arr[i];\nwhile(t &lt; arr[j] &amp;&amp; j &gt;= 0){\n// \u5f80\u540e\u632a\narr[j+1] = arr[j];\nj--;\n}\n// \u63d2\u5165\narr[j+1] = t;\n}\n}\n</code></pre> <p>\u2003\u2003\u62ff\u770b\u620f\u4e3e\u4f8b\uff0c\u79fb\u52a8\u6cd5\u5c31\u50cf\u6709\u4e00\u4e2a\u5c0f\u5730\u75de\u62ff\u7740\u4e2a\u5927\u5587\u53ed\u4e0d\u65ad\u558a\u201c\u4e2a\u5b50\u9ad8\u7684\u7ed9\u8001\u5b50\u5f80\u540e\u632a\u632a\u201d\uff0c\u4e00\u8fb9\u558a\u8bdd\u4e00\u8fb9\u4ece\u4eba\u7fa4\u65c1\u8fb9\u5f80\u91cc\u8d70\uff0c\u76f4\u5230\u627e\u5230\u5408\u9002\u7684\u4f4d\u7f6e\uff0c\u5c41\u80a1\u4e00\u5750\uff0c\u63d2\u5165\u5b8c\u6210\u3002</p>"},{"location":"sortAlgorithm/insertionSort/#_5","title":"\u4ee3\u7801\u4e09: \u6298\u534a\u63d2\u5165","text":"<p>\u2003\u2003\u6298\u534a\u67e5\u627e\u662f\u5bf9\u79fb\u52a8\u6cd5\u7684\u4e00\u79cd\u4f18\u5316\u3002\u4f46\u5b9e\u9645\u4e0a\u4e0e\u76f4\u63a5\u63d2\u5165\u6392\u5e8f\u7b97\u6cd5\u539f\u7406\u76f8\u540c\uff0c\u53ea\u662f\u5728\u5411\u5df2\u6392\u5e8f\u7684\u6570\u636e\u4e2d\u63d2\u5165\u6570\u636e\u65f6\uff0c\u91c7\u7528\u4e8c\u5206\u67e5\u627e\u3002\u5229\u7528\u4e8c\u5206\u67e5\u627e\u627e\u5230\u5408\u9002\u7684\u4f4d\u7f6e\u540e\uff0c\u518d\u7edf\u4e00\u632a\u51fa\u7a7a\u4f4d\uff0c\u5c06\u5143\u7d20\u63d2\u5165</p> <pre><code>void binaryInsertSort(int arr[], int len){\nint low = 0;\nint high = 0;\nint m = 0;// \u4e2d\u95f4\u4f4d\u7f6e\nfor(int i = 1; i &lt; arr.length; i++){\nlow = 0;\nhigh = i-1;\nwhile(low &lt;= high){\nm = (low+high)/2;\nif(arr[m] &gt; arr[i])\nhigh = m - 1;\nelse\nlow = m + 1;\n}\n//\u7edf\u4e00\u79fb\u52a8\u5143\u7d20\uff0c\u5c06\u5f85\u6392\u5e8f\u5143\u7d20\u63d2\u5165\u5230\u6307\u5b9a\u4f4d\u7f6e\ntemp = arr[i];\nfor(int j=i; j &gt; high+1; j--){\narr[j] = arr[j-1];\n}\narr[high+1] = temp;\n}\n}\n</code></pre> <p>\u2003\u2003\u7531\u4ee3\u7801\u53ef\u4ee5\u5206\u6790\u51fa\u63d2\u5165\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u5206\u522b\u4e3a\uff1a\\(O(n^2)\\)\u548c\\(O(1)\\)\u3002</p>"},{"location":"sortAlgorithm/insertionSort/#_6","title":"\u4e60\u9898","text":""},{"location":"sortAlgorithm/insertionSort/#_7","title":"\u4e60\u9898\u4e00","text":"<p>\u2003\u2003\u7ed9\u5b9a\u5355\u4e2a\u94fe\u8868\u7684\u5934 \\(head\\) \uff0c\u4f7f\u7528 \u63d2\u5165\u6392\u5e8f \u5bf9\u94fe\u8868\u8fdb\u884c\u6392\u5e8f\uff0c\u5e76\u8fd4\u56de \u6392\u5e8f\u540e\u94fe\u8868\u7684\u5934 \u3002</p> <p>\u793a\u4f8b </p> <p>\u601d\u8def</p> <p>\u2003\u2003\u5bf9\u4e8e\u94fe\u8868\u800c\u8a00\uff0c\u63d2\u5165\u5143\u7d20\u65f6\u53ea\u9700\u66f4\u65b0\u76f8\u90bb\u8282\u70b9\u7684\u6307\u9488\u5373\u53ef\uff0c\u4e0d\u9700\u8981\u50cf\u6570\u7ec4\u4e00\u6837\u5c06\u63d2\u5165\u4f4d\u7f6e\u540e\u9762\u7684\u5143\u7d20\u5f80\u540e\u79fb\u52a8\uff0c\u56e0\u6b64\u63d2\u5165\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(1)\\),\u4f46\u627e\u5230\u63d2\u5165\u4f4d\u7f6e\u9700\u8981\u904d\u5386\u94fe\u8868\u4e2d\u7684\u7ed3\u70b9\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(n)\\),\u56e0\u6b64\u5728\u94fe\u8868\u4e0a\u8fdb\u884c\u63d2\u5165\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u4e3a\\(O(n^2)\\)\u3002 \u2003\u2003\u5bf9\u4e8e\u5355\u94fe\u8868\u6765\u8bf4\uff0c\u53ea\u6709\u6307\u5411\u540e\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\uff0c\u56e0\u6b64\u9700\u8981\u4ece\u94fe\u8868\u7684\u5934\u90e8\u5f00\u59cb\u5f80\u540e\u904d\u5386\u94fe\u8868\u4e2d\u7684\u7ed3\u70b9\u4ece\u800c\u627e\u5230\u63d2\u5165\u4f4d\u7f6e\u3002</p> <p>\u4ee3\u7801</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\nListNode* insertionSortList(ListNode* head) {\nif(head == nullptr){\nreturn head;\n}\n// \u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5934\u8282\u70b9\u7528\u6765\u5f53\u505a\u67e5\u627e\u7684\u8d77\u59cb\u4f4d\u7f6e\nListNode* H = new ListNode(0);\nH-&gt;next = head;\nListNode* lastNode = head;\nListNode* currNode = head-&gt;next;\nwhile(currNode != nullptr){\nif(lastNode-&gt;val &lt;= currNode-&gt;val){\n// \u82e5\u5f85\u63d2\u5165\u7684\u8282\u70b9\u6070\u597d\u662f\u6700\u5927\u7684\u8282\u70b9\uff0c\u76f4\u63a5\u66f4\u65b0\u6700\u540e\u8282\u70b9\u7684\u4f4d\u7f6e\nlastNode = lastNode-&gt;next;\n}else {\n// \u627e\u5230\u5408\u9002\u4f4d\u7f6e\nListNode* pre = H;\nwhile(pre-&gt;next-&gt;val &lt;= currNode-&gt;val){\npre = pre-&gt;next;\n}\n// \u63d2\u5165\u64cd\u4f5c\nlastNode-&gt;next = currNode-&gt;next;\ncurrNode-&gt;next = pre-&gt;next;\npre-&gt;next = currNode;\n}\n// \u66f4\u65b0\u5f85\u63d2\u5165\u5143\u7d20\ncurrNode = lastNode -&gt; next;\n}\nreturn H-&gt;next;\n}\n};\n</code></pre>"},{"location":"sortAlgorithm/mergeSort/","title":"\u5f52\u5e76\u6392\u5e8f(Merge Sort)","text":"<p>\u2003\u2003\u5f52\u5e76\u6392\u5e8f\u662f\u5efa\u7acb\u5728\u5f52\u5e76\u64cd\u4f5c\u4e0a\u7684\u4e00\u79cd\u6709\u6548\u7684\u6392\u5e8f\u7b97\u6cd5\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(nlogn)\\),\u7a7a\u95f4\u590d\u6742\u5ea6\\(O(n)\\)\u3002\u8be5\u7b97\u6cd5\u662f\u91c7\u7528\u5206\u6cbb\u6cd5\u7684\u4e00\u4e2a\u975e\u5e38\u5178\u578b\u7684\u5e94\u7528\u3002</p>"},{"location":"sortAlgorithm/mergeSort/#_1","title":"\u539f\u7406","text":"<p>\u2003\u2003\u5f52\u5e76\u6392\u5e8f\u7684\u5de5\u4f5c\u539f\u7406\u662f\uff1a\u5c06\u6570\u7ec4\u5212\u5206\u4e3a\u66f4\u5c0f\u7684\u5b50\u6570\u7ec4\uff0c\u5bf9\u6bcf\u4e2a\u5b50\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u5c06\u5df2\u6392\u5e8f\u7684\u5b50\u6570\u7ec4\u5408\u5e76\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u6392\u5e8f\u597d\u7684\u6570\u7ec4\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u6700\u7ec8\u5f97\u5230\u4e00\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4\u3002\u7b80\u5355\u6765\u8bf4\uff0c\u5f52\u5e76\u6392\u5e8f\u7684\u8fc7\u7a0b\u5c31\u662f\u5c06\u6570\u7ec4\u5206\u6210\u4e24\u534a\uff0c\u7136\u540e\u5bf9\u6bcf\u4e00\u534a\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u5c06\u6392\u5e8f\u597d\u7684\u4e24\u534a\u91cd\u65b0\u5408\u5e76\u5728\u4e00\u8d77\uff0c\u91cd\u590d\u6b64\u8fc7\u7a0b\uff0c\u76f4\u5230\u5bf9\u6574\u4e2a\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\u3002</p> <p></p>"},{"location":"sortAlgorithm/mergeSort/#_2","title":"\u5b9e\u73b0","text":"<p>\u7b97\u6cd5\u6b65\u9aa4\uff1a</p> <ul> <li>\u7533\u8bf7\u7a7a\u95f4\uff0c\u4f7f\u5176\u5927\u5c0f\u4e3a\u4e24\u4e2a\u5df2\u7ecf\u6392\u5e8f\u5e8f\u5217\u4e4b\u548c\uff0c\u8be5\u7a7a\u95f4\u7528\u6765\u5b58\u653e\u5408\u5e76\u540e\u7684\u5e8f\u5217\uff1b</li> <li>\u8bbe\u5b9a\u4e24\u4e2a\u6307\u9488\uff0c\u521d\u59cb\u4f4d\u7f6e\u5206\u522b\u4e3a\u4e24\u4e2a\u5df2\u7ecf\u6392\u5e8f\u5e8f\u5217\u7684\u8d77\u59cb\u4f4d\u7f6e\uff1b</li> <li>\u6bd4\u8f83\u4e24\u6307\u9488\u6240\u6307\u5411\u5143\u7d20\u7684\u5927\u5c0f\uff0c\u5c06\u76f8\u5bf9\u8f83\u5c0f\u7684\u5143\u7d20\u5408\u5e76\u5230\u5f00\u8f9f\u7684\u7a7a\u95f4\u4e2d\uff0c\u540c\u65f6\u6307\u9488\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u6307\u5b9a\u4f4d\u7f6e\uff1b</li> <li>\u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\uff0c\u76f4\u81f3\u6307\u9488\u6307\u5411\u5e8f\u5217\u5c3e\u90e8\uff1b</li> <li>\u5c06\u5269\u4f59\u6240\u6709\u5143\u7d20\u5408\u5e76\u5230\u5f00\u8f9f\u7684\u7a7a\u95f4\u4e2d\u3002</li> </ul> <p>\u2003\u2003\u5f52\u5e76\u6392\u5e8f\u7684\u7ecf\u5178\u5b9e\u73b0\u65b9\u5f0f\u5c31\u662f\u5229\u7528\u9012\u5f52\u3002\u53e6\u5916\u4e00\u79cd\u5c31\u662f\u8fed\u4ee3\uff0c\u5f53\u7136\uff0c\u9012\u5f52\u4e0e\u8fed\u4ee3\u5176\u5b9e\u5dee\u4e0d\u591a\uff0c\u53ea\u662f\u5f53\u6211\u4eec\u4f7f\u7528\u9012\u5f52\u65f6\uff0c\u6211\u4eec\u9700\u8981\u989d\u5916\u8003\u8651\u6808\u662f\u5426\u4f1a\u6ea2\u51fa\u3002</p> <p>\u2003\u2003\u6211\u4eec\u90fd\u77e5\u9053\u5bf9\u4e8e\u4e00\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u4e00\u5b9a\u662f\u6709\u5e8f\u7684\uff0c\u800c\u8fd9\u6b63\u662f\u6211\u4eec\u7684\u9012\u5f52\u6761\u4ef6:</p> <pre><code>if(start == end){\nreturn {arr[start]};\n}\n</code></pre> <p>\u2003\u2003\u4e3a\u4e86\u964d\u4f4e\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u9009\u62e9\u5728\u539f\u6570\u7ec4\u4e0a\u8fdb\u884c\u5212\u5206\u4e0e\u6392\u5e8f\uff0c\u4f7f\u5f97\u51fd\u6570\u4e0d\u8fd4\u56de\u4efb\u4f55\u6570\u7ec4\u3002\u56e0\u6b64\uff0c\u9012\u5f52\u6761\u4ef6\u53ef\u6539\u4e3a\uff1a</p> <pre><code>if(start &gt;= end){\nreturn;\n}\n</code></pre> <p>\u2003\u2003\u90a3\u4e48\u5728\u4e0d\u76f8\u7b49\u65f6\uff0c\u4e5f\u5c31\u662f\u5355\u5c42\u9012\u5f52\u7684\u903b\u8f91\u8bbe\u8ba1\uff0c\u5c31\u662f\u4ece\u4e2d\u95f4\u4e00\u5206\u4e3a\u4e8c\uff0c\u5bf9\u4e24\u8fb9\u5b50\u5e8f\u5217\u8fdb\u884c\u5212\u5206\u5e76\u6392\u5e8f\uff1a</p> <pre><code>// int mid = (start + end) / 2; \n// \u4e0a\u8ff0\u8868\u8fbe\u5f0f\u53ef\u80fd\u4f1a\u53d1\u751f\u7cbe\u5ea6\u635f\u5931\uff0c\u5373\u4e24\u6570\u76f8\u52a0\u8d85\u8fc7int\u8303\u56f4\uff0c\u56e0\u6b64\u4f7f\u7528\u4e0b\u5f0f\u8f83\u7a33\u59a5\nint mid = start + (end - start) / 2;\nmergeSort(arr,start,mid);\nmergeSort(arr,mid+1,end);\n</code></pre> <p>\u2003\u2003\u4e4b\u540e\uff0c\u6211\u4eec\u5c06\u5212\u5206\u540e\u7684\u5e8f\u5217\u8fdb\u884c\u4e00\u4e2a\u5408\u5e76</p> <pre><code>merge(arr,left,mid,right);\n</code></pre> <p>\u2003\u2003\u8fd9\u4e2a\u5408\u5e76\u64cd\u4f5c\u6211\u4eec\u53ef\u4ee5\u7528\u5355\u72ec\u7684\u51fd\u6570\u5b9e\u73b0\uff1a</p> <pre><code>void merge(int arr[],int left,int mid,int right){\nint i,j,k;\nint len1 = mid - left + 1;\nint len2 = right - mid;\n// \u4e24\u4e2a\u5b50\u5e8f\u5217\u7684\u4e34\u65f6\u6570\u7ec4\nint LL[len1],RL[len2];\nfor(i=0;i&lt;len1;i++){\nLL[i] = arr[left+i];\n}\nfor(j=0;j&lt;len2;j++){\nRL[j] = arr[mid + 1 + j];\n}\ni = j = 0;\nk = left;\n// \u5c06\u76f8\u5bf9\u8f83\u5c0f\u7684\u5143\u7d20\u8fdb\u884c\"\u5408\u5e76\"\nwhile(i &lt; len1 &amp;&amp; j &lt; len2){\nif(LL[i] &lt;= RL[j]){\narr[k] = LL[i];\ni++;\n}else{\narr[k] = RL[j];\nj++;\n}\nk++;\n}\n// \u5c06\u5269\u4e0b\u7684\u5143\u7d20\u8fdb\u884c\"\u5408\u5e76\"\nwhile(i &lt; len1){\narr[k++] = LL[i++];\n}\nwhile(j &lt; len2){\narr[k++] = RL[j++];\n}\n}\n</code></pre> <p>\u5b8c\u6574\u4ee3\u7801</p> <pre><code>// \u5408\u5e76\nvoid merge(int arr[],int left,int mid,int right){\nint i,j,k;\nint len1 = mid - left + 1;\nint len2 = right - mid;\n// \u4e24\u4e2a\u5b50\u5e8f\u5217\u7684\u4e34\u65f6\u6570\u7ec4\nint LL[len1],RL[len2];\nfor(i=0;i&lt;len1;i++){\nLL[i] = arr[left+i];\n}\nfor(j=0;j&lt;len2;j++){\nRL[j] = arr[mid + 1 + j];\n}\ni = j = 0;\nk = left;\n// \u5c06\u76f8\u5bf9\u8f83\u5c0f\u7684\u5143\u7d20\u8fdb\u884c\"\u5408\u5e76\"\nwhile(i &lt; len1 &amp;&amp; j &lt; len2){\nif(LL[i] &lt;= RL[j]){\narr[k] = LL[i];\ni++;\n}else{\narr[k] = RL[j];\nj++;\n}\nk++;\n}\n// \u5c06\u5269\u4e0b\u7684\u5143\u7d20\u8fdb\u884c\"\u5408\u5e76\"\nwhile(i &lt; len1){\narr[k++] = LL[i++];\n}\nwhile(j &lt; len2){\narr[k++] = RL[j++];\n}\n}\n// \u5212\u5206\uff08\u5206\u6cbb\uff09\nvoid toMergeSort(int arr[],int left,int right){\nif(left &lt; right){\nint mid = left + (right - left) / 2;\ntoMergeSort(arr,left,mid);\ntoMergeSort(arr,mid+1,right);\nmerge(arr,left,mid,right);\n}\n}\nvoid mergeSort(int arr[],int len){\ntoMergeSort(arr,0,len-1);\n}\n</code></pre>"},{"location":"sortAlgorithm/mergeSort/#_3","title":"\u4e60\u9898","text":""},{"location":"sortAlgorithm/mergeSort/#_4","title":"\u4e60\u9898\u4e00","text":"<p>\u2003\u2003\u7ed9\u5b9a\u4e24\u4e2a\u6392\u5e8f\u540e\u7684\u6570\u7ec4 \\(A\\) \u548c \\(B\\)\uff0c\u5176\u4e2d \\(A\\) \u7684\u672b\u7aef\u6709\u8db3\u591f\u7684\u7f13\u51b2\u7a7a\u95f4\u5bb9\u7eb3 \\(B\\)\u3002 \u7f16\u5199\u4e00\u4e2a\u65b9\u6cd5\uff0c\u5c06 \\(B\\) \u5408\u5e76\u5165 \\(A\\) \u5e76\u6392\u5e8f\u3002\u521d\u59cb\u5316\u00a0\\(A\\) \u548c \\(B\\) \u7684\u5143\u7d20\u6570\u91cf\u5206\u522b\u4e3a\u00a0\\(m\\) \u548c \\(n\\)\u3002</p> <p>\u601d\u8def</p> <p>\u2003\u2003\u672c\u9898\u57fa\u672c\u4e0e\u5f52\u5e76\u6392\u5e8f\u4e2d\u7684\u5f52\u5e76\u51fd\u6570(merge)\u4e00\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06B\u5148\u76f4\u63a5\u8d4b\u503c\u5230A\u540e\uff0c\u518d\u4ee5m\u4e3a\u4e2d\u5fc3\uff0c\u8fdb\u884c\u5f52\u5e76\u3002\uff08\u8d4b\u503c\u540e\u76f4\u63a5\u6392\u5e8f\u4e5f\u662f\u6ca1\u6709\u95ee\u9898\u7684\uff0c\u4f46\u8fd9\u91cc\u4ee5\u5f52\u5e76\u4e3a\u4e3b\uff09</p> <p>\u4ee3\u7801</p> <pre><code>class Solution {\npublic:\nvoid merge(vector&lt;int&gt;&amp; A, int m, vector&lt;int&gt;&amp; B, int n) {\n// \u4e34\u65f6\u6570\u7ec4\nvector&lt;int&gt; arr1(A.begin(),A.begin()+m);\nvector&lt;int&gt; arr2(B.begin(),B.end());\n// \u5408\u5e76\nint i=0,j=0,k=0;\nwhile(i &lt; m &amp;&amp; j &lt; n){\nif(arr1[i] &lt; arr2[j]){\nA[k] = arr1[i];\ni++;\n}else{\nA[k] = arr2[j];\nj++;\n}\nk++;\n}\n// \u5c06\u5269\u4f59\u5143\u7d20\u5408\u5e76\nwhile(i &lt; m){\nA[k++] = arr1[i++];\n}\nwhile(j &lt; n){\nA[k++] = arr2[j++];\n}\n}\n};\n</code></pre>"},{"location":"sortAlgorithm/mergeSort/#_5","title":"\u4e60\u9898\u4e8c","text":"<p>\u2003\u2003\u5728\u6570\u7ec4\u4e2d\u7684\u4e24\u4e2a\u6570\u5b57\uff0c\u5982\u679c\u524d\u9762\u4e00\u4e2a\u6570\u5b57\u5927\u4e8e\u540e\u9762\u7684\u6570\u5b57\uff0c\u5219\u8fd9\u4e24\u4e2a\u6570\u5b57\u7ec4\u6210\u4e00\u4e2a\u9006\u5e8f\u5bf9\u3002\u8f93\u5165\u4e00\u4e2a\u6570\u7ec4\uff0c\u6c42\u51fa\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9\u7684\u603b\u6570\u3002</p> <p>\u601d\u8def</p> <p>\u2003\u2003\u5728\u5f52\u5e76\u6392\u5e8f\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9\u6570\u91cf\u7edf\u8ba1\u51fa\u6765\u3002\u5728\u5408\u5e76\u4e24\u4e2a\u9012\u589e\u7684\u6709\u5e8f\u6570\u7ec4\u65f6\uff0c\u5982\u679c\u53f3\u8fb9\u7684\u6570\u5b57\u6bd4\u5de6\u8fb9\u7684\u6570\u5b57\u5c0f\uff0c\u5219\u8bf4\u660e\u5de6\u8fb9\u6570\u7ec4\u4e2d\u5c1a\u672a\u5408\u5e76\u7684\u6570\u5b57\u4e0e\u53f3\u8fb9\u6570\u7ec4\u7684\u8fd9\u4e2a\u6570\u5b57\u53ef\u4ee5\u7ec4\u6210\u9006\u5e8f\u5bf9\u3002\u53cd\u4e4b\uff0c\u9006\u5e8f\u5bf9\u6570\u91cf\u4e0d\u589e\u52a0\u3002</p> <p>\u4ee3\u7801</p> <pre><code>class Solution {\npublic:\nint ans = 0;\nint reversePairs(vector&lt;int&gt;&amp; nums) {\nint len = nums.size();\nif(len &lt; 2){\nreturn 0;\n}\n// \u6b64\u5904\u4f7f\u7528\u548cnums\u76f8\u540c\u5927\u5c0f\u7684\u4e34\u65f6\u6570\u7ec4\u5b58\u50a8\u5f52\u5e76\u540e\u7684\u7ed3\u679c\uff0c\u4f9b\u4e0b\u4e00\u6b21\u5f52\u5e76\u4f7f\u7528\n// \u907f\u514d\u6bcf\u6b21\u5408\u5e76\u9636\u6bb5\u90fd\u9700\u8981\u5f00\u8f9f\u65b0\u7684\u7a7a\u95f4\nvector&lt;int&gt; temp(len);\nmergeSort(nums,0,nums.size()-1,temp);\nreturn ans;\n}\nvoid mergeSort(vector&lt;int&gt;&amp; nums,int left,int right,vector&lt;int&gt;&amp;temp){\nif(left &lt; right){\nint mid = left + (right - left) / 2;\nmergeSort(nums,left,mid,temp);\nmergeSort(nums,mid+1,right,temp);\nmerge(nums,left,mid,right,temp);\n}\n}\nvoid merge(vector&lt;int&gt;&amp; nums,int left,int mid,int right,vector&lt;int&gt;&amp; temp){\nint start1 = left,start2 = mid + 1,index = 0;\nwhile(start1 &lt;= mid &amp;&amp; start2 &lt;= right){\nif(nums[start1] &lt;= nums[start2]){\ntemp[index++] = nums[start1++];\n}else{\n// \u7edf\u8ba1\u9006\u5e8f\u5bf9\nans += mid-start1 + 1;\ntemp[index++] = nums[start2++];\n}\n}\nwhile(start1 &lt;= mid) temp[index++] = nums[start1++];\nwhile(start2 &lt;= right) temp[index++] = nums[start2++];\nfor(int i=left,k=0;i&lt;=right;i++,k++){\nnums[i] = temp[k];\n}\n}\n};\n</code></pre>"},{"location":"sortAlgorithm/quickSort/","title":"\u5feb\u901f\u6392\u5e8f(Quick Sort)","text":"<p>\u2003\u2003\u5feb\u901f\u6392\u5e8f\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(nlogn)\\)\u3002\u4f46\u5b83\u5728\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(nlogn)\\)\u7ea7\u7684\u51e0\u79cd\u5feb\u901f\u6392\u5e8f\u7b97\u6cd5\u4e2d\uff0c\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u6548\u7387\u66f4\u9ad8\uff0c\u6240\u4ee5\u5feb\u901f\u6392\u5e8f\u7684\u5e94\u7528\u975e\u5e38\u5e7f\u6cdb\u3002</p>"},{"location":"sortAlgorithm/quickSort/#_1","title":"\u539f\u7406","text":"<p>\u2003\u2003\u5feb\u901f\u6392\u5e8f\u7684\u57fa\u672c\u601d\u60f3\u662f\uff08\u5347\u5e8f\u4e3a\u4f8b\uff09\uff1a</p> <ul> <li>\u4ece\u6570\u7ec4\u4e2d\u53d6\u51fa\u4e00\u4e2a\u6570\uff0c\u79f0\u4e3a\u57fa\u6570\uff08pivot\uff09</li> <li>\u904d\u5386\u6570\u7ec4\uff0c\u5c06\u6bd4\u57fa\u6570\u5927\u7684\u6570\u5b57\u653e\u5230\u5b83\u7684\u53f3\u8fb9\uff0c\u6bd4\u57fa\u6570\u5c0f\u7684\u6570\u5b57\u653e\u5728\u5b83\u7684\u5de6\u8fb9\u3002\u904d\u5386\u5b8c\u6210\u540e\uff0c\u6570\u7ec4\u4f1a\u88ab\u5206\u4e3a\u5de6\u53f3\u4e24\u4e2a\u5b50\u6570\u7ec4\u3002</li> <li>\u4ee5\u57fa\u6570\u4e3a\u4e2d\u5fc3\uff0c\u5bf9\u5176\u5de6\u53f3\u4e24\u4e2a\u6570\u7ec4\u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\uff0c\u76f4\u81f3\u6392\u5e8f\u5b8c\u6210\u3002</li> </ul> <p>\u2003\u2003\u52a8\u753b\u6f14\u793a: </p> <p>\u5728\u52a8\u753b\u4e2d\uff0c\u9ed1\u8272\u6807\u8bb0\u7684\u5143\u7d20\u5c31\u662f\u57fa\u6570\uff0c\u4e00\u822c\u6211\u4eec\u4f1a\u4ece\u6570\u7ec4\u7684\u5de6\u53f3\u4e24\u8fb9\u4e00\u8d77\u904d\u5386\u5373\u53cc\u6307\u9488\u6cd5\uff0c\u5de6\u6307\u9488\u6307\u5411\u9047\u5230\u7684\u5927\u4e8e\u57fa\u6570\u7684\u503c\uff0c\u53f3\u6307\u9488\u6307\u5411\u9047\u5230\u7684\u5c0f\u4e8e\u57fa\u6570\u7684\u503c\uff0c\u7136\u540e\u5de6\u53f3\u6307\u9488\u7684\u503c\u8fdb\u884c\u4ea4\u6362\u5373\u53ef\u3002</p>"},{"location":"sortAlgorithm/quickSort/#_2","title":"\u5b9e\u73b0","text":"<p>\u2003\u2003\u4f9d\u636e\u5feb\u6392\u601d\u60f3\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u8981\u60f3\u5b9e\u73b0\u5feb\u901f\u6392\u5e8f\uff0c\u9700\u8981\u6709\u4e00\u4e2a\u5212\u5206\u51fd\u6570\\(partition(arr,start,end)\\)\u3002\u8be5\u51fd\u6570\u7684\u529f\u80fd\u5c31\u662f\u5c06\u6570\u7ec4\\(arr\\)\u7684\\(start\\)\u5143\u7d20\u5230\\(end\\)\u7684\u5143\u7d20\u5212\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u540c\u65f6\u8fd4\u56de\u4e00\u4e2a\u57fa\u51c6\u4f4d\u7f6e\u3002\u4ee5\u8be5\u4f4d\u7f6e\u4e3a\u4e2d\u5fc3\uff0c\u5de6\u8fb9\u7684\u5b50\u6570\u7ec4\u5e94\u8be5\u90fd\u5c0f\u4e8e\u8be5\u57fa\u51c6\u6570\uff0c\u53f3\u8fb9\u7684\u5b50\u6570\u7ec4\uff0c\u5e94\u8be5\u90fd\u5927\u4e8e\u8be5\u57fa\u51c6\u6570\u3002\u4e4b\u540e\uff0c\u5728\u5bf9\u5de6\u53f3\u4e24\u5b50\u6570\u7ec4\u8fdb\u884c\u8fdb\u884c\u5212\u5206\u3002\u6574\u4e2a\u6d41\u7a0b\u5c31\u662f\u5feb\u901f\u6392\u5e8f\u3002</p> <p>\u2003\u2003\u9996\u5148\u5b9e\u73b0\u5212\u5206\u51fd\u6570\\(partition\\):</p> <pre><code>int partition(int arr[],int start,int end){\n// \u9009\u7b2c\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u57fa\u51c6\nint pivot = arr[start];\n// \u4ece\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5f00\u59cb\u904d\u5386\nint left = start+1;\nint right = end;\nwhile(left &lt; right){\n// \u4ece\u5de6\u8fb9\u627e\u5230\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u503c\nwhile(left &lt; right &amp;&amp; arr[left] &lt; pivot) left++;\n// \u4ece\u53f3\u8fb9\u627e\u5230\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u503c\nwhile(left &lt; right &amp;&amp; arr[right] &gt; pivot) right--;\nif(left &lt; right){\n// \u4ea4\u6362\u4e24\u6570\nswap(arr[left],arr[right]);\nleft++;\nright--;\n}\n}\n// \u5982\u679c\u51fa\u73b0left == right\u5e76\u4e14arr[left] &gt; pivot\u7684\u60c5\u51b5\uff0c\u8ba9right\u81ea\u51cf\nif(left == right &amp;&amp; arr[left] &gt; pivot) right--;\n// \u4ea4\u6362\u57fa\u6570\u4e0e\u4e2d\u5fc3\u8f74\nswap(arr[start],arr[right]);\n// \u8fd4\u56de\u57fa\u51c6\nreturn right;\n}\n</code></pre> <p>\u2003\u2003\u5feb\u901f\u6392\u5e8f\u5c31\u662f\u8c03\u7528\u5212\u5206\u51fd\u6570\uff0c\u6392\u7684\u662f\u57fa\u51c6\u6570\uff0c\u518d\u5bf9\u57fa\u51c6\u6570\u5de6\u53f3\u4e24\u8fb9\u6570\u7ec4\u8c03\u7528\u5212\u5206\u51fd\u6570\uff0c\u6392\u57fa\u51c6\u6570\u3002</p> <pre><code>// \u5feb\u901f\u6392\u5e8f\nvoid quickSort(int arr[],int start,int end){\nif(start &lt; end){\nint pivotIndex = partition(arr,start,end);\n// \u5bf9\u5de6\u53f3\u5b50\u6570\u7ec4\u6267\u884c\u5feb\u6392\nquickSort(arr,start,pivotIndex-1);\nquickSort(arr,pivotIndex+1,end);\n}\n}\n</code></pre> <p>\u2003\u2003\u53ef\u4ee5\u975e\u5e38\u6e05\u695a\uff0c\u7b2c\u4e00\u6b21\u904d\u5386\uff0c\u53ef\u4ee5\u6392\u597d1\u4e2a\u57fa\u51c6\u6570\uff0c\u7b2c\u4e8c\u6b21\u904d\u5386\uff0c\u53ef\u4ee5\u63922\u4e2a\u57fa\u51c6\u6570\uff0c\u7b2c\u4e09\u6b21\u904d\u5386\uff0c\u53ef\u4ee5\u63924\u4e2a\u57fa\u51c6\u6570\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u603b\u904d\u5386\u6b21\u6570\u5c31\u4e3a\\(logn\\) ~ \\(n\\),\u6bcf\u6b21\u904d\u5386\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(n)\\)\u3002\u4ee5\u6b64\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u786e\u5b9a\u4e3a\uff1a\\(O(nlogn)\\) ~ \\(O(n^2)\\)\u3002</p> <p>\u5b8c\u6574\u4ee3\u7801</p> <pre><code>int partition(int arr[],int start,int end){\n// \u9009\u7b2c\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u57fa\u51c6\nint pivot = arr[start];\n// \u4ece\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5f00\u59cb\u904d\u5386\nint left = start+1;\nint right = end;\nwhile(left &lt; right){\n// \u4ece\u5de6\u8fb9\u627e\u5230\u5927\u4e8e\u57fa\u51c6\u6570\u7684\u503c\nwhile(left &lt; right &amp;&amp; arr[left] &lt; pivot) left++;\n// \u4ece\u53f3\u8fb9\u627e\u5230\u5c0f\u4e8e\u57fa\u51c6\u6570\u7684\u503c\nwhile(left &lt; right &amp;&amp; arr[right] &gt; pivot) right--;\nif(left &lt; right){\n// \u4ea4\u6362\u4e24\u6570\nswap(arr[left],arr[right]);\nleft++;\nright--;\n}\n}\n// \u5982\u679c\u51fa\u73b0left == right\u5e76\u4e14arr[left] &gt; pivot\u7684\u60c5\u51b5\uff0c\u8ba9right\u81ea\u51cf\nif(left == right &amp;&amp; arr[left] &gt; pivot) right--;\n// \u4ea4\u6362\u57fa\u6570\u4e0e\u4e2d\u5fc3\u8f74\nswap(arr[start],arr[right]);\n// \u8fd4\u56de\u57fa\u51c6\nreturn right;\n}\n// \u5feb\u901f\u6392\u5e8f\nvoid quickSort(int arr[],int start,int end){\nif(start &lt; end){\nint pivotIndex = partition(arr,start,end);\n// \u5bf9\u5de6\u53f3\u5b50\u6570\u7ec4\u6267\u884c\u5feb\u6392\nquickSort(arr,start,pivotIndex-1);\nquickSort(arr,pivotIndex+1,end);\n}\n}\n</code></pre>"},{"location":"sortAlgorithm/selectionSort/","title":"\u9009\u62e9\u6392\u5e8f\uff08Selection Sort\uff09","text":"<p>\u2003\u2003\u9009\u62e9\u6392\u5e8f\u662f\u4e00\u79cd\u7b80\u5355\u800c\u9ad8\u6548\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u65e0\u8bba\u4ec0\u4e48\u6837\u7684\u6570\u636e\u4f7f\u7528\u9009\u62e9\u6392\u5e8f\uff0c\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f\\(O(n^2)\\)\u3002\u6240\u4ee5\u4f7f\u7528\u9009\u62e9\u6392\u5e8f\uff0c\u5176\u6570\u636e\u89c4\u6a21\u5e94\u5f53\u8d8a\u5c0f\u8d8a\u597d\u3002</p>"},{"location":"sortAlgorithm/selectionSort/#_1","title":"\u539f\u7406","text":"<p>\u2003\u2003\u9009\u62e9\u6392\u5e8f\u901a\u8fc7\u5217\u8868\u7684\u672a\u6392\u5e8f\u90e8\u5206\u4e2d\u91cd\u590d\u9009\u62e9\u6700\u5927/\u6700\u5c0f\u5143\u7d20\u5e76\u5c06\u5176\u79fb\u52a8\u5230\u5217\u8868\u7684\u5df2\u6392\u5e8f\u90e8\u5206\u3002\u8be5\u7b97\u6cd5\u4e0d\u65ad\u4ece\u672a\u6392\u5e8f\u5e8f\u5217\u4e2d\u9009\u62e9\u6700\u5927/\u6700\u5c0f\u5143\u7d20\uff0c\u5e76\u5c06\u5176\u4e0e\u672a\u6392\u5e8f\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u6216\u5df2\u6392\u5e8f\u5e8f\u5217\u540e\u4e00\u4e2a\u5143\u7d20\u8fdb\u884c\u4ea4\u6362\u3002\u5bf9\u6574\u4e2a\u5217\u8868\u4e0d\u65ad\u6267\u884c\u8be5\u8fc7\u7a0b\uff0c\u6700\u7ec8\u5f97\u5230\u4e00\u4e2a\u6709\u5e8f\u5e8f\u5217\u3002\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ul> <li>\u9996\u5148\u5728\u672a\u6392\u5e8f\u5e8f\u5217\u4e2d\u627e\u5230\u6700\u5c0f/\u6700\u5927\u5143\u7d20\uff0c\u5b58\u653e\u5230\u6392\u5e8f\u5e8f\u5217\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002\u5f00\u59cb\u65f6\uff0c\u672a\u6392\u5e8f\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u4e3a0(\u5e8f\u5217\u4e0b\u6807\u4ece0\u5f00\u59cb)\uff0c\u6216\u5df2\u6392\u5e8f\u5e8f\u5217\u4e4b\u540e\u7684\u4f4d\u7f6e(\u5f00\u59cb\u65f6\u6ca1\u6709\u4efb\u4f55\u5143\u7d20\u662f\u5df2\u6392\u72b6\u6001\uff0c\u6574\u4e2a\u5e8f\u5217\u90fd\u662f\u5f85\u6392\u72b6\u6001)\u3002</li> <li>\u518d\u4ece\u5269\u4f59\u672a\u6392\u5e8f\u5143\u7d20\u4e2d\u627e\u5230\u6700\u5c0f/\u6700\u5927\u5143\u7d20\uff0c\u653e\u5230\u5df2\u6392\u5e8f\u5217\u7684\u672b\u5c3e\u3002</li> <li>\u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u76f4\u81f3\u5f85\u6392\u5e8f\u5217\u4e3a\u7a7a\u3002</li> </ul> <p></p> <p>\u4e0a\u8ff0\u52a8\u753b\u4e2d\uff0c\u9ec4\u8272\u90e8\u5206\u662f\u5df2\u6392\u5e8f\u5217\uff0c\u851a\u84dd\u8272\u662f\u5f85\u6392\u5e8f\u5217\uff0c\u7ea2\u8272\u662f\u5f85\u6392\u5e8f\u5217\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u7eff\u8272\u79fb\u52a8\u8fc7\u7a0b\u5c31\u662f\u5728\u67e5\u627e\u6700\u503c\u7684\u8fc7\u7a0b\u3002</p>"},{"location":"sortAlgorithm/selectionSort/#_2","title":"\u5b9e\u73b0","text":""},{"location":"sortAlgorithm/selectionSort/#_3","title":"\u4ee3\u7801\u4e00","text":"<p>\u2003\u2003\u9009\u62e9\u6392\u5e8f\u4e5f\u662f\u53ef\u4ee5\u4f18\u5316\u7684\uff0c\u6b64\u5904\u5148\u4ecb\u7ecd\u672a\u4f18\u5316\u7684\u4ee3\u7801\uff1a</p> <pre><code>void selectionSortWay1(int arr[],int len){\n// \u8bb0\u5f55\u5f85\u6392\u5e8f\u5217\u7684\u6700\u5c0f\u5143\u7d20\u7684\u4e0b\u6807\nint minIndex;\nfor(int i=0;i&lt;len;i++){\nminIndex = i;\nfor(int j=i;j&lt;len;j++){\n// \u82e5\u53d1\u73b0\u66f4\u5c0f\u5143\u7d20\uff0c\u66f4\u65b0\u4e0b\u6807\nif(arr[j] &lt; arr[minIndex]){\nminIndex = j;\n}\n}\n// \u5c06\u6700\u5c0f\u5143\u7d20\u63d2\u5165\u5230\u5f85\u6392\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\nint t = arr[minIndex];\narr[minIndex] = arr[i];\narr[i] = t;\n}\n}\n</code></pre> <p>\u4e0a\u8ff0\u4ee3\u7801\u7684\u5916\u5c42\\(for\\)\u5faa\u73af\u5176\u5b9e\u63a7\u5236\u7684\u5c31\u662f\u5f85\u6392\u5e8f\u5217\u7684\u8303\u56f4\\([i,len-1]\\);\u56e0\u6b64\uff0c\u5f85\u6392\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u5176\u5b9e\u5c31\u662f\\(i\\)\uff0c\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u6574\u4e2a\u5f85\u6392\u5e8f\u5217\u7684\u6700\u5c0f\u503c\u653e\u5230\u4f4d\u7f6e\\(i\\)\u4e0a\u5c31\u884c\u4e86\u3002</p>"},{"location":"sortAlgorithm/selectionSort/#_4","title":"\u4ee3\u7801\u4e8c","text":"<p>\u2003\u2003\u4ee3\u7801\u4e00\u5c55\u793a\u7684\u5c31\u662f\u4ece\u5f85\u6392\u5e8f\u5217\u4e2d\u627e\u5230\u6700\u5c0f\u503c\u5c06\u5176\u653e\u5230\u76f8\u5e94\u4f4d\u7f6e\u7684\u5b9e\u73b0\u903b\u8f91\u3002\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4e8c\u5143\u53d8\u91cf\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\uff0c\u8fd9\u4e24\u4e2a\u53d8\u91cf\u5206\u522b\u8bb0\u5f55\u5f85\u6392\u5e8f\u5217\u4e2d\u7684\u6700\u5927\u548c\u6700\u5c0f\u503c\u3002\u518d\u626b\u63cf\u5b8c\u6574\u4e2a\u5f85\u6392\u5e8f\u5217\u540e\uff0c\u6700\u5927\u503c\u653e\u5728\u53f3\u8fb9\uff0c\u6700\u5c0f\u503c\u653e\u5728\u5de6\u8fb9\u3002\u8fd9\u79cd\u4f18\u5316\u65b9\u6cd5\u4e5f\u79f0\u4e3a\u201c\u53cc\u5411\u9009\u62e9\u6392\u5e8f\u201d\u3002</p> <pre><code>void selectionSortWay2(int arr[],int len){\n// \u8bb0\u5f55\u6700\u5927\u6700\u5c0f\u7d22\u5f15\nint minIndex,maxIndex;\n// \u53cc\u5411\u9009\u62e9\nfor(int i=0;i&lt;len/2;i++){\nminIndex = i;\nmaxIndex = len-1-i;\nfor(int j = i;j&lt;len-i;j++){\nif(arr[j] &lt; arr[minIndex]){\nminIndex = j;\n}\nif(arr[j] &gt; arr[maxIndex]){\nmaxIndex = j;\n}\n}\n// \u5f53\u6700\u5927\u7d22\u5f15\u548c\u6700\u5c0f\u7d22\u5f15\u76f8\u7b49\u65f6\uff0c\u8bf4\u660e\u5e8f\u5217\u662f\u6709\u5e8f\u7684\u4e86\nif(maxIndex == minIndex) break;\n// \u5c06\u6700\u5c0f\u5143\u7d20\u63d2\u5165\u5230\u5f85\u6392\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\nint t = arr[i];\narr[i] = arr[minIndex];\narr[minIndex] = t;\n// \u5f53\u6700\u5927\u503c\u7684\u4e0b\u6807\u6070\u597d\u662fi\u65f6\uff0c\u7531\u4e8ei\u4f4d\u7f6e\u4e0a\u7684\u5df2\u8fdb\u884c\u4e86\u4ea4\u6362\uff0c\u56e0\u6b64\u539f\u6765i\u4e0a\u7684\u5143\u7d20\u662f\u5728\u4ea4\u6362\u540e\u7684minIndex\u4e0a\nif(maxIndex == i) maxIndex = minIndex;\nt = arr[len-1-i];\narr[len-1-i] = arr[maxIndex];\narr[maxIndex] = t;\n}\n}\n</code></pre> <p>\u2003\u2003\u7531\u4ee3\u7801\u53ef\u5206\u6790\u51fa\u9009\u62e9\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u5206\u522b\u4e3a:\\(O(n^2)\\)\u548c\\(O(1)\\)\u3002</p>"},{"location":"sortAlgorithm/selectionSort/#_5","title":"\u4e60\u9898","text":""},{"location":"sortAlgorithm/selectionSort/#_6","title":"\u4e60\u9898\u4e00","text":"<p>\u2003\u2003\u7ed9\u5b9a\u6574\u6570\u6570\u7ec4 \\(nums\\) \u548c\u6574\u6570 \\(k\\)\uff0c\u8bf7\u8fd4\u56de\u6570\u7ec4\u4e2d\u7b2c \\(k\\) \u4e2a\u6700\u5927\u7684\u5143\u7d20\u3002\u8bf7\u6ce8\u610f\uff0c\u4f60\u9700\u8981\u627e\u7684\u662f\u6570\u7ec4\u6392\u5e8f\u540e\u7684\u7b2c \\(k\\) \u4e2a\u6700\u5927\u7684\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u7b2c \\(k\\) \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>\u8f93\u5165: [3,2,1,5,6,4], k = 2\n\u8f93\u51fa: 5\n</code></pre> <p>\u601d\u8def</p> <p>\u2003\u2003\u7531\u9898\u610f\u53ef\u77e5\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u7528\u5bf9\u6574\u4e2a\u6570\u7ec4\u7684\u6240\u6709\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\uff0c\u53ea\u9700\u6392\\(k\\)\u4e2a\u6570\u5373\u53ef\u3002\u50cf\u8fd9\u79cd\u90e8\u5206\u6392\u5e8f\u7684\u573a\u666f\uff0c\u53ef\u4ee5\u4f7f\u7528\u9009\u62e9\u6392\u5e8f\u6216\u5806\u6392\u5e8f\u89e3\u51b3\u3002\u5728\u9009\u62e9\u6392\u5e8f\u4e2d\uff0c\u6211\u4eec\u6bcf\u6b21\u9009\u51fa\u6700\u5927\u503c\u653e\u5728\u5f85\u6392\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\u4e0a\u5373\u53ef\uff0c\u5373\u8fdb\u884c\u5012\u5e8f\u6392\u5e8f\u3002</p> <p>\u4ee3\u7801</p> <pre><code>class Solution {\npublic:\nint findKthLargest(vector&lt;int&gt;&amp; nums, int k) {\nint len = nums.size();\nint maxIndex;\n// \u53ea\u6392k\u4e2a\u5143\u7d20\nfor(int i=0;i&lt;k;i++){\nmaxIndex = i;\nfor(int j=i;j&lt;len;j++){\nif(nums[j] &gt; nums[maxIndex]){\nmaxIndex = j;\n}\n}\nint t = nums[i];\nnums[i] = nums[maxIndex];\nnums[maxIndex] = t;\n}\nreturn nums[k-1];\n}\n};\n</code></pre>"},{"location":"sortAlgorithm/shellSort/","title":"\u5e0c\u5c14\u6392\u5e8f(Shell Sort)","text":"<p>\u2003\u2003\u5e0c\u5c14\u6392\u5e8f\u662f\u5e0c\u5c14(Donald Shell)\u4e8e1959\u5e74\u63d0\u51fa\u7684\u4e00\u79cd\u6392\u5e8f\u7b97\u6cd5\u3002\u5e0c\u5c14\u6392\u5e8f\u4e5f\u662f\u4e00\u79cd\u63d2\u5165\u6392\u5e8f\uff0c\u5b83\u662f\u7b80\u5355\u63d2\u5165\u6392\u5e8f\u7ecf\u8fc7\u6539\u8fdb\u4e4b\u540e\u7684\u4e00\u4e2a\u66f4\u9ad8\u6548\u7684\u7248\u672c\uff0c\u4e5f\u79f0\u4e3a\u7f29\u5c0f\u589e\u91cf\u6392\u5e8f\uff0c\u540c\u65f6\u8be5\u7b97\u6cd5\u662f\u51b2\u7834\\(O(n^2)\\)\u7684\u7b2c\u4e00\u6279\u7b97\u6cd5\u4e4b\u4e00\u3002</p>"},{"location":"sortAlgorithm/shellSort/#_1","title":"\u539f\u7406","text":"<p> \u5e0c\u5c14\u6392\u5e8f\u662f\u628a\u8bb0\u5f55\u6309\u4e0b\u6807\u7684\u4e00\u5b9a\u589e\u91cf\u5206\u7ec4\uff0c\u5bf9\u6bcf\u7ec4\u4f7f\u7528\u76f4\u63a5\u63d2\u5165\u6392\u5e8f\u7b97\u6cd5\u6392\u5e8f\uff1b\u968f\u7740\u589e\u91cf\u9010\u6e10\u51cf\u5c11\uff0c\u6bcf\u7ec4\u5305\u542b\u7684\u5173\u952e\u8bcd\u8d8a\u6765\u8d8a\u591a\uff0c\u5f53\u589e\u91cf\u51cf\u81f31\u65f6\uff0c\u6574\u4e2a\u6587\u4ef6\u6070\u88ab\u5206\u6210\u4e00\u7ec4\uff0c\u7b97\u6cd5\u4fbf\u7ec8\u6b62\u3002</p> <p>\u7b97\u6cd5\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ul> <li>\u5c06\u5f85\u6392\u5e8f\u5e8f\u5217\u5212\u5206\u4e3a\u82e5\u5e72\u5b50\u5e8f\u5217(\u6bcf\u4e2a\u5b50\u5e8f\u5217\u7684\u5143\u7d20\u5728\u539f\u59cb\u6570\u7ec4\u4e2d\u95f4\u8ddd\u76f8\u540c)\uff1b</li> <li>\u5bf9\u8fd9\u4e9b\u5b50\u5e8f\u5217\u8fdb\u884c\u63d2\u5165\u6392\u5e8f\uff1b</li> <li>\u51cf\u5c0f\u6bcf\u4e2a\u5b50\u5e8f\u5217\u4e2d\u5143\u7d20\u4e4b\u95f4\u7684\u95f4\u8ddd\uff0c\u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\u76f4\u81f3\u95f4\u8ddd\u51cf\u5c11\u4e3a1\uff1b</li> </ul> <p>\u4ece\u6b65\u9aa4\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u5e0c\u5c14\u6392\u5e8f\u4e3b\u8981\u662f\u4f9d\u636e\u7ecf\u5178\u63d2\u5165\u6392\u5e8f\u7684\u4ee5\u4e0b\u4e24\u70b9\u8fdb\u884c\u6539\u8fdb\uff1a</p> <ul> <li>\u63d2\u5165\u6392\u5e8f\u5728\u5bf9\u51e0\u4e4e\u5df2\u7ecf\u6392\u597d\u5e8f\u7684\u6570\u636e\u64cd\u4f5c\u65f6\uff0c\u6548\u7387\u9ad8\uff0c\u5373\u53ef\u4ee5\u8fbe\u5230\u7ebf\u6027\u6392\u5e8f\u7684\u6548\u7387\u3002</li> <li>\u63d2\u5165\u6392\u5e8f\u4e00\u822c\u6765\u8bf4\u662f\u4f4e\u6548\u7684\uff0c\u56e0\u4e3a\u63d2\u5165\u6392\u5e8f\u6bcf\u6b21\u53ea\u80fd\u5c06\u6570\u636e\u79fb\u52a8\u4e00\u4f4d\uff1b</li> </ul> <p>\u52a8\u56fe\u6f14\u793a\uff1a</p> <p></p> <p>\u2003\u2003\u6f14\u793a\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u540c\u989c\u8272\u6807\u6ce8\u51fa\u6765\u7684\u5143\u7d20\u5404\u81ea\u7ec4\u6210\u4e86\u4e0d\u540c\u7684\u5b50\u5e8f\u5217\uff0c\u8fd9\u4e9b\u5b50\u5e8f\u5217\u5c31\u662f\u4f9d\u636e\u589e\u91cf\u8fdb\u884c\u5212\u5206\u3002\u5f00\u59cb\u65f6\u589e\u91cf\u5f88\u5927\uff0c\u5e0c\u5c14\u6392\u5e8f\u5bf9\u5b50\u5e8f\u5217\u8fdb\u884c\u63d2\u5165\u6392\u5e8f\uff0c\u4f7f\u5f97\u6574\u4e2a\u5e8f\u5217\u5728\"\u5b8f\u89c2\"\u4e0a\u662f\u6709\u5e8f\u7684\uff0c\u4e4b\u540e\u968f\u7740\u589e\u91cf\u4e0d\u65ad\u51cf\u5c11\uff0c\u4f7f\u5f97\u6574\u4e2a\u5e8f\u5217\u5728\"\u5fae\u89c2\"\u4e0a\u662f\u6709\u5e8f\u7684\uff0c\u4ece\u800c\u8fbe\u5230\u6574\u4f53\u6709\u5e8f\u3002\u4e4b\u524d\u8c08\u8bba\u8fc7\uff0c\u63d2\u5165\u6392\u5e8f\u5728\u5bf9\u51e0\u4e4e\u5df2\u7ecf\u6392\u597d\u5e8f\u7684\u6570\u636e\u8fdb\u884c\u64cd\u4f5c\u65f6\uff0c\u6548\u7387\u662f\u5f88\u9ad8\u7684\u3002\u56e0\u6b64\u8fd9\u79cd\u5b8f\u89c2\u4e0a\u6709\u5e8f\u5bf9\u63d2\u5165\u6392\u5e8f\u7684\u6548\u7387\u975e\u5e38\u6709\u5229\uff0c\u56e0\u6b64\uff0c\u5e0c\u5c14\u6392\u5e8f\u867d\u7136\u662f\u63d2\u5165\u6392\u5e8f\uff0c\u4f46\u5176\u6548\u7387\u5374\u8fdc\u6bd4\u666e\u901a\u7684\u63d2\u5165\u6392\u5e8f\u8981\u9ad8\u3002</p>"},{"location":"sortAlgorithm/shellSort/#_2","title":"\u5b9e\u73b0","text":"<pre><code>void shellSort(int arr[],int len){\n// step\u662f\u589e\u91cf\uff0c\u6bcf\u6b21\u6298\u534a\u51cf\u5c0f\nfor(int step = len / 2;step &gt; 0;step /= 2){\n// \u5bf9\u5b50\u5e8f\u5217\u6267\u884c\u63d2\u5165\u6392\u5e8f\nfor(int i=step;i&lt;len;i++){\nint t =arr[i];\nint index = i;\n// \u627e\u5230\u5408\u9002\u7684\u63d2\u5165\u4f4d\u7f6e\uff0c\u6570\u7ec4\u5c0f\u6807\u79fb\u52a8\u8981\u4ee5\u589e\u91cf\u4e3a\u5355\u4f4d\nwhile(index &gt;= step &amp;&amp; arr[index - step] &gt; t){\narr[index] = arr[index-step];\nindex -= step;\n}\narr[index] = t;\n}\n}\n}\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u4e0e\u7a7a\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff1a\u4e8b\u5b9e\u4e0a\uff0c\u5e0c\u5c14\u6392\u5e8f\u65f6\u95f4\u590d\u6742\u5ea6\u975e\u5e38\u96be\u4ee5\u5206\u6790\uff0c\u5b83\u7684\u5e73\u5747\u590d\u6742\u5ea6\u754c\u4e8e\\(O(n*logn)\\)~\\(O(n^{1.25})\\)\u4e4b\u95f4\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(1)\\)\u3002</p>"},{"location":"sortAlgorithm/shellSort/#_3","title":"\u4e60\u9898","text":"<p>\u5f85\u8865\u5145\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/","title":"-1","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_1","title":"\u67e5\u627e\u548c\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_2","title":"\u67e5\u627e\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_3","title":"\u7ebf\u6027\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_4","title":"\u987a\u5e8f\u67e5\u627e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_5","title":"\u7b97\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_6","title":"\u7b97\u6cd5\u5206\u6790","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_7","title":"\u5982\u4f55\u63d0\u9ad8\u67e5\u627e\u6548\u7387","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_8","title":"\u987a\u5e8f\u67e5\u627e\u7279\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#binary-search","title":"\u6298\u534a\u67e5\u627e(Binary Search)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#-","title":"\u7b97\u6cd5\u5206\u6790--\u5224\u65ad\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_9","title":"\u6298\u534a\u67e5\u627e\u7279\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#blocking-search","title":"\u5206\u5757\u67e5\u627e(Blocking Search)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_10","title":"\u7b97\u6cd5\u5206\u6790","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_11","title":"\u5206\u5757\u67e5\u627e\u7279\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_12","title":"\u7ebf\u6027\u8868\u67e5\u627e\u65b9\u6cd5\u6bd4\u8f83","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_13","title":"\u6811\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#binary-sort-tree","title":"\u4e8c\u53c9\u6392\u5e8f\u6811(Binary Sort Tree)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_14","title":"\u6570\u636e\u7c7b\u578b\u5b9a\u4e49","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_15","title":"\u590d\u4e60\uff1a\u9012\u5f52\u521b\u5efa\u4e8c\u53c9\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#bst","title":"BST\u67e5\u627e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#bst_1","title":"BST\u67e5\u627e\u7b97\u6cd5\u5206\u5206\u6790","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#bst_2","title":"BST\u63d2\u5165","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#bst_3","title":"\u521b\u5efaBST","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#bst_4","title":"BST\u5220\u9664","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#avlbalance-binary-tree","title":"AVL\u6811(Balance Binary Tree)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#ll","title":"LL\u578b\u65cb\u8f6c(\u53f3\u65cb\u8f6c)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#rr","title":"RR\u65cb\u8f6c(\u5de6\u65cb\u8f6c)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#lr","title":"LR\u65cb\u8f6c(\u5de6\u53f3\u65cb\u8f6c)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#rl","title":"RL\u65cb\u8f6c(\u53f3\u5de6\u65cb\u8f6c)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_16","title":"\u603b\u7ed3","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_17","title":"\u4ee3\u7801\u5b9e\u73b0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#llrr","title":"\u5de6\u65cb\u8f6c\u548c\u53f3\u65cb\u8f6c(\u53c2\u7167LL\uff0cRR\u65cb\u8f6c)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_18","title":"\u5de6\u5e73\u8861\u548c\u53f3\u5e73\u8861","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_19","title":"\u63d2\u5165\u8282\u70b9\u548c\u53ca\u65f6\u5e73\u8861","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_20","title":"\u6d4b\u8bd5\u4ee3\u7801","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#hash-table","title":"\u54c8\u5e0c\u8868(Hash Table)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#hash","title":"hash\u51fd\u6570\u7684\u6784\u9020\u65b9\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_21","title":"\u5904\u7406\u51b2\u7a81\u7684\u65b9\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#hash-table_1","title":"\u9664\u7559\u4f59\u6570\u6cd5\u6784\u9020Hash Table","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_22","title":"\u67e5\u627e\u6548\u7387\u5206\u6790","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_23","title":"\u51e0\u70b9\u7ed3\u8bba","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_24","title":"\u67e5\u627e\u603b\u7ed3","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_25","title":"\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_26","title":"\u76f4\u63a5\u63d2\u5165\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#binary-insert-sort","title":"\u6298\u534a\u63d2\u5165\u6392\u5e8f(Binary Insert Sort)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#shells-sort","title":"\u5e0c\u5c14\u6392\u5e8f(Shell's Sort)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_27","title":"\u4ea4\u6362\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_28","title":"\u5192\u6ce1\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_29","title":"\u5feb\u901f\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_30","title":"\u9009\u5219\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_31","title":"\u5806","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_32","title":"\u5806\u5b9a\u4e49","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#1","title":"\u5b9a\u74061:","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#2","title":"\u5b9a\u74062:","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_33","title":"\u521d\u59cb\u5316\u5806","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_34","title":"\u5806\u8c03\u6574","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_35","title":"\u5806\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_36","title":"\u5176\u4ed6\u7c7b\u578b\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#merge-sort","title":"\u5e76\u5f52\u6392\u5e8f Merge Sort","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_37","title":"\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u5e8f\u5217","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_38","title":"\u5206\u5272\u5e8f\u5217\u5e76\u8fdb\u884c\u5408\u5e76","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_39","title":"\u51fd\u6570\u5c01\u88c5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_40","title":"\u7b97\u6cd5\u6548\u7387","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_41","title":"\u57fa\u6570\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_42","title":"\u6570\u636e\u7c7b\u578b\u5b9a\u4e49","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_43","title":"\u5206\u914d\u51fd\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_44","title":"\u6536\u96c6\u51fd\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_45","title":"\u6392\u5e8f\u51fd\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_46","title":"\u521d\u59cb\u5316\u548c\u8f93\u51fa\u51fd\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_47","title":"\u7b97\u6cd5\u6548\u7387","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_48","title":"\u6392\u5e8f\u603b\u7ed3","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_49","title":"\u67e5\u627e\u548c\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_50","title":"\u67e5\u627e\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_51","title":"\u5173\u952e\u5b57","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_52","title":"\u4e3b\u5173\u952e\u5b57\uff1a\u53ef\u552f\u4e00\u6807\u8bc6\u4e00\u4e2a\u8bb0\u5f55\u7684\u5173\u952e\u5b57","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_53","title":"\u6b21\u5173\u952e\u5b57\uff1a\u7528\u4ee5\u8bc6\u522b\u82e5\u5e72\u8bb0\u5f55\u7684\u5173\u952e\u5b57","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_54","title":"\u67e5\u627e\u8868\u5206\u7c7b","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_55","title":"\u7ebf\u6027\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_56","title":"\u6811\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_57","title":"\u54c8\u5e0c\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_58","title":"\u52a8\u6001\u548c\u9759\u6001","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_59","title":"\u9759\u6001\uff1a\u4ec5\u4f5c\u67e5\u8be2\uff0c\u68c0\u7d22","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_60","title":"\u52a8\u6001\uff1a\u4f5c\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#aslaverage-search-length","title":"\u5e73\u5747\u67e5\u627e\u957f\u5ea6ASL(Average Search Length)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_61","title":"\u5173\u952e\u5b57\u7684\u5e73\u5747\u6bd4\u8f83\u6b21\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_62","title":"\u8bb0\u5f55\u7684\u4e2a\u6570\u8868\u957f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_63","title":"\u67e5\u627e\u7b2c\u4e2a\u5143\u7d20\u7684\u6982\u7387","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_64","title":"\u67e5\u627e\u5230\u7b2c\u4e2a\u5143\u7d20\u9700\u8981\u7684\u6bd4\u8f83\u6b21\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_65","title":"\u7ebf\u6027\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_66","title":"\u987a\u5e8f\u67e5\u627e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_67","title":"\u5e94\u7528\u8303\u56f4","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_68","title":"\u987a\u5e8f\u8868\u6216\u7ebf\u6027\u94fe\u8868\u7684\u9759\u6001\u67e5\u627e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_69","title":"\u8868\u5185\u5143\u7d20\u65e0\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_70","title":"\u7c7b\u578b\u5b9a\u4e49:","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_71","title":"\u7b97\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#base-0-0","title":"\u601d\u8def:\u628abase\u6570\u7ec4\u4e2d 0 \u53f7\u4f4d\u7f6e\u9884\u7559\u51fa\u6765\uff0c\u4ece\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u51fa\u53d1\uff0c\u4f9d\u6b64\u5411 0 \u53f7\u65b9\u5411\u6bd4\u8f83","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#i0-key-stbasei","title":"\u53ef\u53d1\u73b0\u6b64\u7b97\u6cd5\u4e2d\u4e00\u6b21\u5faa\u73af i&gt;0; \u548c key == ST.base[i] \u6bd4\u8f83\u4e86\u4e24\u6b21","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_72","title":"\u5176\u4ed6\u5f62\u5f0f\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#i0-stbaseikey-key","title":"i&gt;0 &amp;&amp; ST.base[i].key != key \u540c\u6837\u7684\u6bd4\u8f83\u4e86\u4e24\u6b21","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_73","title":"\u4f18\u5316\u7b97\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#0-guard","title":"\u4e3a\u6570\u7ec4\u4e2d 0 \u53f7\u4f4d\u7f6e\u6dfb\u52a0guard","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#stbaseikey-key","title":"\u53ef\u53d1\u73b0\u5faa\u73af\u4e2d ST.base[i].key!= key; \u53ea\u6bd4\u8f83\u4e00\u6b21","text":"<p><pre><code>typedef int KeyType;\ntypedef char *OtherInfo;\ntypedef struct {\nKeyType key;\nOtherInfo other; //\u50a8\u5b58\u5176\u4ed6\u4fe1\u606f\n} SSTElemType;\ntypedef struct {\nSSTElemType *base; //\u5b58\u653e\u6570\u7ec4\u7684\u9996\u5730\u5740(0\u53f7\u4f4d\u7f6e\u4e0d\u5b58\u653e\u5173\u952e\u5b57\uff0c\u9884\u7559\u7ed9guard)\nint length; //\u5f53\u524d\u8868\u957f(\u6570\u7ec4\u7684\u957f\u5ea6)\n} SSTable;\n</code></pre> <pre><code>int Search_SS(SSTable ST, KeyType key) {\nfor (int i=ST.length; i&gt; 0 ; i--){\nf (key == ST.base[i].key) return i;\n}\nreturn 0 ;\n}\n</code></pre> <pre><code>int Search_SS(SSTable ST, KeyType key) {\nint i;\nfor (i = ST.length; i&gt; 0 &amp;&amp; ST.base[i].key != key; i--); //\u6ce8\u610f;\n</code></pre> <pre><code>return i;\n}\n</code></pre> <pre><code>int Search_SS(SSTable ST, KeyType key) // Sequence Search\n{\nST.base[ 0 ].key = key; //\u9884\u7559 0 \u53f7\u4f4d\u7f6e\uff0c\u8bbe\u7f6eguard\nint i;\nfor (i = ST.length; ST.base[i].key != key; i--); //\u5206\u53f7\u4e0d\u53ef\u4ee5\u4e22\n</code></pre> <pre><code>return i;\n}\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_74","title":"\u7b97\u6cd5\u5206\u6790","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_75","title":"\u89c2\u5bdf\u6b64\u56fe\uff0c\u53d1\u73b0\u60f3\u67e5\u5230\u7b2c\u4e2a\u4f4d\u7f6e\uff0c\u9700\u8981 \u6b21\u6bd4\u8f83","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_76","title":"\u67e5\u627e\u5931\u8d25\u5219\u9700\u8981 \u6b21\u6bd4\u8f83","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_77","title":"\u4ee4","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_78","title":"\u6240\u4ee5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_79","title":"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_80","title":"\u7a7a\u95f4\u590d\u6742\u5ea6\u9700\u8981\u989d\u5916\u7684\u6570\u7ec4\u4e2d \u53f7\u4f4d\u7f6e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_81","title":"\u5982\u4f55\u63d0\u9ad8\u67e5\u627e\u6548\u7387","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#1_1","title":"1. \u6309\u67e5\u627e\u6982\u7387\u9ad8\u4f4e\u5b58\u50a8","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_82","title":"\u67e5\u627e\u6982\u7387\u9ad8\uff0c\u6bd4\u8f83\u6b21\u6570\u5c11","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_83","title":"\u67e5\u627e\u6982\u7387\u4f4e\uff0c\u6bd4\u8f83\u6b21\u6570\u591a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#2_1","title":"2. \u5f53\u67e5\u627e\u6982\u7387\u65e0\u6cd5\u786e\u5b9a\u65f6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_84","title":"\u6309\u67e5\u627e\u6982\u7387\u52a8\u6001\u8c03\u6574","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#key","title":"\u5728\u6bcf\u4e2akey\u4e2d\u589e\u8bbe\u4e00\u4e2a\u8bbf\u95ee\u9891\u5ea6\u57df","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_85","title":"\u59cb\u7ec8\u4fdd\u6301\u9891\u5ea6\u57df\u6309\u975e\u9012\u589e\uff0c\u6709\u5e8f\u7684\u6b21\u5e8f\u6392\u5217","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#key_1","title":"\u6bcf\u6b21\u67e5\u627e\u540e\uff0c\u8bb2\u521a\u67e5\u5230\u7684key\u6570\u636e\u79fb\u81f3\u8868\u5934","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_86","title":"\u987a\u5e8f\u67e5\u627e\u7279\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_87","title":"\u4f18\u70b9\uff1a\u7b97\u6cd5\u7b80\u5355\uff0c\u903b\u8f91\u6b21\u5e8f\u65e0\u8981\u6c42\uff0c\u4e0d\u540c\u5b58\u50a8\u7ed3\u6784\u5747\u9002\u7528","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#asl","title":"\u7f3a\u70b9\uff1aASL\u592a\u957f\uff0c\u65f6\u95f4\u6548\u7387\u4f4e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#binary-search_1","title":"\u6298\u534a\u67e5\u627e(Binary Search)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_88","title":"\u524d\u7f6e\u6761\u4ef6\uff1a\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u6309\u9012\u589e\u7684\u987a\u5e8f\u6392\u5217","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_89","title":"\u65b9\u6cd5\uff1a\u6bcf\u6b21\u5c06\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u7f29\u5c0f\u4e00\u534a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#lowhighleftright","title":"\u9700\u8981\u53d8\u91cf low,high\u6216left,right","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#lowhigh","title":"\u7531\u56fe\u53ef\u77e5\uff0c\u5982\u679c\u67e5\u627e\u7684\u5143\u7d20\u4e0d\u5728\u96c6\u5408\u4e2d\uff0c\u90a3\u4e48\u6700\u7ec8\u7684\u7ed3\u679c\u4e3a low&gt;high,\u5373\u5faa\u73af\u7684\u6761\u4ef6\u4e3a","text":"<p><pre><code>while(low&lt;=high)\n</code></pre> <pre><code>int Search_BS(SSTable ST, KeyType key) {\nint left = 1 ; //\u786e\u5b9a\u5de6\u533a\u95f4\nint right = ST.length; //\u786e\u5b9a\u53c8\u533a\u95f4\nint mid = (left + right) / 2 ;\n</code></pre> <pre><code>while (left &lt;= right) {\nif (key == ST.base[mid].key)\nreturn mid;\nelse if (key &gt; ST.base[mid].key) { //\u5982\u679c\u641c\u7d22\u5143\u7d20\u5927\u4e8e\u4e2d\u95f4\u4f4d\u7f6e\u5143\u7d20\nleft = mid + 1 ;\nmid = (left + right) / 2 ;\n} else { //\u5982\u679c\u641c\u7d22\u5143\u7d20\u5c0f\u4e8e\u4e2d\u95f4\u4f4d\u7f6e\nright = mid - 1 ;\nmid = (left + right) / 2 ;\n}\n}\n</code></pre> <pre><code>return 0 ;\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#-_1","title":"\u7b97\u6cd5\u5206\u6790--\u5224\u65ad\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_90","title":"\u4e8c\u53c9\u6811\u6027\u8d28","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_91","title":"\u8282\u70b9\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_92","title":"\u9ad8\u5ea6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_93","title":"\u7b2c \u5c42\u8282\u70b9\u4e2a\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_94","title":"\u53ef\u4ee5\u628a\u8be5\u641c\u7d22\u8fc7\u7a0b\u62bd\u8c61\u6210\u4e00\u9897\u4e8c\u53c9\u6811\uff0c\u5728\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\u8868\u793a\u8282\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_95","title":"\u53ef\u4ee5\u770b\u51fa\u8be5\u4e8c\u53c9\u6811\u7684 \u4e3a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_96","title":"\u90a3\u4e48\u8be5\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u6570\u4e3a \u5373","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_97","title":"\u7531\u6b64\u53ef\u89c1\uff0c\u627e\u5230\u5143\u7d20\u6240\u5728\u4f4d\u7f6e\u7ecf\u8fc7\u7684\u8def\u5f84\u5c31\u662f\u9700\u8981\u7684\u6bd4\u8f83\u6b21\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#lowhigh_1","title":"\u65b9\u5f62\u8282\u70b9\u4ee3\u8868\u7740\u5916\u90e8\u8282\u70b9\uff0c\u5982\u679c\u5230\u8fbe\u65b9\u5f62\u8282\u70b9\u5219\u8868\u793a\u67e5\u627e\u5931\u8d25\uff0c\u5373 low&gt;high","text":"<pre><code>}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_98","title":"\u4e3a\u4e86\u65b9\u4fbf\u8ba8\u8bba\uff0c\u8bbe\u4e00\u4e2a\u6570\u7ec4\u4e2d\u6709 \u4e2a\u5143\u7d20","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_99","title":"\u4ee4\u6bcf\u4e2a\u5143\u7d20\u627e\u5230\u7684\u6982\u7387\u76f8\u7b49","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_100","title":"\u8f6c\u5316\u6210\u9ad8\u5ea6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_101","title":"\u63a8\u5bfc","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_102","title":"\u5047\u8bbe\u6709 \u5219\u6709\u6570\u5217","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_103","title":"\u4ee4 \u5219\u6709\u6570\u5217","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_104","title":"\u7531 \u53ef\u77e5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_105","title":"\u6298\u534a\u67e5\u627e\u7279\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_106","title":"\u4f18\u70b9\uff1a\u6548\u7387\u6bd4\u987a\u5e8f\u67e5\u627e\u9ad8","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_107","title":"\u7f3a\u70b9\uff1a\u53ea\u9002\u7528\u4e8e\u6709\u5e8f\u8868\uff0c\u4e14\u4ec5\u9650\u4e8e\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784(\u5bf9\u94fe\u8868\u65e0\u6548)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#blocking-search_1","title":"\u5206\u5757\u67e5\u627e(Blocking Search)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_108","title":"\u5c06\u8868\u5206\u4e3a\u51e0\u5757\uff0c\u5e76\u4e14\u5206\u5757\u6709\u5e8f\uff0c\u5757\u5185\u53ef\u4ee5\u65e0\u5e8f\uff0c\u5982\u4e0b\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_109","title":"\u628a\u6240\u6709\u62bd\u8c61\u6210\u4e00\u4e2a\u6570\u7ec4\uff0c\u6570\u7ec4\u5185\u5143\u7d20\u662f\u6700\u5927\u5173\u952e\u5b57\uff0c\u5bf9\u5757\u8fdb\u884c\u6298\u534a\u67e5\u627e\uff0c\u5bf9\u5757\u5185\u8fdb\u884c\u987a\u5e8f\u67e5\u627e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_110","title":"\u6570\u636e\u7c7b\u578b\u5b9a\u4e49\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_111","title":"\u7b97\u6cd5\u5b9e\u73b0","text":"<p><pre><code>#define MAXBLOCK 20\ntypedef struct {\nKeyType MaxKey;\nint start, end;\n} IndexElemType;\n</code></pre> <pre><code>typedef struct __IndexTbale {\nIndexElemType index[MAXBLOCK];\nint length;\n} IndexTable;\n</code></pre> <pre><code>IndexTable INDEXTABLE; //\u5168\u5c40\u53d8\u91cf\u7d22\u5f15\u8868\uff0c\u8c03\u7528BlockSearch\u7684\u65f6\u5019\u9700\u8981extern\u58f0\u660e\nint BlockSearch(KeyType *a, KeyType key) //\u6b64\u51fd\u6570\uff0c\u9ed8\u8ba4\u4e0d\u4f7f\u7528\u6570\u7ec4\u4e2d 0 \u53f7\u4e0b\u6807\uff0c\u4ece\u6570\u7ec4\u4e0b\u6807 1 \u5f00\n\u59cb\n{\nint left = 1 ;\nint right = INDEXTABLE.length;\n</code></pre> <pre><code>while (left &lt;= right) {\nint mid = (left + right) / 2 ;\nif (key &lt;=\nINDEXTABLE.index[mid].MaxKey) { //\u5982\u679c\u5c0f\u4e8emid,\u5219\u9700\u8981\u5224\u65ad\u662f\u5426\u5927\u4e8emid-\nif (key &gt;\nINDEXTABLE.index[mid - 1 ].MaxKey) { //\u5982\u679c\u5927\u4e8emid-1 \u8bf4\u660e\u5728mid\u6240\u5728\u5757\nfor (int i = INDEXTABLE.index[mid].start;\ni &lt;= INDEXTABLE.index[mid].end; i++) {\nif (key == a[i])\nreturn i; //\u8fdb\u884c\u987a\u5e8f\u641c\u7d22\n}\nreturn 0 ; //\u6ca1\u627e\u5230\u8fd4\u56de 0\n} else { //\u5c0f\u4e8e\u7b49\u4e8emid-1 \u5219\u9700\u8981\u8fdb\u884c\u4e0b\u6b21\u7684\u6298\u534a\u67e5\u627e\nright = mid - 1 ;\n}\n} else { // key\u5927\u4e8emid\uff0c\u8fdb\u884c\u4e0b\u4e00\u6b21\u6298\u534a\u67e5\u627e\nleft = mid + 1 ;\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_112","title":"\u6d4b\u8bd5\u6848\u4f8b","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_113","title":"\u7b97\u6cd5\u5206\u6790","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_114","title":"\u4e3a\u5bf9 \u8fdb\u884c\u7684\u6298\u534a\u67e5\u627e\uff0c \u4e3a\u5bf9\u5757\u5185\u8fdb\u884c\u7684\u987a\u5e8f\u67e5\u627e\uff0c \u4e3a\u6bcf\u4e00\u5757\u5185\u5143\u7d20\u4e2a\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_115","title":"\u4f8b\u5982\u5f53 \u65f6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_116","title":"\u6298\u534a\u67e5\u627e\u4e3a \u987a\u5e8f\u67e5\u627e\u4e3a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_117","title":"\u5206\u5757\u67e5\u627e\u7279\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_118","title":"\u4f18\u70b9\uff1a\u63d2\u5165\u548c\u5220\u9664\u6bd4\u8f83\u5bb9\u6613\uff0c\u65e0\u9700\u8fdb\u884c\u5927\u91cf\u79fb\u52a8","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#indextable","title":"\u7f3a\u70b9\uff1a\u8981\u589e\u52a0\u4e00\u4e2aindextable\u6570\u7ec4(\u7d22\u5f15\u8868)\u7684\u50a8\u5b58\u7a7a\u95f4\u5e76\u5bf9\u521d\u59cb\u7d22\u5f15\u8fdb\u884c\u6392\u5e8f\u8fd0\u7b97","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_119","title":"\u4f7f\u7528\u60c5\u51b5\uff1a\u5982\u679c\u7ebf\u6027\u8868\u8981\u5feb\u901f\u67e5\u627e\u4e14\u53c8\u7ecf\u5e38\u52a8\u6001\u53d8\u5316\uff0c\u5219\u53ef\u91c7\u7528\u5206\u5757\u67e5\u627e","text":"<p><pre><code>}\n}\nreturn 0 ; // while\u5faa\u73af\u540e\u4f9d\u65e7\u6ca1\u6709return\uff0c\u8bf4\u660e\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de 0\n}\n</code></pre> <pre><code>#include \"SSTable.h\"\nextern IndexTable INDEXTABLE;\n</code></pre> <pre><code>int main(void) {\nKeyType a[ 19 ] = { 0 , 22 , 12 , 13 , 8 , 9 , 20 , 33 , 42 , 44 ,\n38 , 24 , 48 , 60 , 58 , 74 , 49 , 86 , 53 };\n//\u4e0d\u8ba1\u5165 0 \u53f7\u5143\u7d20\uff0c\u521d\u59cb\u5316\u65f6 0 \u53f7\u4f4d\u7f6e\u4e3a 0\nINDEXTABLE.length = 3 ;\nINDEXTABLE.index[ 1 ].start = 1 , INDEXTABLE.index[ 1 ].end = 6 ,\nINDEXTABLE.index[ 1 ].MaxKey = 22 ;\nINDEXTABLE.index[ 2 ].start = 7 , INDEXTABLE.index[ 2 ].end = 12 ,\nINDEXTABLE.index[ 2 ].MaxKey = 48 ;\nINDEXTABLE.index[ 3 ].start = 13 , INDEXTABLE.index[ 3 ].end = 18 ,\nINDEXTABLE.index[ 3 ].MaxKey = 86 ;\nprintf(\"%d\\n\", BlockSearch(a, 86 ));\nsystem(\"pause\");\nreturn 0 ;\n}\n/*\n22 12 13 8 9 20 33 42 44 38 24 48 60 58 74 49 86 53\n*/\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_120","title":"\u987a\u5e8f\u67e5\u627e \u6298\u534a\u67e5\u627e \u5206\u5757\u67e5\u627e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#asl_1","title":"ASL \u6700\u5927 \u6700\u5c0f \u9002\u4e2d","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#ok","title":"\u7ed3\u6784 \u6709\u5e8f\u8868\uff0c\u65e0\u9700\u8868OK \u4ec5\u6709\u5e8f\u8868 \u5206\u5757\u6709\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#ok-no-ok","title":"\u5b58\u50a8\u7ed3\u6784 \u5faa\u5e8f\u8868\uff0c\u94fe\u8868OK \u94fe\u8868NO \u987a\u5e8f\u8868\uff0c\u94fe\u8868OK","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_121","title":"\u7ebf\u6027\u8868\u67e5\u627e\u65b9\u6cd5\u6bd4\u8f83","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_122","title":"\u6811\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_123","title":"\u5f53\u8868\u63d2\u5165\uff0c\u5220\u9664\u64cd\u4f5c\u9891\u7e41\u65f6\uff0c\u4e3a\u7ef4\u62a4\u8868\u7684\u6709\u5e8f\u6027\uff0c\u9700\u8981\u79fb\u52a8\u8868\u4e2d\u5f88\u591a\u8bb0\u5f55\uff0c\u6709\u4e00\u79cd\u65b9\u6cd5\u5c31\u662f\u6539\u7528\u52a8\u6001","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#-_2","title":"\u67e5\u627e\u8868--\u6811\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#keykey","title":"\u5bf9\u4e8e\u7ed9\u5b9a\u7684key\u503c\uff0c\u82e5\u8868\u4e2d\u5b58\u5728\u5219\u6210\u529f\u8fd4\u56de\uff0c\u82e5\u4e0d\u5b58\u5728\u5219\u63d2\u5165\u4e00\u4e2a\u7b49\u4e8ekey\u503c\u7684\u8bb0\u5f55","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_124","title":"\u6811\u8868\u5206\u4e3a\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_125","title":"\u4e8c\u53c9\u6392\u5e8f\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_126","title":"\u5e73\u8861\u4e8c\u53c9\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_127","title":"\u7ea2\u9ed1\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#b-","title":"B-\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#b","title":"B+\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_128","title":"\u5efa\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_129","title":"\u6b64\u7b14\u8bb0\u6682\u65f6\u53ea\u8bb0\u5f55 \u4e8c\u53c9\u6392\u5e8f\u6811 \u548c \u5e73\u8861\u4e8c\u53c9\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#binary-sort-tree_1","title":"\u4e8c\u53c9\u6392\u5e8f\u6811(Binary Sort Tree)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_130","title":"\u5b9a\u4e49\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_131","title":"\u82e5\u5176\u5de6\u5b50\u6811\u975e\u7a7a\uff0c\u5219\u5de6\u5b50\u6811\u4e0a\u6240\u6709\u8282\u70b9\u7684\u503c\u5747\u5c0f\u4e8e\u6839\u8282\u70b9\u7684\u503c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_132","title":"\u82e5\u5176\u53f3\u5b50\u6811\u975e\u7a7a\uff0c\u5219\u53f3\u5b50\u6811\u4e0a\u6240\u6709\u8282\u70b9\u7684\u503c\u5747\u5927\u4e8e\u7b49\u4e8e\u6839\u8282\u70b9\u7684\u503c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_133","title":"\u5176\u5de6\u53f3\u5b50\u6811\u672c\u8eab\u53c8\u662f\u4e00\u9897\u4e8c\u53c9\u6392\u5e8f\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_134","title":"\u5982\u4e0b\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_135","title":"\u5982\u679c\u4e2d\u5e8f\u904d\u5386\u975e\u7a7a\u4e8c\u53c9\u6392\u5e8f\u6811\uff0c\u6240\u5f97\u5230\u7684\u5143\u7d20\u6570\u636e\u5e8f\u5217\u662f\u4e00\u4e2a\u9012\u589e\u6709\u5e8f\u6570\u5217","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_136","title":"\u6570\u636e\u7c7b\u578b\u5b9a\u4e49","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_137","title":"\u590d\u4e60\uff1a\u9012\u5f52\u521b\u5efa\u4e8c\u53c9\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#pre-orderpost-orderin-order","title":"\u53ef\u4ee5\u6309\u7167Pre-order\u6216Post-order\u521b\u5efa\u4e8c\u53c9\u6811\uff0c\u4f46\u662f\u65e0\u6cd5\u6309\u7167In-order\u521b\u5efa\u3002","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#prepostin-order","title":"\u8fd9\u662f\u56e0\u4e3a\u5728Pre\u548cPost\u4e2d\u8fde\u7eed\u7684\u865a\u7a7a\u8282\u70b9\u53ef\u4ee5\u786e\u5b9a\u552f\u4e00\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u4f46\u662fIn-order\u4e0d\u80fd\u3002","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#bst_5","title":"BST\u67e5\u627e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_138","title":"\u82e5\u5173\u952e\u5b57\u7b49\u4e8e\u6839\u8282\u70b9\uff0c\u6210\u529f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_139","title":"\u5426\u5219\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_140","title":"\u82e5\u5c0f\u4e8e\u6839\u8282\u70b9\uff0c\u67e5\u5176\u5de6\u5b50\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_141","title":"\u82e5\u5927\u4e8e\u7b49\u4e8e\u6839\u8282\u70b9\uff0c\u67e5\u8d77\u53f3\u5b50\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_142","title":"\u4f9d\u6b64\u9012\u5f52","text":"<p><pre><code>#define ENDFLAG 0 //\u8f93\u5165\u7ed3\u675f\u7b26\ntypedef int BSTKeyType;\ntypedef char *BSTOtherInfo;\ntypedef struct __BSTElemType {\nBSTKeyType key;\nBSTOtherInfo other;\n} BSTElemType;\ntypedef struct __BSTNode {\nBSTElemType data;\n__BSTNode *lchild, *rchild;\n} BSTNode, *BSTree;\n</code></pre> <pre><code>Status CreatBTree(BSTree *T) {\nBSTKeyType key;\nscanf(\" %d\", &amp;key);\nif ( 0 == key)\n*T = NULL;\nelse {\nif (!(*T = (BSTree)malloc(sizeof(BSTNode))))\nexit(OVERFLOW);\n(*T)-&gt;data.key = key;\nCreatBTree(&amp;(*T)-&gt;lchild);\nCreatBTree(&amp;(*T)-&gt;rchild);\n}\nreturn OK;\n}\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#bst_6","title":"BST\u67e5\u627e\u7b97\u6cd5\u5206\u5206\u6790","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#bst_7","title":"BST\u67e5\u627e\u7b97\u6cd5\u7c7b\u4f3c\u4e8e\u6298\u534a\u67e5\u627e\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u6bd4\u8f83\u6b21\u6570\u548c\u6240\u5728\u5c42\u6b21\u6709\u5173\uff0c\u6240\u53ca","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#n","title":"\u542b\u6709n\u4e2a\u8282\u70b9\u7684\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u5e73\u5747\u67e5\u627e\u957f\u5ea6\u4e0e\u6b64\u4e8c\u53c9\u6811\u7684\u5f62\u6001\u6709\u5173\uff0c\u5982\u4e0b\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#asl_2","title":"\u8282\u70b9\u6570\u4e00\u6837\uff0c\u4f46ASL\u663e\u7136\u4e0d\u540c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_143","title":"\u7684 \u6298\u534a\u67e5\u627e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_144","title":"\u7684 \u987a\u5e8f\u67e5\u627e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_145","title":"\u6240\u4ee5\u8bf4\u5728\u521b\u5efa\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u65f6\u5019\uff0c\u5c3d\u91cf\u8981\u8ba9\u6b64\u4e8c\u53c9\u6811\u5f62\u72b6\u5747\u5300","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#bst_8","title":"BST\u63d2\u5165","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#bst_9","title":"BST\u63d2\u5165\u7b97\u6cd5\u548c\u7ebf\u6027\u8868\u7684\u63d2\u5165\u7b97\u6cd5\u4e0d\u540c\uff0c\u4e0d\u9700\u8981\u5177\u4f53\u4f4d\u7f6e","text":"<p><pre><code>BSTree Search_BST(BSTree T, BSTKeyType key) {\nif (!(T) || key == T-&gt;data.key)\nreturn T;\nelse if (key &lt; T-&gt;data.key)\nreturn Search_BST(T-&gt;lchild, key);\nelse\nreturn Search_BST(T-&gt;rchild, key);\n}\n</code></pre> <pre><code>void Insert_BST(BSTree *T, BSTKeyType e) {\nif (NULL == *T) {\n//\u5982\u679c\u5f53\u524d\u8282\u70b9\u4e3a\u7a7a\uff0c \u5219\u8868\u793a\u627e\u5230\u5408\u9002\u4f4d\u7f6e\uff0c\u521b\u5efa\u65b0\u8282\u70b9\n*T = (BSTree)malloc(sizeof(BSTNode));\n(*T)-&gt;data.key = e;\n(*T)-&gt;lchild = (*T)-&gt;rchild = NULL;\n} else if (e &lt; (*T)-&gt;data.key) {\n//\u8868\u793a\u4f4d\u7f6e\u5728T\u6811\u7684\u5de6\u5b50\u6811\nInsert_BST(&amp;((*T)-&gt;lchild), e);\n} else if (e &gt; (*T)-&gt;data.key) {\n//\u5728T\u6811\u7684\u53f3\u5b50\u6811\nInsert_BST(&amp;((*T)-&gt;rchild), e);\n}\n}\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_146","title":"\u6d4b\u8bd5\u4ee3\u7801","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#bst_10","title":"\u521b\u5efaBST","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#t","title":"\u82e5\u4ece\u4e00\u9897\u7a7a\u6811T\u51fa\u53d1\uff0c\u4f9d\u6b21\u63d2\u5165\u8282\u70b9\uff0c\u90a3\u4e48\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u4e8c\u53c9\u6392\u5e8f\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_147","title":"\u6d4b\u8bd5\u4ee3\u7801","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_148","title":"\u5982\u4e0b\u56fe","text":"<p><pre><code>#include \"BSTree.h\"\n</code></pre> <pre><code>int main(void) {\nBSTree T = NULL;\nCreatBTree(&amp;T); //\u4ee5\u5148\u5e8f\u904d\u5386\u7684\u987a\u5e8f\u521b\u5efa\u4e8c\u53c9\u6811\uff0c 0 \u8868\u793a\u4e3a\u865a\u7a7a\u8282\u70b9\nInsert_BST(&amp;T, 66 );\nInOrder_BST(T);\nsystem(\"pause\");\nreturn 0 ;\n}\n</code></pre> <pre><code>//// 45 12 3 0 0 37 24 0 0 0 53 0 100 61 0 90 78 0 0 0 0\n</code></pre> <pre><code>void Creat_BST(BSTree *T) {\n*T = NULL; //\u521d\u59cb\u5316\u4e3aNULL\uff0c\u4ee5\u4fbfInser\u2014\u2014BST\u53ef\u4ee5\u8fd0\u884c\nBSTKeyType key;\nscanf(\" %d\", &amp;key);\nwhile (key != ENDFLAG) { // ENDFALG \u4e3a 0\nInsert_BST(T, key);\nscanf(\" %d\", &amp;key); //\u6ce8\u610f\uff1awhile\u5185\u90e8\u5fc5\u987b\u8981\u6709\u8f93\u5165\n}\n}\n</code></pre> <pre><code>#include \"BSTree.h\"\n</code></pre> <pre><code>int main(void) {\nBSTree T = NULL;\nCreat_BST(&amp;T);\n// Insert_BST(&amp;T, 66);\nInOrder_BST(T);\nsystem(\"pause\");\nreturn 0 ;\n}\n</code></pre> <pre><code>// 45 24 53 12 90 0\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_149","title":"\u6ce8\u610f\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_150","title":"\u4e0d\u540c\u5e8f\u5217\u4ea7\u751f\u7684\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u5f62\u6001\u4e0d\u4e00\u6837","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#45-24-53-12-90-12-24-45-90-53","title":"45 24 53 12 90(\u5982\u4e0a\u56fe)\u548c 12 24 45 90 53(\u5982\u4e0b\u56fe)\u4e2d\u5e8f\u904d\u5386\u7684\u987a\u5e8f\u4e00\u6837\uff0c\u4f46\u662f\u5f62\u6001\u4e0d\u4e00\u6837","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_151","title":"\u5df2\u77e5\u63d2\u5165\u7684 \u4e3a \uff0c\u4e00\u5171\u6709\u4e2a\u8282\u70b9\u5219\u9700\u8981 \u6b21\u5faa\u73af","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_152","title":"\u6240\u4ee5\u521b\u5efa\u65f6\u95f4\u6548\u7387\u4e3a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#bst_11","title":"BST\u5220\u9664","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#bst_12","title":"\u4eceBST\u5220\u9664\u4e00\u4e2a\u8282\u70b9\uff0c\u4e0d\u80fd\u628a\u4ee5\u8be5\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u90fd\u5220\u9664\uff0c\u53ea\u80fd\u5220\u9664\u8be5\u8282\u70b9\uff0c\u5e76\u4e14\u8fd8\u8981\u4fdd\u8bc1\u5220\u9664\u540e\u7684","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#bst_13","title":"\u4e8c\u53c9\u6811\u4ecd\u7136\u4e3aBST","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#bst_14","title":"BST\u7684\u5220\u9664\u64cd\u4f5c\u5206\u4e3a\u4e09\u79cd\u60c5\u51b5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#ppfpf","title":"\u4ee4\u88ab\u5220\u9664\u8282\u70b9\u7684\u5730\u5740\u4e3ap\uff0cp\u7684\u53cc\u4eb2\u7ed3\u70b9\u4e3af\u4e14p\u4e3af\u7684\u5de6\u5b69\u5b50","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#pf-lchild-null","title":"\u5f53p\u4e3a\u53f6\u5b50\u8282\u70b9\u65f6\uff0cf-&gt;lchild = NULL;","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#pf-lchild-p-lchild-f-lchild-p-rchild","title":"\u5f53p\u53ea\u6709\u4e00\u4e2a\u5de6\u5b50\u6811\u6216\u53f3\u5b50\u6811\u65f6\uff0cf-&gt;lchild = p-&gt;lchild; \u6216 f-&gt;lchild = p-&gt;rchild;","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#p","title":"\u5f53p\u62e5\u6709\u5de6\u53f3\u5b50\u6811\u65f6,\u6b64\u79cd\u60c5\u51b5\u8f83\u4e3a\u590d\u6742\uff0c\u9700\u8981\u5177\u4f53\u5206\u6790","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#mmm","title":"\u524d\u7f6e\u77e5\u8bc6\uff0c\u82e5\u5df2\u77e5\u4e00\u4e2a\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u8282\u70b9m\uff0cm\u7684\u76f4\u63a5\u524d\u9a71\u8282\u70b9\u4e3am\u7684\u5de6\u5b50\u6811\u4e0a\u53f3\u5206\u652f\u6700\u540e\u4e00\u4e2a\u53f3\u5b69","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_153","title":"\u5b50\u4e3a\u7a7a\u7684\u8282\u70b9\uff0c\u5982\u4e0b\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#nnmn","title":"\u7531\u56fe\u53ef\u77e5\uff0cn\u6ca1\u6709\u53f3\u5b69\u5b50(\u5982\u679cn\u4e00\u65e6\u6709\u4e86\u6709\u5b69\u5b50\uff0c\u90a3\u4e48m\u7684\u76f4\u63a5\u524d\u9a71\u5fc5\u7136\u4f1a\u53d1\u751f\u53d8\u5316)\uff0c\u4f46n\u53ef\u4ee5\u6709\u5de6\u5b69","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#nm","title":"\u5b50(\u5373\u4f7f\u6709\u5de6\u5b69\u5b50\u4e5f\u5e76\u4e0d\u5f71\u54cdn\u662fm\u7684\u76f4\u63a5\u524d\u9a71)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#n_1","title":"\u540c\u65f6\u4e5f\u8981\u8003\u8651n\u7684\u5de6\u5b50\u6811\u6ca1\u6709\u53f3\u5206\u652f\u7684\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#nmn","title":"\u7531\u56fe\u53ef\u77e5\uff0c\u5982\u679cn\u6ca1\u6709\u53f3\u5206\u652f\uff0c\u90a3\u4e48m\u7684\u76f4\u63a5\u524d\u9a71\u4e3an","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#m","title":"\u5229\u7528\u5bf9\u79f0\u6027\u53ef\u77e5\u76f4\u63a5\u540e\u7ee7\u8282\u70b9\u5219\u4e3a\uff1am\u7684\u53f3\u5b50\u6811\u4e0a\u5de6\u5206\u652f\u4e0a\u6700\u540e\u4e00\u4e2a\u5de6\u5b69\u5b50\u4e3a\u7a7a\u7684\u8282\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_154","title":"\u8003\u8651\u4e0b\u56fe\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_155","title":"\u4e2d\u5e8f\u904d\u5386\u6240\u5f97\u5230\u7684\u5e8f\u5217\u4e3a:","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#p-sp-p-s","title":"\u7531\u56fe\u53ef\u77e5 P \u7684\u76f4\u63a5\u524d\u9a71\u4e3a S\uff0c\u5982\u679c\u628a\u5e8f\u5217\u4e2dP\u5220\u9664\u5e76\u4e14 P \u7684\u6570\u636e\u7528 S \u4ee3\u66ff","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#q-","title":"\u6b64\u65f6 \u53d8\u6210\u4e86 \u7684\u76f4\u63a5\u524d\u9a71\u4e3a \u7684\u53f3\u5b50\u6811\u4e0a\u7684\u5de6\u5206\u652f\u6700\u540e\u4e00\u4e2a\u5de6\u5b69\u5b50\u4e3a\u7a7a\u7684\u8282\u70b9\u4e3a \u5373 Q-","text":"<p>right = S-&gt;left</p> <p><pre><code>void Delete_BST(BSTree *T, BSTKeyType key) {\nBSTree p = *T;\nBSTree parent = NULL;\nwhile (p) { //\u82e5\u5faa\u73af\u7ed3\u675f\u5219\u76f4\u63a5return\uff0c\u8bf4\u660e\u6ca1\u627ekey\nif (p-&gt;data.key == key)\nbreak; //\u9000\u51fa\u5faa\u73af\u6b64\u65f6p\u6307\u5411\u8981\u5220\u9664\u8282\u70b9\nelse if (key &lt; p-&gt;data.key) {\nparent = p; //\u901a\u8fc7\u6bd4\u8f83key\u503c\u5b9a\u4f4d\u8981\u5220\u9664\u8282\u70b9\np = p-&gt;lchild;\n} else {\nparent = p;\np = p-&gt;rchild;\n}\n}\n</code></pre> <pre><code>if (!p) {\nreturn;\n}\n//\u5f53\u63a7\u5236\u6765\u5230\u6b21\u884c\u65f6\uff0c\u8bf4\u660ep\u6307\u5411\u4e86\u8981\u5220\u9664\u7684\u8282\u70b9\nBSTree pfree;\nBSTree node;\nif (p-&gt;lchild &amp;&amp; p-&gt;rchild) { //\u7b2c\u4e00\u79cd\u60c5\u51b5 p\u7684\u5de6\u53f3\u5b50\u6811\u4e0d\u4e3a\u7a7a\nBSTree prior = p-&gt;lchild; // p\u7684\u76f4\u63a5\u524d\u9a71\u4e00\u5b9a\u5728p\u7684\u5de6\u5b50\u6811\u4e0a\uff0c\u6240\u4ee5prior = p\u7684\u5de6\u5b69\u5b50\nBSTree parent_prior = p; //\u9700\u8981\u4e00\u4e2a\u8282\u70b9\u6765\u5b9a\u4f4dprior\u7684\u53cc\u4eb2\u7ed3\u70b9\n</code></pre> <pre><code>while (prior-&gt;rchild) { //\u5728\u53f3\u5206\u652f\u4e0a\u5bfb\u627e\u8981\u5220\u9664\u8282\u70b9p\u7684\u76f4\u63a5\u524d\u9a71\nparent_prior = prior;\nprior = prior-&gt;rchild;\n}\n</code></pre> <pre><code>p-&gt;data.key = prior-&gt;data.key; //\u628a\u524d\u9a71\u8282\u70b9\u7684\u503c\u8d4b\u7ed9\u8981\u5220\u9664\u8282\u70b9\n//\u6b64\u65f6\u95ee\u9898\u8f6c\u5316\u6210\u4e86\uff1a\u5728\u4fdd\u6301\u5e8f\u5217\u987a\u5e8f\u7684\u524d\u63d0\u4e0b\uff0c\u5982\u679c\u94fe\u63a5\u4e8c\u53c9\u6392\u5e8f\u6811\n</code></pre> <pre><code>if (parent_prior != p) {\nparent_prior-&gt;rchild = prior-&gt;lchild;\n} else { //\u6b64\u79cd\u60c5\u51b5p\u7684\u76f4\u63a5\u524d\u9a71\u4e3ap\u7684\u5de6\u5b69\u5b50\uff0c\nparent_prior-&gt;lchild = prior-&gt;lchild;\n}\n</code></pre> <pre><code>free(prior);\nreturn;\n} else if (!p-&gt;lchild) {\npfree = p; // pfree\u7528\u4e8e\u5b58\u653e \u8981\u5220\u9664\u8282\u70b9\u7684\u5730\u5740\nnode = p-&gt;rchild; // node\u5b58\u653e\u9700\u8981\u94fe\u63a5\u8282\u70b9\u7684\u5730\u5740\n} else if (!p-&gt;rchild) {\npfree = p;\nnode = p-&gt;lchild;\n}\n//\u5f53\u63a7\u5236\u6765\u5230\u6b64\u884c\u65f6\uff0cpfree\u4fdd\u5b58\u8981\u5220\u9664\u8282\u70b9\u7684\u5730\u5740\uff0cnode\u5b58\u653e\u9700\u8981\u8fde\u63a5\u7684\u8282\u70b9\u5730\u5740\nif (!parent) { //\u5982\u679cparent\u57df\u4ecd\u7136\u4e3a\u7a7a\uff0c\u8bf4\u660e\u8981\u5220\u9664\u7684\u8282\u70b9\u4e3a\u6839\u8282\u70b9\n*T = node;\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_156","title":"\u6d4b\u8bd5\u4ee3\u7801","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#avlbalance-binary-tree_1","title":"AVL\u6811(Balance Binary Tree)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#avl","title":"\u5e73\u8861\u4e8c\u53c9\u6811\u6392\u5e8f\u6811(AVL\u6811)\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_157","title":"\u9700\u8981\u6ee1\u8db3\u5982\u4e0b\u7684\u4e09\u4e2a\u6027\u8d28:","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_158","title":"\u6709\u4e00\u4e2a\u6811 \uff0c\u4ee4 \u7684\u5de6\u5b50\u6811\u7684\u9ad8\u5ea6\u4e3a \uff0c\u53f3\u5b50\u6811\u9ad8\u5ea6\u4e3a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_159","title":"\u5e73\u8861\u56e0\u5b50","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_160","title":"\u7684\u5de6\u53f3\u5b50\u6811\u4e5f\u4e3a\u5e73\u8861\u4e8c\u53c9\u6392\u5e8f\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_161","title":"\u5982\u679c\u63d2\u5165\u8282\u70b9\u4f7f\u5f97","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_162","title":"\u5219\u5fc5\u987b\u65cb\u8f6c \u4e3a \u7684\u8282\u70b9","text":"<p><pre><code>} else if (parent-&gt;rchild == p) {\nparent-&gt;rchild = node;\n} else {\nparent-&gt;lchild = node;\n}\n</code></pre> <pre><code>free(pfree);\n}\n</code></pre> <pre><code>#include \"BSTree.h\"\n</code></pre> <pre><code>int main(void) {\nBSTree T = NULL;\nCreat_BST(&amp;T);\nDelete_BST(&amp;T, 53 );\nDelete_BST(&amp;T, 12 );\nInOrder_BST(T);\nsystem(\"pause\");\nreturn 0 ;\n}\n</code></pre> <pre><code>// 45 24 53 12 90 0\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#1_2","title":"\u5b9a\u7406 1 \uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_163","title":"\u82e5\u4e00\u4e2a \u6811 \u5728\u6dfb\u52a0\u4e00\u4e2a\u8282\u70b9 \u540e\uff0c \u5219 \u7684\u53cc\u4eb2\u7ed3\u70b9 \u7684 \u4e0d\u80fd\u4e3a \u53f6\u5b50\u8282\u70b9\u9664\u5916","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_164","title":"\u4ee4\u4e00\u9897 \u6811 \u5728\u6dfb\u52a0\u4e00\u4e2a\u8282\u70b9 \u540e \uff0c\u4e14 \u7684\u53cc\u4eb2\u8282\u70b9 \u7684","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_165","title":"\u82e5\u5220\u53bb \u8282\u70b9\uff0c\u5219 \u7684\u9ad8\u5ea6\u5e76\u672a\u53d1\u751f\u53d8\u5316\uff0c\u4e14 \u672a\u53d1\u751f\u53d8\u5316","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_166","title":"\u5373 \u8bf4\u660e \u5728\u6dfb\u52a0 \u8282\u70b9\u4e4b\u524d\u4e0d\u662f \u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_167","title":"\u4e0d\u662f\u4e00\u9897 \u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#ll_1","title":"LL\u578b\u65cb\u8f6c(\u53f3\u65cb\u8f6c)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_168","title":"\u60c5\u51b5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_169","title":"\u4e14 \uff0c\u4ee5 \u7684\u5de6\u5b69\u5b50 \u4e3a\u4e2d\u5fc3\uff0c\u5411\u53f3\u65cb\u8f6c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_170","title":"\u5982\u4e0b\u56fe \u4e3a\u63d2\u5165\u8282\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#2_2","title":"\u5b9a\u7406 2","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_171","title":"\u5373\u5c06\u8fdb\u884c \u65cb\u8f6c\u7684\u6811 \uff0c \u4e14","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_172","title":"\u5219\u65cb\u8f6c\u540e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_173","title":"\u60c5\u51b5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_174","title":"\u4e14 \u4ee5 \u7684\u5de6\u5b69\u5b50 \u4e3a\u4e2d\u5fc3\u5411\u53f3\u65cb\u8f6c\uff0c\u6b64\u65f6 \u6210\u4e3a \u7684\u5de6\u5b69\u5b50\uff0c \u79f0\u6210\u4e3a \u7684\u5de6\u5b69\u5b50","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_175","title":"\u5219 \u8282\u70b9\u8131\u843d \u4f7f \u6210\u4e3a \u7684\u53f3\u5b69\u5b50","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_176","title":"\u5982\u4e0b\u56fe \u4e3a\u63d2\u5165\u8282\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#3","title":"\u5b9a\u7406 3","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_177","title":"\u5373\u5c06\u8fdb\u884c \u65cb\u8f6c\u7684\u6811 \uff0c \u4e14","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_178","title":"\u5219\u65cb\u8f6c\u540e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#rr_1","title":"RR\u65cb\u8f6c(\u5de6\u65cb\u8f6c)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_179","title":"\u60c5\u51b5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_180","title":"\u4e14 \uff0c\u4ee5 \u7684\u53f3\u5b69\u5b50 \u4e3a\u4e2d\u5fc3\uff0c\u5411\u5de6\u65cb\u8f6c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_181","title":"\u5982\u4e0b\u56fe \u4e3a\u63d2\u5165\u8282\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#4","title":"\u5b9a\u7406 4","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_182","title":"\u5373\u5c06\u8fdb\u884c \u65cb\u8f6c\u7684\u6811 \uff0c \u4e14","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_183","title":"\u5219\u65cb\u8f6c\u540e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_184","title":"\u60c5\u51b5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_185","title":"\u4e14 \u4ee5 \u7684\u53f3\u5b69\u5b50 \u4e3a\u4e2d\u5fc3\u5411\u5de6\u65cb\u8f6c\uff0c\u6b64\u65f6 \u6210\u4e3a \u7684\u53f3\u5b69\u5b50\uff0c \u79f0\u6210\u4e3a \u7684\u5de6\u5b69\u5b50","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_186","title":"\u5219 \u8282\u70b9\u8131\u843d\u4f7f \u6210\u4e3a \u7684\u53f3\u5b69\u5b50","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_187","title":"\u5982\u4e0b\u56fe \u4e3a\u63d2\u5165\u8282\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#5","title":"\u5b9a\u7406 5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_188","title":"\u5373\u5c06\u8fdb\u884c \u65cb\u8f6c\u7684\u6811 \uff0c \u4e14","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_189","title":"\u5219\u65cb\u8f6c\u540e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#lr_1","title":"LR\u65cb\u8f6c(\u5de6\u53f3\u65cb\u8f6c)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_190","title":"\u60c5\u51b5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_191","title":"\u5373\u5c06\u8fdb\u884c\u65cb\u8f6c\u7684\u6811 \u4e14 \uff0c\u5219 \u65cb\u8f6c \uff0c\u518d \u65cb\u8f6c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_192","title":"\u5982\u4e0b\u56fe\uff0c \u4e3a\u63d2\u5165\u8282\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#6","title":"\u5b9a\u7406 6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_193","title":"\u5373\u5c06\u8fdb\u884c \u65cb\u8f6c\u7684\u6811 \uff0c \u4e14","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_194","title":"\u5219 \u65cb\u8f6c\u540e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_195","title":"\u60c5\u51b5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_196","title":"\u8282\u70b9 \u6709\u53f3\u5b69\u5b50 \uff0c\u5373","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_197","title":"\u5373\u5c06\u8fdb\u884c\u65cb\u8f6c\u7684\u6811 \u4e14 \uff0c\u5219 \u65cb\u8f6c \u8282\u70b9\u8131\u843d\uff0c\u518d \u65cb\u8f6c \uff0c\u4f7f \u6210\u4e3a \u7684\u5de6\u5b69\u5b50","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_198","title":"\u5982\u4e0b\u56fe\uff0c \u4e3a\u63d2\u5165\u8282\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#7","title":"\u5b9a\u7406 7","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_199","title":"\u5373\u5c06\u8fdb\u884c \u65cb\u8f6c\u7684\u6811 \uff0c \u4e14","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_200","title":"\u5219 \u65cb\u8f6c\u540e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_201","title":"\u60c5\u51b5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_202","title":"\u8282\u70b9 \u6709\u5de6\u5b69\u5b50 \uff0c\u5373","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_203","title":"\u5373\u5c06\u8fdb\u884c \u65cb\u8f6c\u7684\u6811 \u4e14 \uff0c\u5219 \u65cb\u8f6c \u8282\u70b9\u8131\u843d\uff0c\u518d \u65cb\u8f6c \uff0c\u4f7f \u6210\u4e3a \u7684\u6709\u5b69\u5b50","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_204","title":"\u5982\u4e0b\u56fe\uff0c \u4e3a\u63d2\u5165\u8282\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#8","title":"\u5b9a\u7406 8","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_205","title":"\u5373\u5c06\u8fdb\u884c \u65cb\u8f6c\u7684\u6811 \uff0c \u4e14","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_206","title":"\u5219 \u65cb\u8f6c\u540e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#rl_1","title":"RL\u65cb\u8f6c(\u53f3\u5de6\u65cb\u8f6c)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_207","title":"\u60c5\u51b5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_208","title":"\u5373\u5c06\u8fdb\u884c \u65cb\u8f6c\u7684\u6811 \u4e14 \uff0c\u5219 \u65cb\u8f6c \uff0c\u518d \u65cb\u8f6c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_209","title":"\u5982\u4e0b\u56fe\uff0c \u4e3a\u63d2\u5165\u8282\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#9","title":"\u5b9a\u7406 9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_210","title":"\u5373\u5c06\u8fdb\u884c \u65cb\u8f6c\u7684\u6811 \uff0c \u4e14","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_211","title":"\u5219 \u65cb\u8f6c\u540e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_212","title":"\u60c5\u51b5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_213","title":"\u8282\u70b9 \u6709\u5de6\u5b69\u5b50 \uff0c\u5373","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_214","title":"\u5373\u5c06\u8fdb\u884c \u65cb\u8f6c\u7684\u6811 \u4e14 \uff0c\u5219 \u65cb\u8f6c \u8282\u70b9\u8131\u843d\uff0c\u518d \u65cb\u8f6c \uff0c\u4f7f \u6210\u4e3a \u7684\u5de6\u5b69\u5b50","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_215","title":"\u5982\u4e0b\u56fe\uff0c \u4e3a\u63d2\u5165\u8282\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#10","title":"\u5b9a\u7406 10","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_216","title":"\u5373\u5c06\u8fdb\u884c \u65cb\u8f6c\u7684\u6811 \uff0c \u4e14","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_217","title":"\u5219 \u65cb\u8f6c\u540e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_218","title":"\u60c5\u51b5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_219","title":"\u8282\u70b9 \u6709\u53f3\u5b69\u5b50 \uff0c\u5373","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_220","title":"\u5373\u5c06\u8fdb\u884c \u65cb\u8f6c\u7684\u6811 \u4e14 \uff0c\u5219 \u65cb\u8f6c \u8282\u70b9\u8131\u843d\uff0c\u518d \u65cb\u8f6c \uff0c\u4f7f \u6210\u4e3a \u7684\u5de6\u5b69\u5b50","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_221","title":"\u5982\u4e0b\u56fe\uff0c \u4e3a\u63d2\u5165\u8282\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#11","title":"\u5b9a\u7406 11","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_222","title":"\u5373\u5c06\u8fdb\u884c \u65cb\u8f6c\u7684\u6811 \uff0c \u4e14","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_223","title":"\u5219 \u65cb\u8f6c\u540e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_224","title":"\u603b\u7ed3","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_225","title":"\u5982\u679c\u4e00\u4e2a \u6811 \u53c2\u5165\u4e00\u4e2a\u8282\u70b9\u4f7f\u5f97 \u7684\u67d0\u4e2a\u5b50\u6811\u7684 \uff0c\u5219\u9700\u8981\u5bf9\u8be5\u5b50\u6811\u8fdb\u884c\u65cb\u8f6c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_226","title":"\u4ee4\u8fd9\u9897\u5b50\u6811\u4e3a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_227","title":"\u5982\u679c \uff0c\u4e14 \u7684\u5de6\u5b50\u6811 \u4e3a \uff0c\u5219\u5bf9 \u8fdb\u884c \u65cb\u8f6c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_228","title":"\u5982\u679c \uff0c\u4e14 \u7684\u5de6\u5b50\u6811 \u4e3a \uff0c\u5219\u5bf9 \u8fdb\u884c \u65cb\u8f6c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_229","title":"\u5982\u679c \uff0c\u4e14 \u7684\u5de6\u5b50\u6811 \u4e3a \uff0c\u5219\u5bf9 \u8fdb\u884c \u65cb\u8f6c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_230","title":"\u5982\u679c \uff0c\u4e14 \u7684\u5de6\u5b50\u6811 \u4e3a \uff0c\u5219\u5bf9 \u8fdb\u884c \u65cb\u8f6c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_231","title":"\u4ee3\u7801\u5b9e\u73b0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_232","title":"\u6570\u636e\u7c7b\u578b\uff1a","text":"<p><pre><code>#define LH 1 //\u5e73\u8861\u56e0\u5b50 1\n#define EH 0 //\u5e73\u8861\u56e0\u5b50 0\n#define RH -1 //\u5e73\u8861\u56e0\u5b50-1\n</code></pre> <pre><code>typedef int AVLElemtype;\ntypedef struct __AVLNode {\nAVLElemtype key;\nint bf; // balence factor\n__AVLNode *lchild, *rchild;\n} AVLNode, *AVLTree;\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#llrr_1","title":"\u5de6\u65cb\u8f6c\u548c\u53f3\u65cb\u8f6c(\u53c2\u7167LL\uff0cRR\u65cb\u8f6c)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_233","title":"\u5de6\u65cb\u8f6c\u6811 \u4ee3\u8868\u7740\uff1a\u4ee5 \u7684\u53f3\u5b69\u5b50\u4e3a\u4e2d\u5fc3\uff0c\u5411\u5de6\u65cb\u8f6c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_234","title":"\u53f3\u65cb\u8f6c\u6811 \u4ee3\u8868\u7740\uff1a\u4ee5 \u7684\u5de6\u5b69\u5b50\u4e3a\u4e2d\u5fc3\uff0c\u5411\u53f3\u65cb\u8f6c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_235","title":"\u5de6\u5e73\u8861\u548c\u53f3\u5e73\u8861","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#lllrrrrl","title":"\u6839\u636e\u603b\u7ed3\u53ef\u77e5\uff0c\u5927\u4f53\u4e0a\u53ef\u4ee5\u5206\u6210\u5de6\u5e73\u8861(LL,LR)\u548c\u53f3\u5e73\u8861(RR,RL)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_236","title":"\u5de6\u5e73\u8861","text":"<p><pre><code>#include \"AVLTree.h\"\n</code></pre> <pre><code>void LeftRotate(AVLTree *T) {\nAVLTree Rchild = (*T)-&gt;rchild; // Rchild\u4ee3\u8868T\u7684\u53f3\u5b69\u5b50\n(*T)-&gt;rchild = Rchild-&gt;lchild; //\u53c2\u7167RR\u65cb\u8f6c\nRchild-&gt;lchild = *T; //\u65cb\u8f6c\u540eT\u6210\u4e3aRchild\u7684\u5de6\u5b69\u5b50(\u5b9a\u74063)\n*T = Rchild;\n//! \u4e0a\u884c\u4ee3\u7801\u4e0d\u53ef\u7701\u7565\uff0c\u5982\u679c\u7701\u7565\uff0c\u5219\u53ea\u6539\u52a8\u4e86\u8282\u70b9\u95f4\u7684\u5173\u7cfb\uff0c\u800c\u672a\u6539\u53d8\u6307\u9488\u4e4b\u95f4\u7684\u5173\u7cfb\n}\n</code></pre> <pre><code>void RightRotate(AVLTree *T) {\nAVLTree Lchild = (*T)-&gt;lchild;\n(*T)-&gt;lchild = Lchild-&gt;rchild;\nLchild-&gt;rchild = *T;\n*T = Lchild;\n}\n</code></pre> <pre><code>void LeftBalance(AVLTree *T) {\nAVLTree L = (*T)-&gt;lchild; // L-&gt;bf\u7edd\u5bf9\u4e0d\u53ef\u80fd\u4e3aEH(\u5b9a\u74061)\nAVLTree Lr; // T\u7684\u5de6\u5b69\u5b50\u7684\u53f3\u5b69\u5b50\nswitch (L-&gt;bf) {\n// LL \u65cb\u8f6c\ncase LH:\n//! \u5b9a\u7406 2\n(*T)-&gt;bf = L-&gt;bf = EH;\n//! \u6b64\u884c\u7684\u4e0a\u4e0b\u4e24\u884c\u4e0d\u53ef\u5bf9\u8c03\nRightRotate(T);\nbreak;\ncase RH:\n// LR\u65cb\u8f6c\nLr = L-&gt;rchild; //\nswitch (Lr-&gt;bf) {\ncase LH:\n//\u5b9a\u7406 8\n(*T)-&gt;bf = RH;\nL-&gt;bf = EH;\nbreak;\ncase EH:\n//\u5b9a\u7406 6\n(*T)-&gt;bf = L-&gt;bf = EH;\nbreak;\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_237","title":"\u53f3\u5e73\u8861","text":"<p><pre><code>case RH:\n//\u5b9a\u7406 7\n(*T)-&gt;bf = EH;\nL-&gt;bf = LH;\nbreak;\n}\n//\u6839\u636e\u5b9a\u7406 6 \uff0c 7 \uff0c 8 \u53ef\u77e5\uff0c\u65cb\u8f6c\u540eLr\u7684BF\u5fc5\u5b9a\u4e3a 0\nLr-&gt;bf = EH;\nLeftRotate(&amp;(*T)-&gt;lchild);\nRightRotate(T);\nbreak;\n}\n}\n</code></pre> <pre><code>// \u548c\u5de6\u5e73\u8861\u540c\u7406\nvoid RightBalance(AVLTree *T) {\nAVLTree R = (*T)-&gt;rchild;\nAVLTree Rl;\nswitch (R-&gt;bf) {\ncase RH:\n(*T)-&gt;bf = R-&gt;bf = EH;\nLeftRotate(T);\nbreak;\ncase LH: {\nRl = R-&gt;lchild; //\nswitch (Rl-&gt;bf) {\ncase LH:\n(*T)-&gt;bf = EH;\nR-&gt;bf = RH;\nbreak;\ncase EH:\n(*T)-&gt;bf = R-&gt;bf = EH;\nbreak;\ncase RH:\n(*T)-&gt;bf = LH;\nR-&gt;bf = EH;\nbreak;\n}\nRl-&gt;bf = EH;\nRightRotate(&amp;(*T)-&gt;rchild);\nLeftRotate(T);\n}\n}\n}\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_238","title":"\u63d2\u5165\u8282\u70b9\u548c\u53ca\u65f6\u5e73\u8861","text":"<p><pre><code>//! \u5168\u5c40\u53d8\u91cftaller\u8bb0\u5f55\u9ad8\u5ea6\u662f\u5426\u53d1\u751f\u53d8\u5316\uff0c\u5982\u679c\u672a\u53d1\u751f\u53d8\u5316\u4e3afalse\uff0c\u53d1\u751f\u5219true\nbool __taller = false;\nvoid Insert_AVL(AVLTree *T, AVLElemtype key, bool *taller) {\n// T\u4e3a\u8981\u63d2\u5165\u8282\u70b9\u7684\u53cc\u4eb2\u8282\u70b9\uff0ckey\u4e3a\u8981\u63d2\u5165\u6570\u636e\u7684\u503c\n//\u82e5T\u4e3a\u7a7a\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u8282\u70b9\uff0c\u5e76\u521d\u59cb\u5316\nif (!(*T)) {\n*T = (AVLTree)malloc(sizeof(AVLNode));\n(*T)-&gt;lchild = (*T)-&gt;rchild = NULL;\n(*T)-&gt;bf = EH;\n(*T)-&gt;key = key;\n*taller = true;\n}\nif (key &lt; (*T)-&gt;key) {\n//\u5982\u679c\u63d2\u5165\u503c\u5c0f\u4e8eT\u7684key\u503c\uff0c\u5219\u9012\u5f52T\u7684\u5de6\u5b50\u6811\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2aNULL\u8282\u70b9\nInsert_AVL(&amp;(*T)-&gt;lchild, key, taller);\n//\u5224\u65ad\u6811\u662f\u5426\u53d8\u9ad8\u4e86\nif (*taller) {\n//\u4ee5T\u4e3a\u6839\u63d2\u5165\u8282\u70b9\uff0c\u5219T\u7684bf\u53d1\u751f\u53d8\u5316\nswitch ((*T)-&gt;bf) {\ncase LH:\n// T\u7684bf == -1\uff0c\u5411T\u7684\u5de6\u5b69\u5b50\u63d2\u5165\u8282\u70b9\u5219T\u7684bf = 2\uff0c\u9700\u8981\u5de6\u5e73\u8861\nLeftBalance(T);\n*taller = false;\n//\u7ecf\u8fc7\u5e73\u8861\u540etaller = false\uff0c\u56e0\u4e3aT\u7ecf\u8fc7\u5de6\u8c03\u6574\u540e\uff0c\u53d8\u5f97\u5e73\u8861\u4e86\nbreak;\ncase EH:\n// \u5982\u679cT\u7684bf == 0\uff0c\u5411T\u7684\u5de6\u5b69\u5b50\u63d2\u5165\u8282\u70b9\uff0c\u5219T\u7684bf = 1\n(*T)-&gt;bf = LH;\n//\u6b64\u65f6T\u7684\u9ad8\u5ea6\u53d1\u751f\u53d8\u5316\n*taller = true;\nbreak;\ncase RH:\n// \u5982\u679cT\u7684bf == -1\uff0c\u5411T\u7684\u5de6\u5b69\u5b50\u63d2\u5165\u8282\u70b9\uff0c\u5219T\u7684bf = 0\n(*T)-&gt;bf = EH;\n//\u9ad8\u5ea6\u672a\u53d1\u751f\u53d8\u5316\n*taller = false;\nbreak;\n}\n}\n} else {\n//\u548c\u4e0a\u9762\u540c\u7406\nInsert_AVL(&amp;(*T)-&gt;rchild, key, taller);\n</code></pre> <pre><code>if (*taller) {\nswitch ((*T)-&gt;bf) {\ncase LH:\n(*T)-&gt;bf = EH;\n*taller = false;\nbreak;\ncase EH:\n(*T)-&gt;bf = RH;\n*taller = true;\nbreak;\ncase RH:\nRightBalance(T);\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_239","title":"\u6d4b\u8bd5\u4ee3\u7801","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#output","title":"output:","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#hash-table_2","title":"\u54c8\u5e0c\u8868(Hash Table)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_240","title":"\u8bb0\u5f55\u5b58\u50a8\u4f4d\u7f6e\u4e0e\u5173\u952e\u5b57\u4e4b\u95f4\u5b58\u5728\u5bf9\u5e94\u5173\u7cfb","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_241","title":"\u7528 \u8868\u793a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_242","title":"\u4f18\u70b9\uff1a\u67e5\u627e\u6548\u7387\u9ad8","text":"<p><pre><code>*taller = false;\nbreak;\n}\n}\n}\n}\n</code></pre> <pre><code>#include \"AVLTree.h\"\n</code></pre> <pre><code>void Creat_AVL(AVLTree *T);\n</code></pre> <pre><code>extern bool __taller;\nint main(void) {\nAVLTree T = NULL;\nCreat_AVL(&amp;T);\nprintf(\"In-order:\");\nTraverse_Inorder(T);\nprintf(\"\\nPre-order:\");\nTraverse_Preorder(T);\nsystem(\"pause\");\nreturn 0 ;\n}\n// \u8f93\u5165\u6570\u636e\uff1a16 3 7 11 9 26 18 14 15 0\n</code></pre> <pre><code>void Creat_AVL(AVLTree *T) {\n*T = NULL;\nAVLElemtype key;\nscanf(\" %d\", &amp;key);\n// 0 \u4ee3\u8868\u8f93\u5165\u7ed3\u675f\nwhile (key != 0 ) {\nInsert_AVL(T, key, &amp;__taller);\nscanf(\" %d\", &amp;key);\n}\n}\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_243","title":"\u7f3a\u70b9\uff1a\u7a7a\u95f4\u6548\u7387\u4f4e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#hash_1","title":"\u51b2\u7a81\uff1a\u901a\u8fc7Hash\u51fd\u6570\uff0c\u4e0d\u540c\u7684\u5173\u952e\u5b57\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u5730\u5740\u4e0a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#hash_2","title":"hash\u51fd\u6570\u7684\u6784\u9020\u65b9\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_244","title":"\u9700\u8981\u8003\u8651\u7684\u56e0\u7d20\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_245","title":"\u6267\u884c\u901f\u5ea6(\u8ba1\u7b97\u65f6\u95f4)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_246","title":"\u5173\u952e\u5b57\u957f\u5ea6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#hash-table_3","title":"Hash Table\u7684\u5927\u5c0f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_247","title":"\u5173\u952e\u5b57\u7684\u5206\u5e03\u60c5\u51b5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_248","title":"\u671d\u671d\u9891\u7387","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_249","title":"\u4e3b\u8981\u6784\u9020\u65b9\u6cd5 \uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_250","title":"\u76f4\u63a5\u5b9a\u5740\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_251","title":"\u6570\u5b57\u5206\u6790\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_252","title":"\u5e73\u65b9\u53d6\u4e2d\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_253","title":"\u6298\u53e0\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_254","title":"\u9664\u7559\u4f59\u6570\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_255","title":"\u968f\u673a\u6570\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_256","title":"\u76f4\u63a5\u5b9a\u5740\u6cd5 \uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#key_2","title":"\u4f18\u70b9\uff1a\u4ee5\u5173\u952e\u5b57key\u7684\u67d0\u4e2a\u7ebf\u6027\u51fd\u6570\u503c\u4e3a\u6563\u5217\u5730\u5740\uff0c\u4e0d\u4f1a\u4ea7\u751f\u51b2\u7a81","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_257","title":"\u7f3a\u70b9\uff1a\u8981\u5360\u7528\u8fde\u7eed\u5730\u5740\u7a7a\u95f4\uff0c\u7a7a\u95f4\u6548\u7387\u4f4e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_258","title":"\u4f8b","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_259","title":"\u6563\u5217\u51fd\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_260","title":"\u5904\u7406\u51b2\u7a81\u7684\u65b9\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_261","title":"\u9664\u7559\u4f59\u6570\u6cd5\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_262","title":"\u4e3a\u589e\u91cf\u5e8f\u5217 \u8868\u957f\uff0c\u4e14 \u662f\u4e2a \u8d28\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_263","title":"\u5f00\u653e\u5b9a\u5740\u6cd5 \uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_264","title":"\u57fa\u672c\u601d\u60f3\uff1a\u6709\u51b2\u7a81\u65f6\u5c31\u53bb\u5bfb\u627e\u4e0b\u4e00\u4e2a\u7a7a\u7684\u6563\u5217\u5730\u5740\uff0c\u53ea\u8981\u8868\u8db3\u591f\u5927\uff0c\u603b\u80fd\u627e\u5230\u7a7a\u7684\u5730\u5740","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_265","title":"\u5e38\u7528\u65b9\u6cd5\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_266","title":"\u7ebf\u6027\u63a2\u6d4b\u6cd5 \u4e3a \uff0c \uff0c \uff0c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_267","title":"\u4e8c\u6b21\u63a2\u6d4b\u6cd5 \u4e3a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_268","title":"\u4f2a\u968f\u673a\u6570\u63a2\u6d4b\u6cd5 \u4e3a\u4f2a\u968f\u673a\u6570\u6570\u5217","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_269","title":"\u94fe\u5730\u5740\u6cd5\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_270","title":"\u57fa\u672c\u601d\u60f3\uff0c\u76f8\u540c\u6563\u5217\u5730\u5740\u7684\u8bb0\u5f55\u94fe\u6210\u4e00\u5355\u94fe\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_271","title":"\u4f8b\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_272","title":"\u5df2\u77e5\u4e00\u7ec4\u5173\u952e\u5b57\u4e3a \u4ee4","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_273","title":"\u94fe\u5730\u5740\u6cd5\u7684\u4f18\u70b9\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_274","title":"\u975e\u540c\u4e49\u8bcd\u4e0d\u4f1a\u51b2\u7a81\uff0c\u65e0\u805a\u96c6\u73b0\u8c61","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_275","title":"\u94fe\u8868\u4e0a\u7a7a\u95f4\u52a8\u6001\u7533\u8bf7\uff0c\u66f4\u9002\u7528\u4e8e\u8868\u957f\u4e0d\u786e\u5b9a\u7684\u60c5\u51b5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#hash-table_4","title":"\u9664\u7559\u4f59\u6570\u6cd5\u6784\u9020Hash Table","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_276","title":"\u7c7b\u578b\u5b9a\u4e49\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_277","title":"\u521d\u59cb\u5316\u5e76\u6784\u9020\uff1a","text":"<p><pre><code>#define __m 11 // __m\u662f\u8868\u957f\n#define __n 9 // \u5143\u7d20\u4e2a\u6570\n#define NULLKEY 0 // 0\u610f\u5473\u7740\u8868\u7a7a\ntypedef int HashElemType;\ntypedef char HashOther;\ntypedef struct __HashTable {\nHashElemType key;\nHashOther other;\n} HashTable[__m];\n</code></pre> <pre><code>void InitHashTable(HashTable hash) {\nprintf(\"Please input %d integer(s):\", __n);\nint key;\n// \u521d\u59cb\u5316\nmemset(hash, 0 , sizeof(HashTable));\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_278","title":"\u641c\u7d22\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_279","title":"\u67e5\u627e\u6548\u7387\u5206\u6790","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#hash-tableasl","title":"Hash Table\u7684ASL\u53d6\u51b3\u4e8e\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_280","title":"\u6563\u5217\u51fd\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_281","title":"\u5904\u7406\u51b2\u7a81\u7684\u65b9\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_282","title":"\u6563\u5217\u8868\u7684\u88c5\u586b\u56e0\u5b50","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_283","title":"\u8868\u4e2d\u5143\u7d20\u4e2a\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_284","title":"\u8868\u957f \u8d8a\u63a5\u8fd1 \u8bf4\u660e\u53d1\u751f\u51b2\u7a81\u7684\u53ef\u80fd\u6027\u8d8a\u5927","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#hash-table_5","title":"\u6240\u4ee5\u8bf4Hash Table\u7684\u67e5\u627e\u6548\u7387 \u65e2\u4e0d\u662f \u4e5f\u4e0d\u662f","text":"<p><pre><code>for (int i = 1 ; i &lt; __n + 1 ; i++) {\nscanf(\" %d\", &amp;key);\nint m_i = Hash(key);\n</code></pre> <pre><code>if (hash[m_i].key == NULLKEY) {\nhash[m_i].key = key;\n} else {\nfor (int j = 1 ; j &lt; __m; j++) {\nint m_j = Hash(key + j);\n</code></pre> <pre><code>if (hash[m_j].key == NULLKEY) {\nhash[m_j].key = key;\nbreak;\n}\n}\n}\n}\n}\n</code></pre> <pre><code>int Hash_Search(HashTable hash, HashElemType key) {\nint m_i = Hash(key);\n</code></pre> <pre><code>if (hash[m_i].key == NULLKEY)\nreturn - 1 ;\nelse if (hash[m_i].key == key)\nreturn m_i;\nelse {\nfor (int i = 1 ; i &lt; __m; i++) {\nint m_j = Hash(key + i);\nif (hash[m_j].key == NULLKEY)\nreturn - 1 ;\nelse if (hash[m_j].key == key)\nreturn m_j;\n}\nreturn - 1 ;\n}\n}\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_285","title":"\u987a\u5e8f\u67e5\u627e \u6298\u534a\u67e5\u627e \u5206\u5757\u67e5\u627e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_286","title":"\u65f6\u95f4","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_287","title":"\u590d\u6742","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_288","title":"\u5ea6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_289","title":"\u4e0e\u786e\u5b9a\u6240\u5728\u5757\u7684\u67e5\u627e\u65b9\u6cd5\u6709\u5173","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_290","title":"\u7279\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_291","title":"\u7b97\u6cd5\u7b80\u5355\uff0c\u5bf9\u7ed3\u6784\u65e0\u8981","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_292","title":"\u6c42\uff0c\u6548\u7387\u5e95","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_293","title":"\u5bf9\u8868\u7ed3\u6784\u6709\u8981\u6c42\uff0c\u6548","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_294","title":"\u7387\u9ad8","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_295","title":"\u5bf9\u7ed3\u6784\u6709\u4e00\u5b9a\u8981\u6c42\uff0c\u6548\u7387\u4ecb\u4e8e\u987a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_296","title":"\u5e8f\u67e5\u627e\u548c\u6298\u534a\u67e5\u627e\u4e4b\u95f4","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_297","title":"\u9002\u7528","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_298","title":"\u60c5\u51b5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_299","title":"\u4efb\u4f55\u7ed3\u6784\u7684\u7ebf\u6027\u8868\uff0c\u4e0d","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_300","title":"\u7ecf\u5e38\u505a\u63d2\u5165\u548c\u5220\u9664","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_301","title":"\u6709\u5e8f\u7684\u987a\u5e8f\u8868\uff0c\u4e0d\u7ecf","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_302","title":"\u5e38\u505a\u63d2\u5165\u548c\u5220\u9664","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_303","title":"\u5757\u95f4\u6709\u5e8f\uff0c\u5757\u5185\u65e0\u5e8f\u7684\u5faa\u5e8f\u8868\uff0c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_304","title":"\u7ecf\u5e38\u505a\u63d2\u5165\u548c\u5220\u9664","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_305","title":"\u6298\u534a\u67e5\u627e \u4e8c\u53c9\u6392\u5e8f\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_306","title":"\u65f6\u95f4\u590d","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_307","title":"\u6742\u5ea6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_308","title":"\u7279\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_309","title":"\u6709\u5e8f\u7684\u987a\u5e8f\u8868\uff0c\u63d2\u5165\u548c\u5220\u9664\u9700\u8981\u79fb\u52a8","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_310","title":"\u5927\u91cf\u5143\u7d20","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_311","title":"\u7528\u4e8c\u53c9\u94fe\u8868\uff0c\u63d2\u5165\u548c\u5220\u9664\u65e0\u9700\u79fb\u52a8\u5143\u7d20\uff0c\u53ea","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_312","title":"\u9700\u4fee\u6539\u6307\u9488","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_313","title":"\u9002\u7528\u60c5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_314","title":"\u51b5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_315","title":"\u4e0d\u7ecf\u5e38\u63d2\u5165\u5220\u9664 \u7ecf\u5e38\u63d2\u5165\u548c\u5220\u9664","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_316","title":"\u62c9\u94fe\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_317","title":"\u7ebf\u6027\u63a2\u6d4b\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_318","title":"\u968f\u673a\u63a2\u6d4b\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_319","title":"\u51e0\u70b9\u7ed3\u8bba","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_320","title":"\u6563\u5217\u8868\u6280\u672f\u5177\u6709\u5f88\u597d\u7684\u5e73\u5747\u6027\u80fd\uff0c\u4f18\u4e8e\u4e00\u4e9b\u4f20\u7edf\u6280\u672f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_321","title":"\u94fe\u5730\u5740\u6cd5\u4f18\u4e8e\u5f00\u5730\u5740\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_322","title":"\u9664\u7559\u4f59\u6570\u6cd5\u4f5c\u6563\u5217\u51fd\u6570\u4f18\u4e8e\u5176\u4ed6\u7c7b\u578b\u51fd\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_323","title":"\u67e5\u627e\u603b\u7ed3","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_324","title":"\u987a\u5e8f\u67e5\u627e\uff0c\u6298\u534a\u67e5\u627e\uff0c\u5206\u5757\u67e5\u627e\u6bd4\u8f83","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_325","title":"\u6298\u534a\u67e5\u627e\u548c\u4e8c\u53c9\u6392\u5e8f\u6811\u6bd4\u8f83","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_326","title":"\u54c8\u5e0c\u8868:\u5f00\u5730\u5740\u6cd5\u548c\u94fe\u5730\u5740\u6cd5\u6bd4\u8f83","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_327","title":"\u5f00\u5730\u5740\u6cd5 \u94fe\u5730\u5740\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_328","title":"\u7a7a\u95f4 \u65e0\u6307\u9488\u57df\uff0c\u5b58\u50a8\u6548\u7387\u9ad8 \u9644\u52a0\u6307\u9488\u57df","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_329","title":"\u65f6\u95f4\u590d\u6742\u5ea6 \u6709\u4e8c\u6b21\u805a\u96c6\u73b0\u8c61\uff0c\u67e5\u627e\u6548\u7387\u4f4e \u65e0\u4e8c\u6b21\u805a\u96c6\u73b0\u8c61\uff0c\u67e5\u627e\u6548\u7387\u9ad8","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_330","title":"\u63d2\u5165\u5220\u9664 \u4e0d\u6613\u5b9e\u73b0 \u6613\u4e8e\u5b9e\u73b0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_331","title":"\u9002\u7528\u60c5\u51b5 \u8868\u7684\u5927\u5c0f\u56fa\u5b9a\uff0c\u9002\u7528\u4e8e\u8868\u957f\u65e0\u53d8\u5316 \u8282\u70b9\u52a8\u6001\u751f\u6210\uff0c\u9002\u7528\u4e8e\u8868\u957f\u7ecf\u5e38\u53d8\u5316","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_332","title":"\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_333","title":"\u6392\u5e8f\u65b9\u6cd5\u7684\u5206\u7c7b\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_334","title":"\u6309\u6570\u636e\u5b58\u50a8\u4ecb\u8d28\uff1a\u5185\u90e8\u6392\u5e8f\u548c\u5916\u90e8\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_335","title":"\u5185\u90e8\u6392\u5e8f\uff1a\u6570\u636e\u91cf\u4e0d\u5927\uff0c\u6570\u636e\u5728\u5185\u5b58\uff0c\u65e0\u9700\u5185\u5916\u5b58\u4ea4\u6362\u6570\u636e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_336","title":"\u5916\u90e8\u6392\u5e8f\uff1a\u6570\u636e\u91cf\u8f83\u5927\uff0c\u6570\u636e\u5728\u5916\u5b58(\u6587\u4ef6\u6392\u5e8f)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_337","title":"\u5916\u90e8\u6392\u5e8f\u65f6\uff0c\u8981\u5c06\u6570\u636e\u5206\u6279\u8c03\u5165\u5185\u5b58\u6765\u6392\u5e8f\uff0c\u4e2d\u95f4\u7ed3\u679c\u8fd8\u8981\u53ca\u65f6\u5b58\u5165\u5916\u5b58","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_338","title":"\u6309\u6bd4\u8f83\u5668\u4e2a\u6570\uff1a\u4e32\u884c\u6392\u5e8f\u548c\u5e76\u884c\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_339","title":"\u4e32\u884c\u6392\u5e8f\uff1a\u5355\u5904\u7406\u673a(\u540c\u4e00\u65f6\u523b\u6bd4\u8f83\u4e00\u5bf9\u5143\u7d20)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_340","title":"\u5e76\u884c\u6392\u5e8f\uff1a\u591a\u5904\u7406\u673a(\u540c\u4e00\u65f6\u523b\u6bd4\u8f83\u591a\u5bf9\u5143\u7d20)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_341","title":"\u6309\u4e3b\u8981\u64cd\u4f5c\uff1a\u6bd4\u8f83\u6392\u5e8f\u548c\u57fa\u6570\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_342","title":"\u6bd4\u8f83\u6392\u5e8f\uff1a\u7528\u6bd4\u8f83\u7684\u65b9\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_343","title":"\u57fa\u6570\u6392\u5e8f\uff1a\u4ec5\u4ec5\u6839\u636e\u6570\u636e\u672c\u8eab\u7684\u53d6\u503c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_344","title":"\u6309\u8f85\u52a9\u7a7a\u95f4\u6392\u5e8f\uff1a\u539f\u5730\u6392\u5e8f\u548c\u975e\u539f\u5730\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_345","title":"\u539f\u5730\u6392\u5e8f\uff1a\u8f85\u52a9\u7a7a\u95f4\u4e3a \u7684\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_346","title":"\u975e\u539f\u5730\u6392\u5e8f\uff1a\u8f85\u52a9\u7a7a\u95f4\u5927\u4e8e \u7684\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_347","title":"\u6309\u7a33\u5b9a\u6027\uff1a\u7a33\u5b9a\u6392\u5e8f\u548c\u975e\u7a33\u5b9a\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_348","title":"\u7a33\u5b9a\u6392\u5e8f\uff1a\u4efb\u4f55\u6570\u503c\u76f8\u7b49\u7684\u5143\u7d20\uff0c\u6392\u5e8f\u4ee5\u540e\u76f8\u5bf9\u6b21\u5e8f\u4e0d\u53d8","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_349","title":"\u6392\u5e8f\u65b9\u6cd5\u662f\u5426\u7a33\u5b9a\uff0c\u5e76\u4e0d\u80fd\u8861\u91cf\u4e00\u4e2a\u6392\u5e8f\u7b97\u6cd5\u7684\u4f18\u52a3","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_350","title":"\u6309\u81ea\u7136\u6027\uff1a\u81ea\u7136\u6392\u5e8f\u548c\u975e\u81ea\u7136\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_351","title":"\u81ea\u7136\u6392\u5e8f\uff1a\u8f93\u5165\u6570\u636e\u8d8a\u6709\u5e8f\uff0c\u6392\u5e8f\u7684\u901f\u5ea6\u8d8a\u5feb","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_352","title":"\u6392\u5e8f\u7c7b\u578b\u5b9a\u4e49\uff1a","text":"<pre><code>#define SORTSIZE 20\ntypedef int SortType;\ntypedef char SortOther;\ntypedef struct __RecordType {\nSortType key;\nSortOther other;\n} RecordType;\ntypedef struct __RecordList {\nRecordType r[SORTSIZE + 1 ]; //\u6570\u7ec4\u4e2d\u7684 0 \u53f7\u4f4d\u7f6e\u4f5cguard\nint length;\n} RecordList;\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_353","title":"\u76f4\u63a5\u63d2\u5165\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_354","title":"\u82e5\u6709 \u4e2a\u5143\u7d20\u9700\u8981\u8fdb\u884c\u6392\u5e8f\uff0c\u4ee4 \u5230 \u4e3a\u6709\u5e8f\u8868\u975e\u9012\u51cf\uff0c \u5143\u7d20\u4e0e\u8be5\u6709\u5e8f\u8868\u6bd4\u8f83\uff0c\u63d2\u5165\u5230\u9002\u5f53\u4f4d\u7f6e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_355","title":"\u4e3a\u6709\u5e8f\u8868\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c \u4e0e\u8be5\u6709\u5e8f\u8868\u6bd4\u8f83\uff0c\u8fdb\u884c\u63d2\u5165\uff0c\u6b64\u65f6\u6709\u5e8f\u8868\u53d8\u6210 \u5230","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_356","title":"\u4f9d\u6b64\u8fdb\u884c\u63d2\u5165","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_357","title":"\u6b64\u65f6 \u5230 \u4e3a\u975e\u9012\u51cf\u5e8f\u5217","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_358","title":"\u4ee3\u7801\u5b9e\u73b0\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_359","title":"\u6d4b\u8bd5\u4ee3\u7801\uff1a","text":"<p><pre><code>void InsertSort(RecordList *List) {\nfor (int i = 2 ; i &lt;= List-&gt;length; i++) {\n// \u56e0\u4e3a\u6709guard\u6240\u4ee5\uff0ci = 2\uff0c\u800c\u4e0d\u662f i = 1;\nif (List-&gt;r[i].key &lt; List-&gt;r[i - 1 ].key) {\n// \u5224\u65ad\u4e0b\u6807\u4e3ai\u7684\u5143\u7d20\u662f\u5426\u5927\u4e8ei-1\uff0c\u5982\u679c\u5927\u4e8e\u5219\u4e0d\u9700\u8981\u8fdb\u884c\u6392\u5e8f\n// \u5982\u679c\u5c0f\u4e8e\u5219\u9700\u8981\u8fdb\u884c\u5982\u4e0b\u6392\u5e8f\nList-&gt;r[ 0 ].key = List-&gt;r[i].key; //\u8bbe\u7f6eguard\nList-&gt;r[i] = List-&gt;r[i - 1 ]; // \u5411\u540e\u79fb\u52a8\n</code></pre> <pre><code>int j;\nfor (j = i - 2 ; List-&gt;r[ 0 ].key &lt; List-&gt;r[j].key; j--) {\nList-&gt;r[j + 1 ] = List-&gt;r[j];\n}\n// \u5f53\u4e0a\u9762\u5faa\u73af\u7ed3\u675f\u540e\uff0c\u4e0b\u6807\u4e3aj\u7684\u5143\u7d20\u6b64\u65f6\u5c0f\u4e8eguard\uff0c\u5219\u5411j\u7684\u76f4\u63a5\u540e\u7ee7(j+1)\u63d2\u5165\nList-&gt;r[j + 1 ] = List-&gt;r[ 0 ];\n}\n}\n}\n</code></pre> <pre><code>#include \"InsertSort.h\"\n</code></pre> <pre><code>void input(RecordList *RL);\n</code></pre> <pre><code>int main(void) {\nRecordList RL;\nRL.length = 9 ;\ninput(&amp;RL);\nInsertSort(&amp;RL);\n</code></pre> <pre><code>for (int i = 1 ; i &lt;= RL.length; i++) {\nprintf(\"%d \", RL.r[i].key);\n}\n</code></pre> <pre><code>system(\"pause\");\nreturn 0 ;\n}\n// \u8f93\u5165\u6570\u636e\uff1a47 7 29 11 16 92 22 8 3\n</code></pre> <pre><code>void input(RecordList *RL) {\nRecordType *p = RL-&gt;r + 1 ;\nfor (int i = 1 ; i &lt;= RL-&gt;length; i++) {\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_360","title":"\u6027\u80fd\u5206\u6790\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_361","title":"\u6700\u574f\u60c5\u51b5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_362","title":"\u6bd4\u8f83\u7684\u6b21\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_363","title":"\u79fb\u52a8\u7684\u6b21\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_364","title":"\u5e73\u5747\u60c5\u51b5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_365","title":"\u6bd4\u8f83\u6b21\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_366","title":"\u79fb\u52a8\u6b21\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_367","title":"\u6700\u574f\u60c5\u51b5\u4e0b","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_368","title":"\u5e73\u5747","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#binary-insert-sort_1","title":"\u6298\u534a\u63d2\u5165\u6392\u5e8f(Binary Insert Sort)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#right1","title":"\u5728\u76f4\u63a5\u63d2\u5165\u6392\u5e8f\u7684\u57fa\u7840\u4e0a\uff0c\u5bf9\u5df2\u7ecf\u6392\u5e8f\u597d\u7684\u6709\u5e8f\u8868\u8fdb\u884c\u6298\u534a\u64cd\u4f5c\uff0c\u968f\u7740\u6298\u534a\u7684\u8fdb\u884c\uff0cright+1\u5c31\u662f\u63d2\u5165","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_369","title":"\u7684\u4f4d\u7f6e","text":"<p><pre><code>SortType key;\nscanf(\" %d\", &amp;key);\np-&gt;key = key;\np++;\n}\np = NULL;\n}\n</code></pre> <pre><code>void InserSotr_Binary(RecordList *List) {\nfor (int i = 2 ; i &lt;= List-&gt;length; i++) {\nList-&gt;r[ 0 ] = List-&gt;r[i];\nint left = 1 ;\nint right = i - 1 ;\n</code></pre> <pre><code>while (left &lt;= right) {\nint mid = (left + right) / 2 ;\nif (List-&gt;r[ 0 ].key &gt; List-&gt;r[mid].key) {\nleft = mid + 1 ;\n} else {\nright = mid - 1 ;\n}\n}\n</code></pre> <pre><code>for (int j = i - 1 ; j &gt;= right + 1 ; j--) {\nList-&gt;r[j + 1 ] = List-&gt;r[j];\n}\n</code></pre> <pre><code>List-&gt;r[right + 1 ] = List-&gt;r[ 0 ];\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_370","title":"\u6298\u534a\u63d2\u5165\u6027\u80fd\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_371","title":"\u65f6\u95f4\u590d\u6742\u5ea6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_372","title":"\u7a7a\u95f4\u590d\u6742\u5ea6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_373","title":"\u662f\u4e00\u79cd\u7a33\u5b9a\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_374","title":"\u76f4\u63a5\u63d2\u5165\u548c\u6298\u534a\u63d2\u5165\u7684\u6bd4\u8f83","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_375","title":"\u6298\u534a\u63d2\u5165\u7684\u6bd4\u8f83\u6b21\u6570\u548c\u5f85\u6392\u5e8f\u5e8f\u5217\u7684\u521d\u59cb\u6392\u5217\u65e0\u5173\uff0c\u4ec5\u4f9d\u8d56\u5e8f\u5217\u5143\u7d20\u4e2a\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_376","title":"\u6298\u534a\u63d2\u5165\u51cf\u5c11\u4e86\u6bd4\u8f83\u6b21\u6570\uff0c\u4f46\u662f\u6ca1\u6709\u51cf\u5c11\u79fb\u52a8\u6b21\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_377","title":"\u6298\u534a\u63d2\u5165\u5e73\u5747\u6027\u80fd\u4f18\u4e8e\u76f4\u63a5\u63d2\u5165\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_378","title":"\u76f4\u63a5\u63d2\u5165\u5728\u57fa\u672c\u6709\u5e8f\u65f6\uff0c\u6548\u7387\u66f4\u9ad8","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#shells-sort_1","title":"\u5e0c\u5c14\u6392\u5e8f(Shell's Sort)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_379","title":"\u5e0c\u5c14\u6392\u5e8f\u601d\u8def","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_380","title":"\u589e\u91cf\u5e8f\u5217 \u5e76\u4e14","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_381","title":"\u5bf9\u6bcf\u4e2a \u8fdb\u884c\u95f4\u9694\u63d2\u5165\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_382","title":"\u4f8b\u5982","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_383","title":"\u5219\u4f9d\u6b64\u5bf9\u5c06\u8981\u6392\u5e8f\u7684\u5e8f\u5217\u8fdb\u884c\u95f4\u9694\u4e3a \uff0c \uff0c \u7684\u76f4\u63a5\u63d2\u5165\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_384","title":"\u5e0c\u5c14\u6392\u5e8f\u7279\u70b9\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_385","title":"\u79fb\u52a8\u4f4d\u7f6e\u8f83\u5927\uff0c\u8df3\u8dc3\u5f0f\u5730\u63a5\u8fd1\u6392\u5e8f\u540e\u7684\u6700\u7ec8\u4f4d\u7f6e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_386","title":"\u6700\u540e\u4e00\u6b21\u53ea\u9700\u8981\u5c11\u91cf\u79fb\u52a8","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#1_3","title":"\u589e\u91cf\u5e8f\u5217\u5fc5\u987b\u662f\u9012\u51cf\u7684\uff0c\u6700\u540e\u4e00\u4e2a\u5fc5\u987b\u662f 1","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_387","title":"\u589e\u91cf\u5e8f\u5217\u5fc5\u987b\u662f\u4e92\u8d28\u7684","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_388","title":"\u4ee3\u7801\u5b9e\u73b0\uff1a","text":"<p><pre><code>}\n}\n</code></pre> <pre><code>void ShellInsert(RecordList *L, int dk) {\nfor (int i = 1 + dk; i &lt;= L-&gt;length; i++) {\nif (L-&gt;r[i].key &lt; L-&gt;r[i - dk].key) {\nL-&gt;r[ 0 ] = L-&gt;r[i];\nL-&gt;r[i] = L-&gt;r[i - dk];\nint j;\nfor (j = i - ( 2 * dk); j &gt; 0 &amp;&amp; L-&gt;r[ 0 ].key &lt; L-&gt;r[j].key; j -= dk) {\nL-&gt;r[j + dk] = L-&gt;r[j];\n}\nL-&gt;r[j + dk] = L-&gt;r[ 0 ];\n}\n}\n}\n</code></pre> <pre><code>void ShellSort(RecordList *L, int *dt, int t) {\nfor (int i = 0 ; i &lt; t; i++) {\nShellInsert(L, dt[i]);\n}\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_389","title":"\u6d4b\u8bd5\u4ee3\u7801\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_390","title":"\u6548\u7387\u5206\u6790","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_391","title":"\u589e\u91cf\u5e8f\u5217 \uff0c\u76f8\u90bb\u5143\u7d20\u4e92\u8d28","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_392","title":"\u6700\u574f\u60c5\u51b5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_393","title":"\u731c\u60f3","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_394","title":"\u589e\u91cf\u5e8f\u5217","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_395","title":"\u6216","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_396","title":"\u731c\u60f3","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_397","title":"\u6700\u574f\u60c5\u51b5","text":"<p><pre><code>}\n</code></pre> <pre><code>#include \"InsertSort.h\"\n</code></pre> <pre><code>void input(RecordList *RL);\n</code></pre> <pre><code>int main(void) {\nRecordList RL;\nRL.length = 10 ;\nint dt[ 3 ] = { 5 , 3 , 1 };\ninput(&amp;RL);\nShellSort(&amp;RL, dt, 3 );\n</code></pre> <pre><code>for (int i = 1 ; i &lt;= RL.length; i++) {\nprintf(\"%d \", RL.r[i].key);\n}\n</code></pre> <pre><code>system(\"pause\");\nreturn 0 ;\n}\n// \u8f93\u5165\u6570\u636e\uff1a49 38 65 97 76 13 27 49 55 4\n</code></pre> <pre><code>void input(RecordList *RL) {\nRecordType *p = RL-&gt;r + 1 ;\nfor (int i = 1 ; i &lt;= RL-&gt;length; i++) {\nSortType key;\nscanf(\" %d\", &amp;key);\np-&gt;key = key;\np++;\n}\np = NULL;\n}\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_398","title":"\u4ea4\u6362\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_399","title":"\u5192\u6ce1\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_400","title":"\u5192\u6ce1\u6392\u5e8f\u7b97\u6cd5\u6548\u7387\u5206\u6790\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_401","title":"\u6700\u597d\u60c5\u51b5\u6b63\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_402","title":"\u6bd4\u8f83\u6b21\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_403","title":"\u79fb\u52a8\u6b21\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_404","title":"\u6700\u574f\u60c5\u51b5\u9006\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_405","title":"\u6bd4\u8f83\u6b21\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_406","title":"\u79fb\u52a8\u6b21\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_407","title":"\u7efc\u4e0a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_408","title":"\u5192\u6ce1\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_409","title":"\u6700\u597d","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_410","title":"\u6700\u574f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_411","title":"\u5e73\u5747","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_412","title":"\u9700\u8981\u8f85\u52a9\u7a7a\u95f4\u4e00\u4e2a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_413","title":"\u5192\u6ce1\u6392\u5e8f\u662f\u7a33\u5b9a\u7684","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_414","title":"\u5feb\u901f\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_415","title":"\u57fa\u672c\u601d\u8def\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_416","title":"\u9009\u53d6\u5e8f\u5217 \u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20 \u4f5c\u4e3a \uff0c\u4f9d\u6b64\u626b\u63cf\u5e8f\u5217\uff0c\u5982\u679c \u5c0f\u4e8e \u5219\u6392\u5728 \u540e\u9762\uff0c\u53cd\u4e4b\u6392\u5728\u524d\u9762","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_417","title":"\u6b64\u65f6\u4ee5 \u4e3a\u4e2d\u5fc3\uff0c\u5e8f\u5217\u88ab\u5206\u6210\u4e24\u4e2a\u5b50\u5e8f\u5217","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_418","title":"\u4f9d\u6b64\u5bf9 \u8fdb\u884c\u53d6 \u64cd\u4f5c\uff0c\u4ee5\u6b64\u7c7b\u63a8\u76f4\u5230 \u4e2d\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u6b64\u65f6 \u4e3a\u6709\u5e8f\u5e8f\u5217","text":"<pre><code>void BubbleSort(RecordList *L) {\nbool flag = true;\nfor (int i = 1 ; i &lt;= L-&gt;length - 1 &amp;&amp; flag; i++) {\n// \u6ce8\u610f\u6b64\u884cflag\u7684\u4f4d\u7f6e,\u4e0d\u8981\u5199\u5728j\u5faa\u73af\u91cc\u9762\nflag = false;\nfor (int j = 1 ; j &lt;= L-&gt;length - i; j++) {\nif (L-&gt;r[j].key &gt; L-&gt;r[j + 1 ].key) {\n//\u53ea\u8981\u53d1\u751f\u4e00\u6b21\u4ea4\u6362\uff0cflag\u5c31\u4e3atrue\nflag = true;\nRecordType temp = L-&gt;r[j];\nL-&gt;r[j] = L-&gt;r[j + 1 ];\nL-&gt;r[j + 1 ] = temp;\n}\n}\n}\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_419","title":"\u4ee3\u7801\u5b9e\u73b0:","text":"<p><pre><code>//\u627epivot\nint Partition(RecordList *L, int left, int right) {\nL-&gt;r[ 0 ] = L-&gt;r[left];\n</code></pre> <pre><code>while (left &lt; right) {\nwhile (left &lt; right &amp;&amp; L-&gt;r[ 0 ].key &lt;= L-&gt;r[right].key)\n// \u5fc5\u987b&lt;=\uff0c\u5982\u679c\u4e0d\u52a0\u7b49\u4e8e\u53f7\uff0c\u5219\u6b7b\u5faa\u73af\nright--;\nL-&gt;r[left] = L-&gt;r[right];\nwhile (left &lt; right &amp;&amp; L-&gt;r[ 0 ].key &gt;= L-&gt;r[left].key)\nleft++;\nL-&gt;r[right] = L-&gt;r[left];\n}\n//\u6b64\u65f6 left\u548cright\u91cd\u53e0\nL-&gt;r[left] = L-&gt;r[ 0 ];\nreturn left;\n}\n//\u6392\u5e8f\u6a21\u578b\nvoid QSort(RecordList *L, int left, int right) {\nif (left &lt; right) {\n//\u83b7\u53d6pivot\u4f4d\u7f6e\nint pivot = Partition(L, left, right);\n// pivot\u628a\u5e8f\u5217\u5206\u6210\u4e24\u5757\uff0c\u5e76\u5206\u522b\u9012\u5f52\nQSort(L, left, pivot - 1 );\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_420","title":"\u5feb\u901f\u6392\u5e8f\u7b97\u6cd5\u6548\u7387\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_421","title":"\u5e73\u5747\u6548\u7387\u4e3a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_422","title":"\u5feb\u901f\u6392\u5e8f\u4e0d\u662f\u539f\u5730\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_423","title":"\u9700\u8981\u501f\u52a9\u9012\u5f52\u6765\u5b9e\u73b0\uff0c\u8c03\u7528\u6808","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_424","title":"\u5e73\u5747\u60c5\u51b5\u4e0b\u9700\u8981 \u7684\u6808\u7a7a\u95f4","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_425","title":"\u6700\u5feb\u60c5\u51b5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_426","title":"\u5feb\u901f\u6392\u5e8f\u4e0d\u662f\u4e00\u79cd\u7a33\u5b9a\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_427","title":"\u82e5\u5bf9 \u6216 \u8fdb\u884c\u5feb\u901f\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_428","title":"\u4ee5 \u4e3a\u4e2d\u5fc3\uff0c\u5fc5\u7136\u6709\u4e00\u4fa7\u7684\u5b50\u5e8f\u5217\u4e2a\u6570\u4e3a \uff0c\u90a3\u4e48\u6b64\u65f6\u9000\u5316\u6210\u5192\u6ce1\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_429","title":"\u6240\u4ee5\u5feb\u901f\u6392\u5e8f\u4e0d\u9002\u7528\u4e8e\u539f\u672c\u6709\u5e8f\u6216\u57fa\u672c\u6709\u5e8f\u7684\u5e8f\u5217","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_430","title":"\u603b\u7ed3","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_431","title":"\u7684\u9009\u53d6\u76f4\u63a5\u5f71\u54cd\u5feb\u6392\u6027\u80fd","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_432","title":"\u6570\u636e\u6b21\u5e8f\u8d8a\u4e71\uff0c\u5feb\u6392\u8d8a\u5feb\uff0c\u6548\u7387\u8d8a\u9ad8","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_433","title":"\u5feb\u901f\u6392\u5e8f\u4e0d\u662f\u81ea\u7136\u6392\u5e8f\u65b9\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_434","title":"\u6539\u53d8 \u7684\u9009\u53d6\u65b9\u6cd5\uff0c\u81f3\u591a\u53ea\u80fd\u6539\u53d8\u7b97\u6cd5\u5e73\u5747\u60c5\u51b5\u4e0b\u7684\u6548\u7387\uff0c\u65e0\u6cd5\u6539\u53d8\u6700\u5feb\u60c5\u51b5\u4e0b\u7684\u6548\u7387","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_435","title":"\u5373\u6700\u574f\u60c5\u51b5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_436","title":"\u9009\u5219\u6392\u5e8f","text":"<p><pre><code>QSort(L, pivot + 1 , right);\n}\n}\n// \u4e3a\u4e86\u4f7f\u7528\u65b9\u4fbf\uff0c\u5c01\u88c5\u51fd\u6570\nvoid QuickSort(RecordList *L) {\nQSort(L, 1 , L-&gt;length);\n}\n</code></pre> <pre><code>void SelectionSort(RecordList *L) {\nint i, j;\nfor (i = 1 ; i &lt; L-&gt;length; i++) {\nint k = i; // k\u8bb0\u5f55\u6700\u5927\u503c\u6216\u6700\u5c0f\u503c\nfor (j = i + 1 ; j &lt;= L-&gt;length; j++) {\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_437","title":"\u6d4b\u8bd5\u4ee3\u7801","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_438","title":"\u7b97\u6cd5\u6548\u7387\u5206\u6790:","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_439","title":"\u65f6\u95f4\u590d\u6742\u5ea6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_440","title":"\u8bb0\u5f55\u79fb\u52a8\u6b21\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_441","title":"\u6700\u597d\u60c5\u51b5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_442","title":"\u6700\u574f\u60c5\u51b5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_443","title":"\u6bd4\u8f83\u6b21\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_444","title":"\u65e0\u8bba\u5f85\u6392\u5e8f\u5904\u4e8e\u4ec0\u4e48\u72b6\u6001\uff0c\u9009\u5219\u6392\u5e8f\u6240\u9700\u8fdb\u884c\u7684\u6bd4\u8f83\u6b21\u6570\u90fd\u76f8\u540c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_445","title":"\u7b97\u6cd5\u7279\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_446","title":"\u5c31\u9009\u5219\u6392\u5e8f\u672c\u8eab\u6765\u8bb2\uff0c\u662f\u4e00\u79cd\u7a33\u5b9a\u7684\u6392\u5e8f\u65b9\u6cd5\uff0c\u7a33\u5b9a\u53d6\u51b3\u4e8e\u662f\u5426\u5728\u5728\u6bd4\u8f83\u65f6\u52a0\u5165\u7b49\u53f7","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_447","title":"\u53ef\u7528\u4e8e\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_448","title":"\u79fb\u52a8\u8bb0\u5f55\u6b21\u6570\u8f83\u5c11\uff0c\u5f53\u6bcf\u4e00\u8bb0\u5f55\u5360\u7528\u7a7a\u95f4\u8f83\u591a\u65f6\uff0c\u6b64\u65b9\u6cd5\u6bd4\u76f4\u63a5\u63d2\u5165\u6392\u5e8f\u5757","text":"<p><pre><code>if (L-&gt;r[k].key &lt; L-&gt;r[j].key) //\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\nk = j; // k\u8bb0\u5f55\u6700\u5927\u503c\n}\n</code></pre> <pre><code>if (k != i) { //\u5982\u679ck!=i \u8bf4\u660e\u6709\u503c\u6bd4i\u5927\nSortType temp = L-&gt;r[i].key;\nL-&gt;r[i].key = L-&gt;r[k].key;\nL-&gt;r[k].key = temp;\n}\n}\n}\n</code></pre> <pre><code>#include \"ExchangeSort.h\"\n</code></pre> <pre><code>void input(RecordList *RL);\n</code></pre> <pre><code>int main(void) {\nRecordList RL;\nRL.length = 10 ;\ninput(&amp;RL);\nSelectionSort(&amp;RL);\n</code></pre> <pre><code>for (int i = 1 ; i &lt;= RL.length; i++) {\nprintf(\"%d \", RL.r[i].key);\n}\n</code></pre> <pre><code>system(\"pause\");\nreturn 0 ;\n}\n// \u8f93\u5165\u6570\u636e\uff1a49 38 65 97 76 13 27 49 55 4\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_449","title":"\u5806","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_450","title":"\u5806\u5b9a\u4e49","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_451","title":"\u82e5 \u4e2a\u5143\u7d20\u7684\u5e8f\u5217\u4e3a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_452","title":"\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_453","title":"\u5c0f\u6839\u5806\u6216 \u5927\u6839\u5806","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_454","title":"\u4ece\u4e0a\u8ff0\u5b9a\u4e49\u53ef\u77e5\uff0c\u5806\u5b9e\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2a\u5b8c\u5168\u4e8c\u53c9\u6811 \u4e8c\u53c9\u6811\u4e2d\u4efb\u610f\u975e\u53f6\u5b50\u8282\u70b9\u5747\u5c0f\u4e8e\u5927\u4e8e\u5b83\u7684\u5b69\u5b50\u8282\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_455","title":"\u5982\u4e0b\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#1_4","title":"\u5b9a\u74061:","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_456","title":"\u82e5\u6709\u6570\u5217 \u6709 \u4e2a\u5143\u7d20\uff0c\u82e5\u6309\u7167\u6309\u4e0b\u6807 \u5b58\u5165\u4e00\u9897\u6811\u4e2d\uff0c\u5219\u6b64\u9897\u6811\u4e3a\u5b8c\u5168\u4e8c\u53c9\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#2_3","title":"\u5b9a\u74062:","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_457","title":"\u82e5\u6709\u6570\u5217 \u6709 \u4e2a\u5143\u7d20\uff0c\u82e5\u6309\u7167\u6309\u4e0b\u6807 \u5b58\u5165\u4e00\u9897\u5b8c\u5168\u4e8c\u53c9\u6811\u4e2d\uff0c\u4ee4","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_458","title":"\u4e3a\u5806","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_459","title":"\u6839\u636e\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u6027\u8d28\u53ef\u77e5 \u4e3a\u5e8f\u53f7\u6700\u5927\u7684\u975e\u53f6\u5b50\u8282\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_460","title":"\u53f6\u5b50\u8282\u70b9\u672c\u8eab\u4e3a\u5806\uff0c\u6240\u4ee5 \u5230 \u4e3a\u5806","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_461","title":"\u521d\u59cb\u5316\u5806","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_462","title":"\u82e5\u5728\u8f93\u51fa\u5806\u9876\u7684\u6700\u5c0f\u503c\u6700\u5927\u4e4b\u540e\uff0c\u4f7f\u5269\u4f59 \u4e2a\u5143\u7d20\u7684\u5e8f\u5217\u91cd\u65b0\u7ec4\u6210\u4e00\u4e2a\u5806","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_463","title":"\u5219\u5f97\u5230 \u4e2a\u5143\u7d20\u4e2d\u7684\u6b21\u5c0f\u503c\u6b21\u5927\u503c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_464","title":"\u5bf9 \u6267\u884c\u5982\u4e0a\u64cd\u4f5c\uff0c\u5f97\u5230\u4e00\u4e2a\u6709\u5e8f\u5e8f\u5217\uff0c\u6b64\u8fc7\u7a0b\u4e3a\u5806\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_465","title":"\u5806\u8c03\u6574","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_466","title":"\u6839\u636e\u5b9a\u7406 \u53ef\u77e5\uff0c \u5230 \u4e3a\u5806\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u5224\u65ad\u5230 \u662f\u5426\u4e3a\u5806","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_467","title":"\u5982\u679c \u5230 \u4e0d\u4e3a\u5806\uff0c\u9009\u53d6 \u548c \u4ea4\u6362\uff0c\u6b64\u65f6 \u4e3a\u5806","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_468","title":"\u4f46\u662f\u4ea4\u6362\u4e86 \u548c \uff0c\u65e0\u6cd5\u4fdd\u8bc1\u4ea4\u6362\u540e\u7684\u5e8f\u5217\u662f\u5426\u4e3a\u5806\uff0c\u6240\u4ee5\u8fd8\u8981\u7ee7\u7eed\u8c03\u6574","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_469","title":"\u4ee4 \u7ee7\u7eed\u8c03\u6574\uff0c\u76f4\u5230","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_470","title":"\u5806\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_471","title":"\u5806\u521d\u59cb\u5316\u867d\u7136\u5b8c\u6210\u5e76\u4e14\u6709\u5e8f\uff0c\u4f46\u662f \u5230 \u5e76\u4e0d\u662f\u6709\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_472","title":"\u6b64\u65f6\u5806\u9876\u5143\u7d20\u4e3a \u4ea4\u6362\u5806\u9876\u5143\u7d20\u548c \u53f7\u5143\u7d20","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_473","title":"\u5e76\u4e14\u5bf9 \u5230 \u8fdb\u884c\u5806\u8c03\u6574\uff0c\u6b64\u65f6 \u53f7\u5143\u7d20\u4e3a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_474","title":"\u4f9d\u6b64\u7c7b\u63a8\uff0c\u7ee7\u7eed\u4ea4\u6362\u5806\u9876\u548c \uff0c\u5e76\u5bf9 \u5230 \u8fdb\u884c\u5806\u8c03\u6574","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_475","title":"\u76f4\u5230","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_476","title":"\u5806\u6392\u5e8f\u7b97\u6cd5\u6548\u7387\u5206\u6790","text":"<p><pre><code>void HeapAdjust(RecordList *L, int s, int n) {\nRecordType temp = L-&gt;r[s]; // temp\u6682\u5b58\uff0c\u7528\u6765\u4f5c\u54e8\u5175\n</code></pre> <pre><code>for (int j = 2 * s; j &lt;= n; j *= 2 ) {\n//\u6b64\u5904 j&lt;n \u786e\u4fdd\u4e86\u5982\u679cj\u662f\u5e8f\u5217\u6700\u540e\u7684\u5143\u7d20\u4e0d\u8fdb\u884c\u6bd4\u8f83\nif (j &lt; n &amp;&amp; L-&gt;r[j].key &lt; L-&gt;r[j + 1 ].key)\nj++; // j\u8bb0\u5f55\u6700\u5927\u503c\n//\u5982\u679cj\u7684key&lt;=temp \u8bf4\u660etemp\u4e3a\u6839\u7684\u5927\u6839\u5806\nif (L-&gt;r[j].key &lt;= temp.key)\nbreak;\n//\u56e0\u4e3aj.key &gt; s.key \u6240\u4ee5\u628aj\u8d4b\u7ed9s\nL-&gt;r[s] = L-&gt;r[j];\n//! \u6ce8\u610f\u5e76\u4e0d\u9700\u8981\u66f4\u6539j\n// \u56e0\u4e3a\u5f53\u53d1\u751f\u5806\u8c03\u6574\u65f6j\u4f1a\u8d4b\u503c\u7ed9s\uff0c\u5e76\u4e14s=j,\u5373\u518d\u6b21\u5faa\u73af\u53d1\u751f\u5806\u8c03\u6574\u65f6\uff0cs\u53d8\u52a8\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0a\u4e00\u4e2aj\u53d1\n\u751f\u53d8\u52a8\n//\u6240\u4ee5\u4e0d\u7528\u7279\u5730\u7ed9j\u8d4b\u503c\u3002\ns = j;\n}\n//\u5f53\u5faa\u73af\u7ed3\u675f\u518d\u7ed9s\u8d4b\u503c\uff0c\u4e5f\u5c31\u662f\u7ed9\u4e0a\u4e00\u4e2aj\u8d4b\u503c\nL-&gt;r[s] = temp;\n}\n</code></pre> <pre><code>void HeapSort(RecordList *L) {\nInitHeap(L);\nfor (int i = L-&gt;length; i &gt; 1 ; i--) {\nRecordType temp = L-&gt;r[ 1 ];\nL-&gt;r[ 1 ] = L-&gt;r[i];\nL-&gt;r[i] = temp;\nHeapAdjust(L, 1 , i - 1 );\n}\n}\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_477","title":"\u521d\u59cb\u5316\u5806","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_478","title":"\u4ea4\u6362\u5806\u9876\u5143\u7d20\u548c \u5143\u7d20\uff0c\u5e76\u91cd\u65b0\u5806\u8c03\u6574","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_479","title":"\u6240\u4ee5\u5806\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_480","title":"\u5177\u4f53\u63a8\u5bfc\u8fc7\u7a0b\u5728\u4e66\u4e2d\u7b2c\u4e8c\u7248 \u9875","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_481","title":"\u5806\u6392\u5e8f\u7684\u7279\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_482","title":"\u4e0d\u662f\u7a33\u5b9a\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_483","title":"\u53ea\u80fd\u7528\u4e8e\u987a\u5e8f\u7ed3\u6784\uff0c\u4e0d\u80fd\u7528\u4e8e\u94fe\u5f0f\u7ed3\u6784","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_484","title":"\u5806\u6392\u5e8f\u5728\u6700\u574f\u60c5\u51b5\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u4e3a \uff0c\u65e0\u8bba\u5f85\u6392\u5e8f\u5e8f\u5217\u662f\u6b63\u5e8f\u8fd8\u662f\u9006\u5e8f\u90fd\u4e00\u6837","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_485","title":"\u521d\u59cb\u5316\u5806\u65f6\uff0c\u9700\u8981\u6bd4\u8f83\u7684\u6b21\u6570\u8f83\u591a\uff0c\u56e0\u6b64\u8bb0\u5f55\u8f83\u5c11\u65f6\u4e0d\u5b9c\u91c7\u7528\u3002\u5806\u6392\u5e8f\u5728\u6700\u574f\u60c5\u51b5\u4e0b \uff0c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_486","title":"\u76f8\u5bf9\u4e8e\u5feb\u901f\u6392\u5e8f\u6700\u574f\u60c5\u51b5 \u800c\u8a00\u662f\u4e00\u4e2a\u4f18\u70b9\uff0c\u5f53\u8bb0\u5f55\u8f83\u591a\u65f6\u6548\u7387\u9ad8","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_487","title":"\u5176\u4ed6\u7c7b\u578b\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#merge-sort_1","title":"\u5e76\u5f52\u6392\u5e8f Merge Sort","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_488","title":"\u57fa\u672c\u601d\u60f3","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_489","title":"\u82e5\u6709\u5e8f\u5217","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_490","title":"\u5176\u4e2d \u4e3a\u975e\u9012\u51cf\u5e8f\u5217 \u4e5f\u4e3a\u975e\u9012\u51cf\u5e8f\u5217","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_491","title":"\u4f9d\u6b64\u6bd4\u8f83 \u53d6\u8f83\u5c0f\u503c\u653e\u5165\u65b0\u5efa\u5e8f\u5217","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_492","title":"\u4f9d\u6b64\u7c7b\u63a8\u5f97\u5230\u7684\u5e8f\u5217 \u4e3a\u6709\u5e8f\u5e8f\u5217","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_493","title":"\u4f46\u662f\u5982\u679c\u4e00\u4e2a\u6742\u4e71\u65e0\u7ae0\u7684\u5e8f\u5217\u5e94\u8be5\u5982\u4f55\u5e94\u7528","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_494","title":"\u82e5\u6709\u5e8f\u5217","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_495","title":"\u4f9d\u6b64\u5bf9\u8be5\u5e8f\u5217\u8fdb\u884c\u4e8c\u5206\uff0c\u76f4\u5230\u83b7\u5f97\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u5b50\u5e8f\u5217","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_496","title":"\u5982\u4e0b\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_497","title":"\u6bd4\u8f83 \u548c \u8f83\u5c0f\u503c\u653e\u5165 \u5145\u5f53 \uff0c\u8f83\u5927\u503c\u5219\u5145\u5f53 \uff0c\u6b64\u65f6 \u4e3a\u6709\u5e8f\u5e8f\u5217","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_498","title":"\u6309\u7167\u6b64\u65b9\u6cd5\u9012\u5f52\uff0c\u53ef\u4ee5\u5f97\u5230\u6709\u5e8f\u5e8f\u5217","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_499","title":"\u4f8b\u5b50","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_500","title":"\u5b9e\u73b0\u4ee3\u7801","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_501","title":"\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u5e8f\u5217","text":"<p><pre><code>//\u4ee4R\u7684 1 \u5230mid\u4e3a\u6709\u5e8f\u5e8f\u5217\uff0cmid+1\u5230n\u4e3a\u6709\u5e8f\u5e8f\u5217\nvoid Merge(RecordType *R, RecordType *Temp, int left, int mid, int right) {\nint i = left, j = mid + 1 , k = left;\nwhile (i &lt;= mid &amp;&amp; j &lt;= right) {\n//\u5229\u7528\u4e09\u76ee\u8fd0\u7b97\u7b26\u7b80\u5316\u8bed\u53e5\n// &lt;= \u4fdd\u8bc1\u4e86\u7a33\u5b9a\u6027\nTemp[k++] = (R[i].key &lt;= R[j].key? R[i++] : R[j++]);\n}\n</code></pre> <pre><code>while (i &lt;= mid)\nTemp[k++] = R[i++];\nwhile (j &lt;= right)\nTemp[k++] = R[j++];\n}\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_502","title":"\u5206\u5272\u5e8f\u5217\u5e76\u8fdb\u884c\u5408\u5e76","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_503","title":"\u51fd\u6570\u5c01\u88c5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_504","title":"\u7b97\u6cd5\u6548\u7387","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_505","title":"\u65f6\u95f4\u590d\u6742\u5ea6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_506","title":"\u7a7a\u95f4\u590d\u6742\u5ea6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_507","title":"\u662f\u7a33\u5b9a\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_508","title":"\u53ef\u4ee5\u7528\u4e8e\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\uff0c\u4e14\u4e0d\u9700\u8981\u9644\u52a0\u5b58\u50a8\u7a7a\u95f4\uff0c\u4f46\u9012\u5f52\u7684\u5b9e\u73b0\u4ecd\u8981\u9700\u8981\u5f00\u8f9f\u76f8\u5e94\u7684\u5de5\u4f5c\u6808","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_509","title":"\u57fa\u6570\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_510","title":"\u524d\u9762\u7684\u7b97\u6cd5\u90fd\u662f\u57fa\u4e8e\u6bd4\u8f83\uff0c\u800c\u57fa\u6570\u6392\u5e8f\u5219\u4e0d\u9700\u8981\u6bd4\u8f83\uff0c\u901a\u8fc7\u5173\u952e\u5b57\u4e2d\u7684\u4fe1\u606f\u8fdb\u884c\u5206\u7c7b\uff0c\u8fdb\u884c \u5206\u914d \u548c \u91c7","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_511","title":"\u96c6 \u6765\u5b9e\u73b0\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_512","title":"\u5982\u4e0b\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_513","title":"\u5148\u6309\u7167\u4e2a\u4f4d\u6392\u5e8f","text":"<p><pre><code>void MSort(RecordType *R, RecordType *Temp, int left, int right) {\n//\u9012\u5f52\u51fd\u6570\u7684\u51fa\u53e3\u4e3aleft = right = 1 \u548c left = right = mid+1\nif (left &gt;= right)\nreturn;\n</code></pre> <pre><code>int mid = (left + right) &gt;&gt; 1 ;\nMSort(R, Temp, left, mid);\nMSort(R, Temp, mid + 1 , right);\nMerge(R, Temp, left, mid, right);\n//! \u6ce8\u610f\uff1a\u6b64\u51fd\u6570\u7684\u6838\u5fc3\u8bed\u53e5\u4e3a\u4e0b\u884c\u7684\u5faa\u73af\n//! \u6bcf\u4e00\u6b21\u9012\u5f52\u90fd\u9700\u8981\u66f4\u65b0R\u6570\u7ec4\uff0c\u56e0\u4e3a\u8fdb\u884c\u6808\u5e95\u9012\u5f52\u65f6\uff0cR\u5fc5\u987b\u4e3a\u4ee5mid\u4e3a\u4e2d\u5fc3\uff0c\u4e24\u4fa7\u90fd\u662f\u6709\u5e8f\u5e8f\u5217\nfor (int i = left; i &lt; right + 1 ; ++i) {\nR[i] = Temp[i];\n}\n}\n</code></pre> <pre><code>void MergeSort(RecordList *L) {\nRecordType Temp[L-&gt;length + 1 ];\nMSort(L-&gt;r, Temp, 1 , L-&gt;length);\n}\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_514","title":"\u518d\u6309\u7167\u5341\u4f4d\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_515","title":"\u518d\u6309\u767e\u4f4d\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_516","title":"\u6570\u636e\u7c7b\u578b\u5b9a\u4e49","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#3_1","title":"\u91c7\u7528\u9759\u6001\u94fe\u8868\u6765\u5bf9 3 \u4f4d\u6570\u5b57\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_517","title":"\u5206\u914d\u51fd\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_518","title":"\u6536\u96c6\u51fd\u6570","text":"<p><pre><code>#define MAXBIT 3 //\u6392\u5e8f\u7684\u5173\u952e\u5b57\u4e3a 3 \u4f4d\n#define RADIX 10 //\u5bf9 10 \u8fdb\u5236\u8fdb\u884c\u6392\u5e8f\n#define MAX_SPACE 100 //\u6700\u591a\u53ef\u4ee5\u6709 99 \u4e2a\u5f85\u6392\u5e8f\u5143\u7d20\uff0c\u56e0\u4e3a\u6709\u4e00\u4e2a\u5934\u8282\u70b9\nstruct SLCell { //\u5143\u7d20\u7c7b\u578b\nSortType keys[MAXBIT]; //\u5b58\u50a8\u4e2a\u4f4d\uff0c\u5341\u4f4d\uff0c\u767e\u4f4d\nSortOther other; //\u5176\u4ed6\u4fe1\u606f\nint next; //\u5b58\u653e\u4e0b\u4e00\u4e2a\u5143\u7d20\u5728\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\n};\n</code></pre> <pre><code>struct SLList {\nSLCell r[MAX_SPACE]; // r[0]\u4e0d\u5b58\u653e\u6570\u636e\uff0c\u7c7b\u4f3c\u4e8e\u94fe\u8868\u7684\u5934\u6307\u9488\nint bitnumber; //\u8868\u793a\u6b64\u9759\u6001\u94fe\u8868\u5bf9n\u4f4d\u6570\u6392\u5e8f\nint length; //\u8868\u4e2d\u6709\u6548\u5143\u7d20\u4e2a\u6570\n};\ntypedef int RadixArr[RADIX]; //\u7528\u4e8e\u521b\u5efafirst, end \u6570\u7ec4\n</code></pre> <pre><code>void Distrubute(SLCell *r, int i, RadixArr first, RadixArr end) {\n// r\u8868\u793a SLCell\u6570\u7ec4\u7684\u9996\u5730\u5740\uff0ci=0,i=1,i=2 \u5206\u522b\u8868\u793a\u5bf9\u767e\u4f4d\uff0c\u5341\u4f4d\uff0c\u4e2a\u4f4d\u8fdb\u884c\u5206\u914d\n// first\u6570\u7ec4\u5b58\u653e\u9996\u4e2a\u88ab\u5206\u914d\u7684\u4e0b\u6807\uff0cend\u5b58\u653efirst\u6307\u5411\u7684\u6700\u540e\u5143\u7d20\nmemset(first, 0 , sizeof(int) * RADIX); //\u521d\u59cb\u5316\u4e3a 0\nmemset(end, 0 , sizeof(int) * RADIX);\nfor (int p = r[ 0 ].next; p; p = r[p].next) {\n//\u56e0\u4e3ar[0]\u4e3a\u5934\u6307\u9488\uff0c\u6240\u4ee5p\u6307\u5411\u8868\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\nint j = r[p].keys[i]; // j\u4e3a\u4e0b\u6807\uff0c\u7b49\u5f0f\u53f3\u8fb9\u5219\u8868\u793a\u6620\u5c04\u5173\u7cfb\n//\u5982\u679cfirst[j]==0\u8bf4\u660efirst\u6307\u5411\u4efb\u4f55\u5143\u7d20\uff0c\u76f4\u63a5\u628ap\u8d4b\u7ed9first[j]\uff0c\nif (!first[j])\nfirst[j] = p;\nelse {\n// first[j]\u5df2\u7ecf\u6709\u6307\u5411\uff0c\u90a3\u4e48\u9700\u8981\u627e\u5230end[j]\uff0c\u5e76\u628a\u5b83\u4eec\u8fde\u8d77\u6765\nr[end[j]].next = p;\n}\n//\u56e0\u4e3ap\u6307\u5411\u65b0\u52a0\u5165\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u53d8\u6210p\nend[j] = p;\n}\n}\n</code></pre> <pre><code>void Collect(SLCell *r, int i, RadixArr first, RadixArr end) {\n//\u6b64\u65f6\u5206\u914d\u5df2\u7ecf\u5b8c\u6210\uff0c\u9700\u8981\u505a\u7684\u662f\u6309\u987a\u5e8f\u628a\u5206\u914d\u7684\u5143\u7d20\u8fde\u8d77\u6765\uff0c\u5373\u6536\u96c6\nint j = 0 ;\n//\u5bfb\u627e\u7b2c\u4e00\u4e2a\u975e\u7a7a\u7684first\u5b50\u8868\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_519","title":"\u6392\u5e8f\u51fd\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_520","title":"\u521d\u59cb\u5316\u548c\u8f93\u51fa\u51fd\u6570","text":"<p><pre><code>while (!first[j])\nj++;\n//\u6b64\u65f6j\u6307\u5411\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b50\u8868\nr[ 0 ].next = first[j]; //\u8ba9\u5934\u6307\u9488\u6307\u5411\u6b64\u5b50\u8868\nint tail = end[j]; // tail\u4ee3\u8868\u6b64\u5b50\u8868\u6700\u540e\u5143\u7d20\u7684\u4e0b\u6807\n//\u5bfb\u627e\u7b2c 2 \u4e2a\u975e\u7a7a\u5b50\u8868\uff0c\u4f9d\u6b64\u7c7b\u63a8\uff0c\u76f4\u5230j&gt;=Radix\nfor (j = j + 1 ; j &lt; RADIX; j++) {\nif (!first[j])\ncontinue; //\u5982\u679c\u5b50\u8868\u4e3a\u7a7a\u5219\u8df3\u8fc7\nelse { //\u5f53\u4e0d\u4e3a\u7a7a\u65f6\nr[tail].next = first[j]; //\u8ba9\u4e0a\u4e00\u4e2a\u5b50\u8868\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u6307\u5411first[j]\ntail = end[j]; //\u6b64\u65f6\u66f4\u65b0\u5c3e\u90e8\u4e0b\u6807\n}\n}\n//\u5f53\u4e0b\u9762\u5faa\u73af\u7ed3\u675f\u540e\uff0c\u8bf4\u660e\u6536\u96c6\u5b8c\u6bd5\nr[tail].next = 0 ;\n}\n</code></pre> <pre><code>void RadixSort(SLList *L) {\n//\u521b\u5efafirst,end\u6570\u7ec4\uff0c\u4e0d\u9700\u8981\u521d\u59cb\u5316\uff0c\u56e0\u4e3aDistrubute(\u51fd\u6570\u4f1a\u8fdb\u884c\u521d\u59cb\u5316)\nRadixArr first, end;\n//\u56e0\u4e3a\u662f\u9759\u6001\u94fe\u8868\uff0c\u9700\u8981\u66f4\u65b0next\nfor (int i = 0 ; i &lt; L-&gt;length; ++i) {\nL-&gt;r[i].next = i + 1 ;\n}\nL-&gt;r[L-&gt;length].next = 0 ; //\u8bbe\u7f6e\u7ed3\u675f\u8868\u793a 0\n//\u56e0\u4e3a\u662f\u5bf9\u4e09\u4f4d\u6570\u8fdb\u884c\u5206\u914d\uff0c\u4f9d\u6b64\u5bf9\u4e2a\u4f4d\uff0c\u5341\u4f4d\uff0c\u767e\u4f4d\u8fdb\u884c\u5206\u914d\u5e76\u6536\u96c6\nfor (int i = L-&gt;bitnumber - 1 ; i &gt;= 0 ; --i) {\nDistrubute(L-&gt;r, i, first, end);\nCollect(L-&gt;r, i, first, end);\n}\n}\n</code></pre> <pre><code>void Init_Radix_3(SLList *L, int n) {\nint hundreds, tens, ones;\nprintf(\"Please input %d intergers(tree digits):\", n);\nfor (int i = 1 ; i &lt; n + 1 ; ++i) {\nint value;\nscanf(\" %d\", &amp;value);\nones = value % 10 ;\ntens = (value / 10 ) % 10 ;\nhundreds = value / 100 ;\nL-&gt;r[i].keys[ 0 ] = hundreds;\nL-&gt;r[i].keys[ 1 ] = tens;\nL-&gt;r[i].keys[ 2 ] = ones;\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_521","title":"\u6392\u5e8f\u65b9\u6cd5 \u6700\u597d\u60c5\u51b5 \u6700\u574f\u60c5\u51b5 \u5e73\u5747\u60c5\u51b5 \u7a7a\u95f4\u590d\u6742\u5ea6 \u7a33\u5b9a\u6027","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_522","title":"\u76f4\u63a5\u63d2\u5165\u6392\u5e8f \u7a33\u5b9a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_523","title":"\u6298\u534a\u63d2\u5165\u6392\u5e8f \u7a33\u5b9a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_524","title":"\u5e0c\u5c14\u6392\u5e8f \u4e0d\u7a33\u5b9a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_525","title":"\u5192\u6ce1\u6392\u5e8f \u7a33\u5b9a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_526","title":"\u7b80\u5355\u9009\u62e9\u6392\u5e8f \u7a33\u5b9a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_527","title":"\u5feb\u901f\u6392\u5e8f \u4e0d\u7a33\u5b9a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_528","title":"\u5806\u6392\u5e8f \u4e0d\u7a33\u5b9a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_529","title":"\u5f52\u5e76\u6392\u5e8f \u7a33\u5b9a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_530","title":"\u57fa\u6570\u6392\u5e8f \u7a33\u5b9a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_531","title":"\u7b97\u6cd5\u6548\u7387","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_532","title":"\u4ee4\u57fa\u6570\u4e3a \u6709 \u4e2a\u8bb0\u5f55\uff0c\u6bcf\u4e2a\u8bb0\u5f55\u542b\u6709 \u4e2a\u5173\u952e\u5b57\uff0c\u5219\u5206\u914d\u9700\u8981 \uff0c\u6536\u96c6\u5219\u9700\u8981","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_533","title":"\u6240\u4ee5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_534","title":"\u9700\u8981\u4e24\u4e2a\u957f\u5ea6\u4e3a \u7684 \u6570\u7ec4\uff0c\u4e14\u8fd8\u589e\u52a0\u4e86\u4e2a \u4e2a \u5143\u7d20","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_535","title":"\u6240\u4ee5\u7a7a\u95f4\u590d\u6742\u5ea6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_536","title":"\u7b97\u6cd5\u7279\u70b9\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_537","title":"\u7a33\u5b9a\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_538","title":"\u53ef\u7528\u4e8e\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_539","title":"\u53ea\u8981\u57fa\u6570\u9009\u53d6\u5408\u9002\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u7ebf\u6027\u7684\u53ef\u4ee5\u8fbe\u5230","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_540","title":"\u6709\u4e25\u683c\u7684\u4f7f\u7528\u8981\u6c42\uff1a\u9700\u8981\u76f4\u5230\u5404\u7ea7\u5173\u952e\u5b57\u7684\u4e3b\u6b21\u5173\u7cfb\u548c\u53d6\u503c\u8303\u56f4","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_541","title":"\u6392\u5e8f\u603b\u7ed3","text":"<p><pre><code>}\nL-&gt;length = n;\nL-&gt;bitnumber = 3 ;\n}\n</code></pre> <pre><code>void Display_Radix(SLList *L) {\nfor (int p = L-&gt;r[ 0 ].next; p != NULL; p = L-&gt;r[p].next) {\nfor (int i = 0 ; i &lt; L-&gt;bitnumber; i++) {\nprintf(\"%d\", L-&gt;r[p].keys[i]);\n}\nprintf(\" \");\n}\n}\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_542","title":"\u6309\u7167\u65f6\u95f4\u6027\u80fd\u6765\u533a\u5206\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_543","title":"\u6709 \u5feb\u901f\u6392\u5e8f\uff0c\u5f52\u5e76\u6392\u5e8f\uff0c\u5806\u6392\u5e8f\uff0c\u5176\u4e2d\u5feb\u901f\u6392\u5e8f\u6700\u597d","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_544","title":"\u6709 \u76f4\u63a5\u63d2\u5165\u6392\u5e8f\uff0c\u5192\u6ce1\u6392\u5e8f\uff0c\u7b80\u5355\u9009\u62e9\u6392\u5e8f\uff0c\u5176\u4e2d\u76f4\u63a5\u63d2\u5165\u6700\u597d","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_545","title":"\u7279\u522b\u662f\u5bf9\u4e8e\u5173\u952e\u5b57\u8fd1\u4f3c\u6709\u5e8f\u7684\u8bb0\u5f55","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_546","title":"\u53ea\u6709 \u57fa\u6570\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_547","title":"\u5f53\u5f85\u6392\u8bb0\u5f55\u6709\u5e8f\u65f6\uff0c\u76f4\u63a5\u63d2\u5165\u6392\u5e8f\u548c\u5192\u6ce1\u6392\u5e8f\u80fd\u8fbe\u5230 \uff0c\u800c\u5bf9\u4e8e\u5feb\u901f\u6392\u5e8f\u800c\u8a00\uff0c\u8fd9\u662f\u6700\u4e0d\u597d\u7684\u60c5\u51b5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_548","title":"\u6b64\u65f6\u5feb\u901f\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_549","title":"\u7b80\u5355\u9009\u5219\u6392\u5e8f\uff0c\u5806\u6392\u5e8f\uff0c\u5f52\u5e76\u6392\u5e8f\u7684\u6548\u7387\u5e76\u4e0d\u80fd\u6839\u636e\u5173\u952e\u5b57\u7684\u5206\u5e03\u800c\u6539\u53d8","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_550","title":"\u6309\u7a7a\u95f4\u6027\u80fd\u6765\u533a\u5206","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_551","title":"\u6240\u6709\u7b80\u5355\u6392\u5e8f\u65b9\u6cd5\u76f4\u63a5\u63d2\u5165\uff0c\u5192\u6ce1\uff0c\u7b80\u5355\u9009\u62e9\u6392\u5e8f\u548c\u5806\u6392\u5e8f\u4e3a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_552","title":"\u5feb\u901f\u6392\u5e8f\u4e3a \u9700\u8981\u501f\u52a9\u6808","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_553","title":"\u5f52\u5e76\u6392\u5e8f\u9700\u8981\u8f85\u52a9\u7a7a\u95f4\u6700\u591a\uff0c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_554","title":"\u94fe\u5f0f\u57fa\u6570\u6392\u5e8f\u9700\u8981 \uff0c \u6570\u7ec4\u548c \u53d8\u91cf","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_555","title":"\u6309\u7a33\u5b9a\u6027\u6765\u533a\u5206","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/Algorithm/#_556","title":"\u5feb\u901f\u6392\u5e8f\u548c\u5806\u6392\u5e8f\u4e0d\u662f\u7a33\u5b9a\u7684\u65b9\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/","title":"-2","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_1","title":"\u6570\u636e\u7ed3\u6784","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_2","title":"\u5b8f\u5b9a\u4e49","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#1","title":"1. \u7ebf\u6027\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#sequence-list","title":"\u987a\u5e8f\u8868(Sequence List)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_3","title":"\u521d\u59cb\u5316","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_4","title":"\u83b7\u53d6\u5143\u7d20","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_5","title":"\u67e5\u627e\u5143\u7d20","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_6","title":"\u63d2\u5165","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_7","title":"\u5220\u9664","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_8","title":"\u9500\u6bc1\uff0c\u6e05\u7a7a\uff0c\u68c0\u67e5\u4e3a\u7a7a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_9","title":"\u987a\u5e8f\u8868\u7684\u5934\u6587\u4ef6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#single-linked-list","title":"\u5355\u94fe\u8868(Single Linked List)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_10","title":"\u521d\u59cb\u5316","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_11","title":"\u521b\u5efa\u94fe\u8868(\u5934\u63d2\u6cd5)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_12","title":"\u521b\u5efa\u94fe\u8868(\u5c3e\u63d2\u6cd5)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_13","title":"\u83b7\u53d6\u5143\u7d20","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_14","title":"\u67e5\u627e\u5143\u7d20","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_15","title":"\u63d2\u5165\u5143\u7d20","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_16","title":"\u5220\u9664\u5143\u7d20","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_17","title":"\u603b\u7ed3\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7b97\u6cd5\u7684\u4e0d\u540c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_18","title":"\u9500\u6bc1\u94fe\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_19","title":"\u5355\u94fe\u8868\u5934\u6587\u4ef6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#circular-linked-list","title":"\u5faa\u73af\u94fe\u8868(Circular Linked List)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#double-linked-list","title":"\u53cc\u5411\u94fe\u8868(Double Linked List)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_20","title":"\u521d\u59cb\u5316","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_21","title":"\u521b\u5efa\u53cc\u5411\u94fe\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_22","title":"\u63d2\u5165\u548c\u5220\u9664","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_23","title":"\u7ebf\u6027\u8868\u73a9\u5177","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_24","title":"\u7ebf\u6027\u8868\u5408\u5e76","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_25","title":"\u6709\u5e8f\u8868\u5408\u5e76(\u5e76\u5f52\u6392\u5e8f\u7684\u57fa\u7840)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_26","title":"\u6709\u5e8f\u94fe\u8868\u5408\u5e76","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#and","title":"\u591a\u9879\u5f0f\u521b\u5efa and \u591a\u9879\u5f0f\u76f8\u52a0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#2-stack-and-queue","title":"2. \u6808\u548c\u961f\u5217(Stack and Queue)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#sequence-stack","title":"\u987a\u5e8f\u6808(Sequence Stack)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_27","title":"\u6808\u7684\u7c7b\u578b\u5b9a\u4e49","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_28","title":"\u6808\u7684\u521d\u59cb\u5316","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#push","title":"\u5165\u6808(Push)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#pop","title":"\u51fa\u6808(Pop)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_29","title":"\u6808\u7684\u5176\u4ed6\u64cd\u4f5c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_30","title":"\u6d4b\u8bd5\u4ee3\u7801","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#linked-stack","title":"\u94fe\u6808(Linked Stack)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_31","title":"\u94fe\u6808\u7684\u7c7b\u578b\u5b9a\u4e49","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_32","title":"\u94fe\u6808\u521d\u59cb\u5316","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#push_1","title":"\u94fe\u6808Push","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#pop_1","title":"\u94fe\u6808Pop","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_33","title":"\u94fe\u6808\u7684\u5176\u4ed6\u64cd\u4f5c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_34","title":"\u6d4b\u8bd5\u4ee3\u7801","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#stackh","title":"Stack.h","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_35","title":"\u6808\u4e0e\u9012\u5f52","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_36","title":"\u51fd\u6570\u7684\u8c03\u7528\u8fc7\u7a0b","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_37","title":"\u5faa\u73af\u961f\u5217","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_38","title":"\u987a\u6362\u961f\u5217\u521d\u59cb\u5316","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_39","title":"\u987a\u6362\u961f\u5217\u5165\u961f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_40","title":"\u5faa\u73af\u961f\u5217\u51fa\u961f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_41","title":"\u5faa\u73af\u961f\u5217\u5176\u4ed6\u64cd\u4f5c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_42","title":"\u6d4b\u8bd5\u4ee3\u7801","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_43","title":"\u94fe\u961f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_44","title":"\u94fe\u961f\u521d\u59cb\u5316","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_45","title":"\u94fe\u961f\u5165\u961f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_46","title":"\u94fe\u961f\u51fa\u961f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_47","title":"\u6808\u548c\u961f\u5217\u73a9\u5177","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_48","title":"\u8fdb\u5236\u8f6c\u5316","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_49","title":"\u62ec\u53f7\u7684\u5339\u914d","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#10","title":"10 \u4ee5\u5185\u7684\u8ba1\u7b97\u5668","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#3","title":"3. \u5b57\u7b26\u4e32\uff0c\u6570\u7ec4\uff0c\u5e7f\u4e49\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_50","title":"\u5b57\u7b26\u4e32\u5339\u914d","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#bfbrute-force","title":"BF\u7b97\u6cd5(Brute Force)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#kmp","title":"KMP\u7b97\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#next","title":"\u6c42next\u6570\u7ec4","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_51","title":"\u5b57\u7b26\u4e32\u5339\u914d\u73a9\u5177","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_52","title":"\u6570\u7ec4","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#generalized-list","title":"\u5e7f\u4e49\u8868(Generalized List)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#4","title":"4. \u6811\u3001\u4e8c\u53c9\u6811\u3001\u68ee\u6797","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_53","title":"\u5b9a\u4e49","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_54","title":"\u6811\u7684\u57fa\u672c\u672f\u8bed","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_55","title":"\u4e8c\u53c9\u6811\u7684\u5b9a\u4e49","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_56","title":"\u4e8c\u53c9\u6811\u7684\u6027\u8d28","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_57","title":"\u4e8c\u53c9\u6811\u5b9a\u7406","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_58","title":"\u5b8c\u5168\u4e8c\u53c9\u6811\u6027\u8d28\u53ca\u5b9a\u7406","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_59","title":"\u94fe\u5f0f\u4e8c\u53c9\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_60","title":"\u5b58\u50a8\u7ed3\u6784","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_61","title":"\u904d\u5386\u65b9\u5f0f(\u9012\u5f52)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_62","title":"\u904d\u5386\u65b9\u5f0f(\u975e\u9012\u5f52)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_63","title":"\u5148\u5e8f\u904d\u5386\u521b\u5efa\u4e8c\u53c9\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_64","title":"\u6d4b\u8bd5(\u521b\u5efa\uff0c\u904d\u5386)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_65","title":"\u5c42\u6b21\u904d\u5386\u7b97\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_66","title":"\u590d\u5236\u4e8c\u53c9\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_67","title":"\u6c42\u6df1\u5ea6\u548c\u8282\u70b9\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_68","title":"\u9500\u6bc1\u4e8c\u53c9\u6811(\u9012\u5f52\u548c\u975e\u9012\u5f52)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_69","title":"\u5934\u6587\u4ef6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#threaded-binary-tree","title":"\u7ebf\u7d22\u4e8c\u53c9\u6811 Threaded Binary Tree(\u4e86\u89e3\u5373\u53ef)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_70","title":"\u6570\u636e\u7c7b\u578b\u5b9a\u4e49","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_71","title":"\u6811\u548c\u68ee\u6797","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_72","title":"\u6811\u7684\u5b58\u50a8\u7ed3\u6784","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#1_1","title":"1. \u53cc\u4eb2\u8868\u793a\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#2","title":"2. \u5b69\u5b50\u94fe\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#3_1","title":"3. \u5b69\u5b50\u5144\u5f1f\u8868\u793a\u6cd5(\u6811\u8f6c\u5316\u4e8c\u53c9\u6811\u7684\u57fa\u7840)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_73","title":"\u6811\u4e0e\u4e8c\u53c9\u6811\u4e4b\u95f4\u76f8\u4e92\u8f6c\u6362","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_74","title":"\u6811\u8f6c\u4e8c\u53c9\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_75","title":"\u4e8c\u53c9\u6811\u8f6c\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_76","title":"\u68ee\u6797\u4e0e\u4e8c\u53c9\u6811\u4e4b\u95f4\u7684\u8f6c\u5316","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_77","title":"\u68ee\u6797\u8f6c\u4e8c\u53c9\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_78","title":"\u4e8c\u53c9\u6811\u8f6c\u68ee\u6797","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_79","title":"\u6811\u548c\u68ee\u6797\u7684\u904d\u5386","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_80","title":"\u6811\u7684\u904d\u5386","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_81","title":"\u68ee\u6797\u7684\u904d\u5386","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_82","title":"\u54c8\u592b\u66fc\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_83","title":"\u672f\u8bed","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_84","title":"\u6700\u4f18\u4e8c\u53c9\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_85","title":"\u6784\u9020\u54c8\u592b\u66fc\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#step","title":"step\u548c\u5b9a\u7406","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_86","title":"\u4ee3\u7801\u5b9e\u73b0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_87","title":"\u54c8\u592b\u66fc\u7f16\u7801","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_88","title":"\u4ee3\u7801\u5b9e\u73b0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_89","title":"\u6574\u4f53\u5934\u6587\u4ef6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#5-graph","title":"5. \u56fe(Graph)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_90","title":"\u56fe\u7684\u5b9a\u4e49\u548c\u672f\u8bed","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_91","title":"\u5b8c\u5168\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#sparse-graphdense-gaph","title":"\u7a00\u758f\u56fe(Sparse Graph)\u548c\u7a20\u5bc6\u56fe(Dense Gaph)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#degree","title":"\u9876\u70b9\u7684\u5ea6(degree)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#path","title":"\u8def\u5f84(path)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#connected-graph","title":"\u8fde\u901a\u56fe(Connected Graph)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#connected-component","title":"\u8fde\u901a\u5b50\u56fe\u548c\u8fde\u901a\u5206\u91cf(Connected Component)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#spanning-tree","title":"\u6781\u5c0f\u8fde\u901a\u5b50\u56fe\u548c\u751f\u6210\u6811(Spanning Tree)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_92","title":"\u56fe\u7684\u5b58\u50a8\u7ed3\u6784","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#adjacency-matrix","title":"\u90bb\u63a5\u77e9\u9635(Adjacency Matrix)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_93","title":"\u65e0\u5411\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_94","title":"\u6709\u5411\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#weighted-graph","title":"\u5e26\u6743\u56fe(\u7f51) weighted Graph","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_95","title":"\u4ee3\u7801\u5b9e\u73b0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_96","title":"\u65e0\u5411\u65e0\u6743\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_97","title":"\u65e0\u5411\u5e26\u6743\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_98","title":"\u6709\u5411\u5e26\u6743\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_99","title":"\u6709\u5411\u65e0\u6743\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#adjacency-list","title":"\u90bb\u63a5\u8868(Adjacency List)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_100","title":"\u4ee3\u7801\u5b9e\u73b0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_101","title":"\u65e0\u5411\u65e0\u6743\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_102","title":"\u90bb\u63a5\u8868\u548c\u90bb\u63a5\u77e9\u9635\u7684\u6bd4\u8f83","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_103","title":"\u5341\u5b57\u94fe\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_104","title":"\u90bb\u63a5\u591a\u91cd\u94fe\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_105","title":"\u56fe\u7684\u904d\u5386","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#depth-first-search","title":"\u6df1\u5ea6\u4f18\u5148 (Depth First Search)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_106","title":"\u904d\u5386\u77e9\u9635","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_107","title":"\u904d\u5386\u90bb\u63a5\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#breadth-first-search","title":"\u5e7f\u5ea6\u4f18\u5148 (Breadth First Search)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_108","title":"\u904d\u5386\u77e9\u9635","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_109","title":"\u904d\u5386\u90bb\u63a5\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_110","title":"\u7b97\u6cd5\u6548\u7387","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#spanning-tree_1","title":"\u6700\u5c0f\u751f\u6210\u6811 Spanning Tree","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#prim","title":"Prim \u7b97\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_111","title":"\u4ee3\u7801\u5b9e\u73b0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_112","title":"\u90bb\u63a5\u77e9\u9635","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_113","title":"\u90bb\u63a5\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#kruskal","title":"Kruskal \u7b97\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_114","title":"\u4ee3\u7801\u5b9e\u73b0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_115","title":"\u90bb\u63a5\u77e9\u9635","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_116","title":"\u90bb\u63a5\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_117","title":"\u6700\u77ed\u8def\u5f84","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#dijkstra","title":"Dijkstra \u7b97\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_118","title":"\u4ee3\u7801\u5b9e\u73b0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_119","title":"\u90bb\u63a5\u77e9\u9635","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#floyd","title":"Floyd\u7b97\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_120","title":"\u4ee3\u7801\u5b9e\u73b0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_121","title":"\u90bb\u63a5\u77e9\u9635","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#directed-acycline-graph","title":"\u6709\u5411\u65e0\u73af\u56fe(Directed Acycline Graph)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#aocaoe","title":"AOC\u548cAOE","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_122","title":"\u62d3\u6251\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_123","title":"\u4ee3\u7801\u5b9e\u73b0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_124","title":"\u90bb\u63a5\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_125","title":"\u5173\u952e\u8def\u5f84","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_126","title":"\u4ee3\u7801\u5b9e\u73b0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_127","title":"\u90bb\u63a5\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_128","title":"\u56fe\u7684\u5934\u6587\u4ef6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#define_graphh","title":"define_Graph.h","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#amgraphh","title":"AMGraph.h","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#algraphh","title":"ALGraph.h","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_129","title":"\u6570\u636e\u7ed3\u6784","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_130","title":"\u5b8f\u5b9a\u4e49","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#defineh","title":"\u5728\u672c\u7b14\u8bb0\u4e2d\u7528\u5230\u7684\u5b8f\u5b9a\u4e49\uff0c\u5934\u6587\u4ef6\u4e3adefine.h","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#1_2","title":"1. \u7ebf\u6027\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#sequence-list_1","title":"\u987a\u5e8f\u8868(Sequence List)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_131","title":"\u7279\u70b9\uff1a\u903b\u8f91\u4e0a\u76f8\u90bb\u7684\u6570\u636e\u5143\u7d20\uff0c\u5176\u7269\u7406\u6b21\u5e8f\u4e5f\u662f\u76f8\u90bb\u7684","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_132","title":"\u7ebf\u6027\u8868\u4e2d\u7b2c \u4e2a\u6570\u636e\u5143\u7d20\u7684\u5b58\u50a8\u4f4d\u7f6e \u548c\u7b2c\u4e2a\u5143\u7d20\u6ee1\u8db3\u4e0b\u5217\u5173\u7cfb","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_133","title":"\u4ee3\u8868\u6bcf\u4e2a\u5143\u7d20\u6240\u5360\u7684\u5b58\u50a8\u5355\u5143","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_134","title":"\u5faa\u5e8f\u8868\u7684\u5b58\u50a8\u7ed3\u6784\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_135","title":"\u521d\u59cb\u5316","text":"<p><pre><code>#ifndef __DEFINE_H\n#define __DEFINE_H\n</code></pre> <pre><code>#define TRUE 1\n#define FALSE 0\n#define OK 1\n#define ERROR 0\n#define INFEASIBLE -\n#define OVERFLOW -\ntypedef int Status;\n</code></pre> <pre><code>#endif\n</code></pre> <pre><code>#define SQLMAXSIZE 100\ntypedef int SqlElemType;\ntypedef struct __Sqlist {\nSqlElemType *base;\nint length;\n} Sqlist;\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_136","title":"\u83b7\u53d6\u5143\u7d20","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_137","title":"\u67e5\u627e\u5143\u7d20","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#aslaverage-search-length","title":"\u5e73\u5747\u67e5\u627e\u957f\u5ea6ASL(Average Search Length)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_138","title":"\u4e3a\u67e5\u627e\u7b2c\u4e2a\u5143\u7d20\u6210\u529f\u7684\u6982\u7387","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_139","title":"\u4e3a\u67e5\u627e\u7b2c\u4e2a\u5143\u7d20\u9700\u8981\u6bd4\u8f83\u7684\u6b21\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_140","title":"\u53ef\u77e5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_141","title":"\u4e3a\u7b2c\u4e2a\u5143\u7d20\u5728\u8868\u4e2d\u4f4d\u7f6e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_142","title":"\u56e0\u6b64\u53ef\u77e5 \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a","text":"<p><pre><code>Status InitSL(Sqlist *L, int length) {\nL-&gt;base = (SqlElemType *)malloc(sizeof(SqlElemType) * SQLMAXSIZE);\nif (!L-&gt;base)\nreturn OVERFLOW;\nL-&gt;length = 0 ;\n</code></pre> <pre><code>for (int i = 1 ; i &lt; length + 1 ; i++) {\nSqlElemType e;\nscanf(\" %d\", &amp;e);\nSqlInsert(L, i, e);\n}\nreturn OK;\n}\n</code></pre> <pre><code>Status GetElem(Sqlist *L, int position, SqlElemType *e) {\nif (position &lt; 1 || position &gt; L-&gt;length)\nreturn ERROR;\n*e = L-&gt;base[position - 1 ];\nreturn OK;\n}\n</code></pre> <pre><code>int LocateElem(Sqlist *L, SqlElemType e) {\nfor (int i = 0 ; i &lt; L-&gt;length; i++) {\nif (e == L-&gt;base[i])\nreturn i + 1 ;\n}\nreturn 0 ; // 0\u4ee3\u8868\u67e5\u627e\u5143\u7d20\u4e0d\u5728\u5faa\u5e8f\u8868\u4e2d\n}\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_143","title":"\u63d2\u5165","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_144","title":"\u8868\u793a\u63d2\u5165\u5143\u7d20\u6240\u9700\u8981\u79fb\u52a8\u5143\u7d20\u6b21\u6570\u7684\u671f\u671b\u503c\u5e73\u5747\u6b21\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_145","title":"\u5047\u8bbe\u5728\u5404\u4e2a\u4f4d\u7f6e\u4e0a\u63d2\u5165\u5143\u7d20\u7684\u6982\u7387\u76f8\u7b49","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_146","title":"\u56e0\u6b64","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_147","title":"\u5220\u9664","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_148","title":"\u9500\u6bc1\uff0c\u6e05\u7a7a\uff0c\u68c0\u67e5\u4e3a\u7a7a","text":"<p><pre><code>Status SqlInsert(Sqlist *L, int position, SqlElemType e) {\nif (position &lt; 1 || position &gt; L-&gt;length + 1 )\nreturn ERROR;\nif (L-&gt;length == SQLMAXSIZE)\nreturn OVERFLOW;\nfor (\nint i = L-&gt;length - 1 ; i &gt;= position - 1 ;\ni--) { //\u6ce8\u610f\u9700\u8981\u628a\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u5168\u90e8\u5411\u53f3\u79fb\u52a8\uff0c\u9700\u8981\u4ece\u6570\u7ec4\u6700\u53f3\u8fb9\u7684\u5143\u7d20\u5f00\u59cb\u79fb\u52a8\nL-&gt;base[i + 1 ] = L-&gt;base[i];\n}\nL-&gt;base[position - 1 ] = e;\nL-&gt;length++;\nreturn OK;\n}\n</code></pre> <pre><code>Status SqlDelete(Sqlist *L, int position, SqlElemType *e) {\nif (position &lt; 1 || position &gt; L-&gt;length)\nreturn ERROR;\nfor (int i = position; i &lt; L-&gt;length; i++) {\nL-&gt;base[i - 1 ] = L-&gt;base[i];\n}\n*e = L-&gt;base[position - 1 ];\nL-&gt;length--;\nreturn OK;\n}\n</code></pre> <pre><code>Status SqlDelete(Sqlist *L, int position, SqlElemType *e) {\nif (position &lt; 1 || position &gt; L-&gt;length)\nreturn ERROR;\nfor (int i = position; i &lt; L-&gt;length; i++) {\nL-&gt;base[i - 1 ] = L-&gt;base[i];\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_149","title":"\u987a\u5e8f\u8868\u7684\u5934\u6587\u4ef6","text":"<p><pre><code>}\n*e = L-&gt;base[position - 1 ];\nL-&gt;length--;\nreturn OK;\n}\n</code></pre> <pre><code>Status SqlDestroy(Sqlist *L) {\nif (!L-&gt;base)\nreturn ERROR;\nelse {\nfree(L-&gt;base);\nreturn OK;\n}\n}\n</code></pre> <pre><code>void SqlClear(Sqlist *L) { L-&gt;length = 0 ; }\n</code></pre> <pre><code>Status SqlIsEmpty(Sqlist *L) {\nif ( 0 == L-&gt;length)\nreturn TRUE;\nelse\nreturn FALSE;\n}\n</code></pre> <pre><code>#include \"define.h\"\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n</code></pre> <pre><code>#ifndef __SEQUENCELIST_H\n#define __SEQUENCELIST_H\n</code></pre> <pre><code>#define SQLMAXSIZE 100\ntypedef int SqlElemType;\ntypedef struct __Sqlist {\nSqlElemType *base;\nint length;\n} Sqlist;\n</code></pre> <pre><code>Status InitSL(Sqlist *L, int length);\nStatus GetElem(Sqlist *L, int position, SqlElemType *e);\nint LocateElem(Sqlist *L, SqlElemType e);\nStatus SqlInsert(Sqlist *L, int position, SqlElemType e);\nStatus SqlDelete(Sqlist *L, int position, SqlElemType *e);\nStatus SqlDestroy(Sqlist *L);\nvoid SqlClear(Sqlist *L);\nStatus SqlIsEmpty(Sqlist *L);\nvoid MergeList(Sqlist *La, Sqlist *Lb);\nvoid Traverse(Sqlist *L);\nvoid MergeList_Seq(Sqlist *La, Sqlist *Lb, Sqlist *Lc);\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#single-linked-list_1","title":"\u5355\u94fe\u8868(Single Linked List)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#n","title":"\u5355\u94fe\u8868\u7531\u5934\u8282\u70b9(\u4e0d\u5b58\u653e\u6570\u636e\u53ea\u5b58\u653e\u4e0b\u4e2a\u8282\u70b9\u7684\u5730\u5740)\u548cn\u4e2a\u8282\u70b9\u7ec4\u6210\uff0c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_150","title":"\u6bcf\u4e2a\u8282\u70b9\u5206\u4e3a\u4e24\u4e2a\u57df\uff1a\u6570\u636e\u57df\u548c\u6307\u9488\u57df(\u5b58\u653e\u4e0b\u4e2a\u8282\u70b9\u7684\u5730\u5740)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#nnull","title":"\u7b2cn\u4e2a\u8282\u70b9\u7684\u6307\u9488\u57df\u4e3aNULL","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_151","title":"\u5982\u4e0b\u56fe\u6240\u793a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_152","title":"\u521d\u59cb\u5316","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_153","title":"\u521b\u5efa\u94fe\u8868(\u5934\u63d2\u6cd5)","text":"<p><pre><code>#endif\n</code></pre> <pre><code>typedef int LlElemtype;\ntypedef struct __LNode {\nLlElemtype data; //\u5b58\u653e\u5355\u4e2a\u8282\u70b9\u7684\u6570\u636e\n__LNode *next; //\u5b58\u653e\u4e0b\u4e2a\u8282\u70b9\u7684\u5730\u5740\n} LNode, *LinkList;\n</code></pre> <pre><code>Status InitLL(LinkList *L) // L\u662f\u4e2a\u4e8c\u7ea7\u6307\u9488\n{\n(*L) = (LinkList)malloc(sizeof(LNode));\n(*L)-&gt;next = NULL;\nreturn OK;\n}\n</code></pre> <pre><code>void CreatLL_H(LinkList L, int n)\n//\u7528\u6b64\u65b9\u6cd5\u521b\u5efa\u7684\u94fe\u8868\uff0c\u904d\u5386\u7684\u987a\u5e8f\u548c\u521b\u5efa\u7684\u987a\u5e8f\u76f8\u53cd\n{\nprintf(\"Please input %d numbers:\", n);\nfor (int i = 0 ; i &lt; n; i++) {\nLinkList p = (LinkList)malloc(sizeof(LNode));\nint data;\nscanf(\" %d\", &amp;data); //%d\u524d\u9762\u7684\u7a7a\u683c\u4ee3\u8868\u6e05\u9664\u5236\u8868\u7b26\u56de\u8f66\u7b49\u7b26\u53f7\np-&gt;data = data;\np-&gt;next = L-&gt;next;\nL-&gt;next = p;\n}\n}\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_154","title":"\u521b\u5efa\u94fe\u8868(\u5c3e\u63d2\u6cd5)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_155","title":"\u83b7\u53d6\u5143\u7d20","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_156","title":"\u67e5\u627e\u5143\u7d20","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_157","title":"\u63d2\u5165\u5143\u7d20","text":"<p><pre><code>void CreatLL_R(LinkList L, int n) {\nprintf(\"Please input %d numbers:\", n);\nLinkList ptail;\nptail = L;\nfor (int i = 0 ; i &lt; n; i++) {\nLinkList pnew;\npnew = (LinkList)malloc(sizeof(LNode));\nint data;\nscanf(\" %d\", &amp;data);\npnew-&gt;data = data;\npnew-&gt;next = NULL;\nptail-&gt;next = pnew;\nptail = pnew;\n}\n}\n</code></pre> <pre><code>Status GetElem(LinkList L, int position, LlElemtype *e) {\nLinkList p = L-&gt;next;\nint i = 1 ; //\u4f7fi\u548cp\u7684\u4f4d\u7f6e\u540c\u6b65\uff0c\u5373i\u4ee3\u8868\u7740p\u5728\u94fe\u8868\u4e2d\u7684\u4f4d\u7f6e\nif (position &lt; 1 || !p)\nreturn ERROR;\nwhile (p &amp;&amp; i &lt; position) { //\u6b64\u5904\u4e0d\u53ef i&lt;=position,\u56e0\u4e3awhile\u6210\u7acb\u65f6\uff0c\u5185\u90e8\u4f1ai++\np = p-&gt;next;\ni++;\n}\n*e = p-&gt;data;\n</code></pre> <pre><code>return OK;\n}\n</code></pre> <pre><code>LinkList LocateElem(LinkList L, LlElemtype e) {\nLinkList p = L-&gt;next;\nwhile (p &amp;&amp; p-&gt;data != e) {\np = p-&gt;next;\n}\nif (!p)\nreturn NULL; //\u5982\u679cp\u7684\u5730\u5740\u4e3a\u7a7a \u8bf4\u660ee\u4e0d\u5728\u94fe\u8868\u4e2d\nreturn p;\n}\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_158","title":"\u60f3\u5728 \uff0c \u4e4b\u95f4\u63d2\u5165 ,\u9700\u8981\u5148\u77e5\u9053 \u8282\u70b9\u7684\u5730\u5740","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_159","title":"\u5982\u56fe\u6240\u793a\uff0c\u5982\u679c\u60f3\u8981\u5728\u4f4d\u7f6e \u63d2\u5165\u8282\u70b9\uff0c\u5219\u9700\u8981\u77e5\u9053\u4f4d\u7f6e \u8282\u70b9\u7684\u4f4d\u7f6e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#getelem","title":"\u6ce8\u610f\u56e0\u4e3a\u63d2\u5165\u64cd\u4f5c\u548cGetElem\u64cd\u4f5c\u4e0d\u540c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#0-pl","title":"\u8981\u4ece 0 \u5f00\u59cb\uff0cp\u8981\u4eceL\u5f00\u59cb","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#1-l-1","title":"\u5982\u679c\u4ece 1 \u548cL\u5f00\u59cb\u7684\u8bdd\uff0c\u65e0\u6cd5\u518d\u4f4d\u7f6e 1 \u63d2\u5165\u5143\u7d20","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_160","title":"\u5220\u9664\u5143\u7d20","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_161","title":"\u60f3\u8981\u5220\u9664 \uff0c\u5219\u5fc5\u987b\u5148\u77e5\u9053 \u7684\u5730\u5740","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#getelem_1","title":"\u6ce8\u610f\u56e0\u4e3a\u63d2\u5165\u64cd\u4f5c\u548cGetElem\u64cd\u4f5c\u4e0d\u540c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#0-pl_1","title":"\u8981\u4ece 0 \u5f00\u59cb\uff0cp\u8981\u4eceL\u5f00\u59cb","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#1-l-1_1","title":"\u5982\u679c\u4ece 1 \u548cL\u5f00\u59cb\u7684\u8bdd\uff0c\u65e0\u6cd5\u518d\u4f4d\u7f6e 1 \u63d2\u5165\u5143\u7d20","text":"<p><pre><code>Status LlInsert(LinkList L, int position, LlElemtype e) {\nLinkList p = L; //\u6ce8\u610f\u56e0\u4e3a\u63d2\u5165\u64cd\u4f5c\u548cGetElem\u64cd\u4f5c\u4e0d\u540c\nint i = 0 ; // i\u8981\u4ece 0 \u5f00\u59cb\uff0cp\u8981\u4eceL\u5f00\u59cb\n//\u5982\u679c\u4ece 1 \u548cL\u5f00\u59cb\u7684\u8bdd\uff0c\u65e0\u6cd5\u518d\u4f4d\u7f6e 1 \u63d2\u5165\u5143\u7d20\nwhile (p &amp;&amp; i &lt; position - 1 ) { //\u67e5\u627e\u63d2\u5165\u8282\u70b9\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u8282\u70b9\ni++;\np = p-&gt;next;\n}\nif (!p || i &gt; position - 1 )\nreturn ERROR;\n</code></pre> <pre><code>LinkList pnew = (LinkList)malloc(sizeof(LNode));\npnew-&gt;data = e;\npnew-&gt;next = p-&gt;next;\np-&gt;next = pnew;\nreturn OK;\n}\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_162","title":"\u603b\u7ed3\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7b97\u6cd5\u7684\u4e0d\u540c","text":"<p><pre><code>Status LlDelete(LinkList L, int position, LlElemtype *e) {\nLinkList p = L;\nint i = 0 ;\n</code></pre> <pre><code>while (p &amp;&amp; i &lt; position - 1 ) {\n//\u67e5\u627eposision-1\u4f4d\u7f6e\u8282\u70b9\u7684\u5730\u5740\ni++;\np = p-&gt;next;\n}\nif (i &gt; position - 1 || !p || !p-&gt;next)\nreturn ERROR;\n//\u6ce8\u610f\u662f \u591a\u589e\u52a0\u4e86\u5224\u65ad\u6761\u4ef6!(p-&gt;next) \u5f53\u8282\u70b9\u6570\u4e3an\uff0c\u5220\u9664\u7684\u4f4d\u7f6e\u4e3an+1\u65f6\u4f1a\u8fd4\u56deerror\n</code></pre> <pre><code>LinkList pfree = p-&gt;next;\n*e = pfree-&gt;data;\np-&gt;next = pfree-&gt;next; //\u6b64\u5904\u53ef\u6539\u5199\u6210 p-&gt;next = p-&gt;next-&gt;next;\nfree(pfree);\nreturn OK;\n}\n</code></pre> <pre><code>while (p){\np = p-&gt;next;\n}//\u6700\u7ec8p\u7684\u503c\u4e3aNULL\n</code></pre> <pre><code>while(p-&gt;next){\np = p-&gt;next;\n}//\u6700\u7ec8p\u7684\u503c\u4e3a\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u7684\u5730\u5740\n//---------------------\u63d2\u5165----------------------\n//\u5982\u679c\u63d2\u5165\u64cd\u4f5c\u7684position\u4e0d\u5408\u6cd5\uff0c\u5373position &gt; n+1(n\u4e3a\u94fe\u8868\u957f\u5ea6)\uff0c\u90a3\u4e48p\u4e00\u5b9a\u4f1a\u6307\u5411NULL\uff0c\u6b64\u65f6\u6309\u7167\n\u9000\u51fa\u6761\u4ef6!p\u53ef\u4ee5\u8fd4\u56deERROR\nif (!p || i&gt;position- 1 ) return ERROR;\n//\u4f46\u662f\u5982\u679c\u91c7\u7528:\nwhile(p-&gt;next)\n//\u5219\u6700\u7ec8\u4f1a\u6307\u5411\u94fe\u8868\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u5373\u4f7fposition\u4e0d\u5408\u6cd5\uff0c\u90a3\u4e48\u4e5f\u4f1a\u5728\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u540e\u65b9\u63d2\u5165\u65b0\u8282\u70b9\n//\u6240\u4ee5\u4f7f\u7528:\nwhile(p)\n</code></pre> <pre><code>////---------------------\u5220\u9664----------------------\n//\u5982\u679c\u5220\u9664\u64cd\u4f5c\u7684positoin\u4e0d\u5408\u6cd5\uff0c\u5373position&gt;\u94fe\u8868\u957f\u5ea6\uff0cp\u4f1a\u6307\u5411\uff0c\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u7684\u5730\u5740(position ==\nn+1\u65f6)\u6216\u662fNULL(position &gt; n+1)\uff0c\u90a3\u4e48\u4e0b\u9762\u7684\u4ee3\u7801\u4f1a\u51fa\u9519\nLinkList pfree = p-&gt;next;\n//\u5982\u679cp\u6307\u5411\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u6b64\u65f6pfree\u6307\u5411NULL\u3002\u5982\u679cp\u6307\u5411NULL\uff0c\u6b64\u65f6pfree\u6307\u5411\u975e\u6cd5\u7a7a\u95f4(\u4e0d\u53d7\u4e3b\u7a0b\u5e8f\u63a7\n\u5236)\uff0c\u4ece\u800c\u5bfc\u81f4\u4e0b\u9762\u4ee3\u7801\u62a5\u9519\n*e = pfree-&gt;data;\n//\u6240\u4ee5\u9700\u8981\u589e\u52a0\u4e00\u4e2a\u5224\u65ad\u6761\u4ef6\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_163","title":"\u9500\u6bc1\u94fe\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_164","title":"\u5355\u94fe\u8868\u5934\u6587\u4ef6","text":"<p><pre><code>if (i&gt;position- 1 || !p || !p-&gt;next) return ERROR;\n//\u5fc5\u987b\u4fdd\u8bc1 !p \u8981\u5728 !p-&gt;next\u7684\u5de6\u8fb9\uff0c\u5373position &gt; n+1 \u7684\u60c5\u51b5\n//\u8fd9\u662f\u56e0\u4e3a\u5982\u679c !p-&gt;next \u5728 !p \u7684\u5de6\u8fb9\uff0c\u5982\u679cp\u6307\u5411NULL\uff0c\u90a3\u4e48NULL-&gt;next\u4f1a\u62a5\u9519\n</code></pre> <pre><code>Status LlDestroy(LinkList *L) {\nif (!(*L))\nreturn ERROR;\nLinkList p = *L;\nwhile (p) {\nLinkList pfree = p; // pfree\u4fdd\u5b58\u8981\u91ca\u653e\u7684\u8282\u70b9\u5730\u5740\np = p-&gt;next; //\u6b64\u884c\u548c\u4e0b\u884c\u7684\u987a\u5e8f\u4e0d\u80fd\u53cd\nfree(pfree);\npfree = NULL;\n}\n*L = NULL;\nreturn OK;\n}\n</code></pre> <pre><code>#include \"define.h\"\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n</code></pre> <pre><code>#ifndef __LINKLIST_H\n#define __LINKLIST_H\n</code></pre> <pre><code>typedef int LlElemtype;\ntypedef struct __LNode {\nLlElemtype data; //\u5b58\u653e\u5355\u4e2a\u8282\u70b9\u7684\u6570\u636e\n__LNode *next; //\u5b58\u653e\u4e0b\u4e2a\u8282\u70b9\u7684\u5730\u5740\n} LNode, *LinkList;\n</code></pre> <pre><code>Status InitLL(LinkList *L);\nvoid CreatLL_H(LinkList L, int n);\nvoid CreatLL_R(LinkList L, int n);\nStatus GetElem(LinkList L, int position, LlElemtype *e);\nLinkList LocateElem(LinkList L, LlElemtype e);\nStatus LlInsert(LinkList L, int position, LlElemtype e);\nStatus LlDelete(LinkList L, int position, LlElemtype *e);\nvoid Traverse(LinkList L);\nStatus LlDestroy(LinkList *L);\nvoid Merge_LinkedList(LinkList *La, LinkList *Lb, LinkList *Lc);\n#endif\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#circular-linked-list_1","title":"\u5faa\u73af\u94fe\u8868(Circular Linked List)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_165","title":"\u5faa\u73af\u94fe\u8868\u7684\u7279\u70b9\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_166","title":"\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\u57df\u6307\u5411\u5934\u8282\u70b9\uff0c\u6574\u4e2a\u8868\u94fe\u5f62\u6210\u4e00\u4e2a\u73af","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_167","title":"\u7531\u6b64\uff0c\u4ece\u8868\u4e2d\u4efb\u610f\u8282\u70b9\u51fa\u53d1\uff0c\u53ef\u4ee5\u627e\u5230\u5176\u4ed6\u8282\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#next_1","title":"\u548c\u5355\u94fe\u8868\u5f88\u50cf\uff0c\u533a\u522b\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u7684next\u57df\u6307\u5411\u5934\u8282\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#double-linked-list_1","title":"\u53cc\u5411\u94fe\u8868(Double Linked List)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_168","title":"\u6709\u4e24\u4e2a\u6307\u9488\u57df\uff0c\u4e00\u4e2a\u6307\u5411\u76f4\u63a5\u524d\u9a71\uff0c\u53e6\u4e00\u4e2a\u6307\u5411\u76f4\u63a5\u540e\u7ee7","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_169","title":"\u6570\u636e\u7c7b\u578b","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_170","title":"\u521d\u59cb\u5316","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_171","title":"\u521b\u5efa\u53cc\u5411\u94fe\u8868","text":"<p><pre><code>typedef int DouLElemtype;\ntypedef struct __DouLinkNode {\nDouLElemtype data;\n__DouLinkNode *prior;\n__DouLinkNode *next;\n} DouLinkNode, *DouLinkList;\n</code></pre> <pre><code>void InitDL(DouLinkList *L) {\n*L = (DouLinkList)malloc(sizeof(DouLinkNode));\n(*L)-&gt;next = NULL;\n(*L)-&gt;prior = NULL;\n}\n</code></pre> <pre><code>void CreatDL_H(DouLinkList L, int length) {\nfor (int i = 0 ; i &lt; length; i++) {\nDouLinkList pnew = (DouLinkList)malloc(sizeof(DouLinkNode));\nint data;\nprintf(\"(for %d)Please input the data:\", i + 1 );\nscanf(\"%d\", &amp;data);\npnew-&gt;data = data;\npnew-&gt;next = L-&gt;next;\npnew-&gt;prior = L;\nL-&gt;next = pnew;\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_172","title":"\u63d2\u5165\u548c\u5220\u9664","text":"<p><pre><code>}\n}\n</code></pre> <pre><code>void CreatDL_R(DouLinkList L, int length) {\nDouLinkList ptail = L;\nfor (int i = 0 ; i &lt; length; i++) {\nDouLinkList pnew = (DouLinkList)malloc(sizeof(DouLinkNode));\nint data;\nprintf(\"(for %d)Please input the data:\", i + 1 );\nscanf(\"%d\", &amp;data);\npnew-&gt;data = data;\npnew-&gt;next = NULL;\npnew-&gt;prior = ptail;\nptail-&gt;next = pnew;\nptail = pnew;\n}\n}\n</code></pre> <pre><code>void DlInsert(DouLinkList L, int position, DouLElemtype e) {\nint i = 0 ;\nDouLinkList p = L;\nwhile (p-&gt;next &amp;&amp; i &lt; position - 1 ) {\ni++;\np = p-&gt;next;\n}\nDouLinkList pnew = (DouLinkList)malloc(sizeof(DouLinkNode));\npnew-&gt;data = e;\npnew-&gt;next = p-&gt;next;\npnew-&gt;prior = p;\np-&gt;next = pnew;\np-&gt;next-&gt;prior = pnew;\n}\n</code></pre> <pre><code>void DlDelete(DouLinkList L, int position, DouLElemtype *e) {\nDouLinkList p = L;\nint i = 0 ;\nwhile (p-&gt;next &amp;&amp; i &lt; position - 1 ) {\np = p-&gt;next;\ni++;\n}\nDouLinkList pfree = p-&gt;next;\n*e = pfree-&gt;data;\np-&gt;next = p-&gt;next-&gt;next;\np-&gt;next-&gt;next-&gt;prior = p;\nfree(pfree);\npfree = NULL;\n}\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_173","title":"\u7ebf\u6027\u8868\u73a9\u5177","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_174","title":"\u7ebf\u6027\u8868\u5408\u5e76","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_175","title":"\u5df2\u77e5\u4e24\u4e2a\u96c6\u5408","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_176","title":"\u6c42\u51fa\u5408\u5e76\u540e\u96c6\u5408","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_177","title":"\u6709\u5e8f\u8868\u5408\u5e76(\u5e76\u5f52\u6392\u5e8f\u7684\u57fa\u7840)","text":"<p><pre><code>void MergeList(Sqlist *La, Sqlist *Lb) {\nfor (int i = 1 ; i &lt; Lb-&gt;length + 1 ; i++) {\nSqlElemType e;\nGetElem(Lb, i, &amp;e);\nif (!LocateElem(La, e)) {\nLa-&gt;base[La-&gt;length++] = e;\n}\n}\n}\n</code></pre> <pre><code>void Traverse(Sqlist *L) {\nfor (int i = 0 ; i &lt; L-&gt;length; i++) {\nprintf(\"%d \", L-&gt;base[i]);\n}\n}\n</code></pre> <pre><code>#include &lt;SequenceList.h&gt;\n</code></pre> <pre><code>int main(void) {\nSqlist La, Lb;\nSqlist *pa = &amp;La;\nSqlist *pb = &amp;Lb;\nInitSL(pa, 4 );\nInitSL(pb, 3 );\n</code></pre> <pre><code>MergeList(pa, pb);\n</code></pre> <pre><code>Traverse(pa);\n</code></pre> <pre><code>system(\"pause\");\nreturn 0 ;\n}\n/*\n7 5 3 11\n2 6 3\n*/\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_178","title":"\u5408\u5e76\u6210\u65b0\u96c6\u5408","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_179","title":"\u6709\u5e8f\u94fe\u8868\u5408\u5e76","text":"<p><pre><code>void MergeList_Seq(Sqlist *La, Sqlist *Lb, Sqlist *Lc) {\nLc-&gt;length = La-&gt;length + Lb-&gt;length;\nSqlElemType *pa = La-&gt;base, *pa_last = pa + La-&gt;length - 1 ;\n// pa\u6307\u5411La-&gt;base\u7684\u9996\u5730\u5740\uff0cpa_last\u6307\u5411base\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u5730\u5740\uff0c\u4e0b\u9762\u540c\u7406\nSqlElemType *pb = Lb-&gt;base, *pb_last = pb + Lb-&gt;length - 1 ;\nSqlElemType *pc = Lc-&gt;base;\n</code></pre> <pre><code>while (pa &lt;= pa_last &amp;&amp; pb &lt;= pb_last) {\n//\u5f53pa&gt;pa_last\u65f6\u8bf4\u660e\uff0c\u6709\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u5df2\u7ecf\u5168\u90e8\u52a0\u5165\u5230Lc\u4e2d\nif (*pa &lt; *pb)\n*(pc++) = *(pa++);\nelse\n*(pc++) = *(pb++);\n}\n</code></pre> <pre><code>while (pa &lt;= pa_last)\n*(pc++) = *(pa++); //\u5224\u65adLa\u7684\u5143\u7d20\u662f\u5426\u5168\u90e8\u52a0\u5165Lc\u4e2d\uff0c\u4e0b\u9762\u540c\u7406\nwhile (pb &lt;= pb_last)\n*(pc++) = *(pb++);\n}\n</code></pre> <pre><code>#include &lt;SequenceList.h&gt;\n</code></pre> <pre><code>int main(void) {\nSqlist La, Lb, Lc;\nInitSL(&amp;La, 4 );\nInitSL(&amp;Lb, 7 );\nInitSL(&amp;Lc, 0 );\n</code></pre> <pre><code>MergeList_Seq(&amp;La, &amp;Lb, &amp;Lc);\nTraverse(&amp;Lc);\n</code></pre> <pre><code>system(\"pause\");\nreturn 0 ;\n}\n/*\n3 5 8 11\n2 6 8 9 11 15 20\n*/\n</code></pre> <pre><code>void Merge_LinkedList(LinkList *La, LinkList *Lb, LinkList *Lc) {\n*Lc = *La; //\u8ba9Lc\u4f7f\u7528La\u7684\u5934\u8282\u70b9\u8fdb\u884c\u5408\u5e76\nLinkList pa = (*La)-&gt;next, pb = (*Lb)-&gt;next; // pa, pb\u5206\u522b\u8868\u793a\u5408\u5e76\u65f6\u6240\u6307\u8282\u70b9\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#and_1","title":"\u591a\u9879\u5f0f\u521b\u5efa and \u591a\u9879\u5f0f\u76f8\u52a0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_180","title":"\u521b\u5efa\u4e00\u4e2a\u591a\u9879\u5f0f\uff0c\u5e76\u6309\u7167\u6307\u6570\u7684\u9ad8\u4f4e\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_181","title":"\u591a\u9879\u5f0f\u7ed3\u6784\u4f53","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_182","title":"\u591a\u9879\u5f0f\u521b\u5efa","text":"<p><pre><code>LinkList pc = *Lc; // pc\u8868\u793aLc\u7684\u5c3e\u8282\u70b9\n</code></pre> <pre><code>while (pa &amp;&amp; pb) {\nif (pa-&gt;data &lt; pb-&gt;data) {\npc-&gt;next = pa;\npc = pa;\npa = pa-&gt;next;\n} else {\npc-&gt;next = pb;\npc = pb;\npb = pb-&gt;next;\n}\n}\npc-&gt;next = pa? pa : pb;\n// pc-&gt;next\u4e0d\u9700\u8981NULL,\u56e0\u4e3a\u5408\u5e76\u65f6\u4e00\u5b9a\u4f1a\u5269\u4e0b\u4e00\u4e32\u8282\u70b9\uff0c\u53ea\u9700\u6307\u5411\u8be5\u5269\u4e0b\u7684\u8282\u70b9\u5c31OK\nfree(*Lb);\n*La = *Lb = NULL;\n}\n</code></pre> <pre><code>#include \"LinkList.h\"\n</code></pre> <pre><code>int main(void) {\nLinkList La, Lb, Lc;\nInitLL(&amp;La), InitLL(&amp;Lb), InitLL(&amp;Lc);\nCreatLL_R(La, 4 );\nCreatLL_R(Lb, 7 );\nMerge_LinkedList(&amp;La, &amp;Lb, &amp;Lc);\n</code></pre> <pre><code>Traverse(Lc);\n</code></pre> <pre><code>system(\"pause\");\nreturn 0 ;\n}\n/*\n3 5 8 11\n2 6 8 9 11 15 20\n*/\n</code></pre> <pre><code>typedef struct __PolyNode {\ndouble coeffcient;\nint exponent;\n__PolyNode *next;\n} PolyNode, *Polynomial;\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#polynomial-q-polynimial-pre","title":"\u6838\u5fc3\u53d8\u91cf\u4e3a Polynomial q; Polynimial pre;","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#whileq-q-exponent-pnew-exponent","title":"\u6838\u5fc3\u8bed\u53e5\u4e3a while(q &amp;&amp; q-&gt;exponent &lt; pnew-&gt;exponent)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_183","title":"\u4e3b\u7a0b\u5e8f","text":"<p><pre><code>void InitPolynomial(Polynomial *p, int length) {\n*p = (Polynomial)malloc(sizeof(PolyNode)); //\u5148\u521d\u59cb\u5316\u5934\u8282\u70b9\n(*p)-&gt;next = NULL;\n</code></pre> <pre><code>printf(\"Please input the coefficient and exponent:\");\nfor (int i = 0 ; i &lt; length; i++) {\nPolynomial pnew = (Polynomial)malloc(sizeof(PolyNode));\nscanf(\" %lf\", &amp;(pnew-&gt;coeffcient));\nscanf(\" %d\", &amp;(pnew-&gt;exponent));\nPolynomial q = (*p)-&gt;next; // q\u4e3a\u6307\u5411\u6bd4pew-&gt;exponent\u5927\u7684\u8282\u70b9\nPolynomial pre = (*p); // pre\u6307\u5411q\u7684\u76f4\u63a5\u524d\u9a71\u8282\u70b9\n</code></pre> <pre><code>while (q &amp;&amp; q-&gt;exponent &lt; pnew-&gt;exponent) { //\u7b2c 1 \u6b21\u7684for\u5faa\u73af\u4e0d\u4f1a\u6267\u884c\n//\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u8282\u70b9\u7684exponent\u5927\u4e8epnew-&gt;exponent,\u5982\u679c\u6ca1\u627e\u5230q\u6307\u5411NULL\npre = q;\nq = q-&gt;next;\n}\npnew-&gt;next = q; //\u56e0\u4e3aq-&gt;exponent &gt; pnew-&gt;exponent\npre-&gt;next = pnew;\n}\n}\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n</code></pre> <pre><code>typedef struct __PolyNode {\ndouble coeffcient;\nint exponent;\n__PolyNode *next;\n} PolyNode, *Polynomial;\n</code></pre> <pre><code>void InitPolynomial(Polynomial *p, int length);\nvoid Traverse(Polynomial P);\nPolynomial AddPolynomial(Polynomial pa, Polynomial pb);\nint main(void) {\nPolynomial p1, p2, p3;\nInitPolynomial(&amp;p1, 3 );\nInitPolynomial(&amp;p2, 4 );\np3 = AddPolynomial(p1, p2);\nTraverse(p1);\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#2-stack-and-queue_1","title":"2. \u6808\u548c\u961f\u5217(Stack and Queue)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#sequence-stack_1","title":"\u987a\u5e8f\u6808(Sequence Stack)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#topbottom","title":"\u6808\u662f\u9650\u5b9a\u4ec5\u5728\u8868\u5c3e\u8fdb\u884c\u63d2\u5165\u6216\u5220\u9664\u64cd\u4f5c\u7684\u7ebf\u6027\u8868\uff0c\u8868\u672b\u7aef\u4e3a\u6808\u9876(Top)\uff0c\u8868\u5934\u79f0\u4e3a\u6808\u9876(Bottom),\u4e0d\u542b\u5143","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_184","title":"\u7d20\u79f0\u4e3a\u7a7a\u6218","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_185","title":"(\u7528\u987a\u5e8f\u8868\u5b58\u50a8\u7684\u6808\u66f4\u5e38\u89c1)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#last-in-first-out-lifo","title":"\u56e0\u6b64\u6808\u53c8\u79f0\u4e3a\u540e\u8fdb\u5148\u51fa(Last in First out, LIFO)\u7684\u7ebf\u6027\u8868\uff0c\u5982\u4e0b\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_186","title":"\u6808\u7684\u7c7b\u578b\u5b9a\u4e49","text":"<pre><code>system(\"pause\");\nreturn 0 ;\n}\n/*\nx^6+2x^2+3x^\n-2x^2+3x^5+2x^6+x^\n---------------------------\nintput:\n1 6 2 2 3 5\n-2 2 3 5 2 6 1 3\n----------------------------\noutput:\n(1.0x^3)+(6.0x^5)+(3.0x^6)\n*/\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_187","title":"\u6808\u7684\u521d\u59cb\u5316","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#top","title":"\u89c2\u5bdf\u4e0a\u56fe\uff0c\u53d1\u73b0top\u6307\u5411\u5185\u5b58\u7a7a\u95f4\u4e0d\u5b58\u653e\u5143\u7d20","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#push_2","title":"\u5165\u6808(Push)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#topbasetop","title":"\u56e0\u4e3atop\u6307\u5411\u7684\u5185\u5b58\u4e0d\u5b58\u653e\u7a7a\u95f4\uff0c\u5f53\u4e3abase\u5206\u914d\u7684\u7a7a\u95f4\u5b58\u6ee1\u5143\u7d20\u65f6\uff0ctop = \u5206\u914d\u7a7a\u95f4\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#1top-base-stacksize","title":"\u5730\u5740+1\uff0c\u6b64\u65f6\u8868\u793a\u6808\u6ee1\uff0c\u5373top-base = stacksize","text":"<p><pre><code>#define MAXSTACK 100\ntypedef char StackElemType; //\u6808\u6570\u636e\u7c7b\u578b\ntypedef struct __SqStack //\u987a\u5e8f\u6808\uff0c\u6700\u5e38\u7528\n{\nStackElemType *base;\nStackElemType *top;\nint stacksize;\n} SqStack;\n</code></pre> <pre><code>Status InitStack(SqStack *S) {\nS-&gt;base = (StackElemType *)malloc(sizeof(StackElemType) * MAXSTACK);\nif (!S-&gt;base)\nexit(OVERFLOW);\nS-&gt;top = S-&gt;base; //\u6808\u9876\u548c\u6307\u5411\u6808\u5e95\nS-&gt;stacksize = MAXSTACK; //\u6808\u7684\u5bb9\u91cf\nreturn OK;\n}\n</code></pre> <pre><code>Status Push(SqStack *S, StackElemType e) {\nif (S-&gt;top - S-&gt;base == S-&gt;stacksize)\nreturn ERROR; //\u8868\u793a\u6b64\u65f6\u6808\u6ee1\n*(S-&gt;top++) = e; // top\u6307\u5411\u5185\u5b58\u5355\u5143\u5b58\u653ee\uff0c\u4e14top\u6307\u5411\u4e0b\u4e00\u4e2a\u5185\u5b58\u5355\u5143\nreturn OK;\n}\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#pop_2","title":"\u51fa\u6808(Pop)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#base-top","title":"\u5f53 base == top \u65f6\uff0c\u8868\u793a\u6808\u7a7a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_188","title":"\u6808\u7684\u5176\u4ed6\u64cd\u4f5c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_189","title":"\u6d4b\u8bd5\u4ee3\u7801","text":"<p><pre><code>Status Pop(SqStack *S, StackElemType *e) {\nif (S-&gt;base == S-&gt;top)\nreturn ERROR; //\u6808\u7a7a\n*e = *(--(S-&gt;top));\nreturn OK;\n}\n</code></pre> <pre><code>Status IsEmpty(SqStack *S) {\nif (S-&gt;base == S-&gt;top)\nreturn TRUE;\nelse\nreturn FALSE;\n}\n</code></pre> <pre><code>Status IsFull(SqStack *S) {\nif (S-&gt;top - S-&gt;base == S-&gt;stacksize)\nreturn TRUE;\nelse\nreturn ERROR;\n}\n</code></pre> <pre><code>StackElemType GetTop(SqStack *S) {\nif (!IsEmpty(S))\nreturn *(S-&gt;top - 1 );\n}\n</code></pre> <pre><code>#include &lt;Stack.h&gt;\n</code></pre> <pre><code>int main(void)\n{\nSqStack S;\nInitStack(&amp;S);\nPush(&amp;S, 'A');\nPush(&amp;S, 'B');\nPush(&amp;S, 'C');\nPush(&amp;S, 'C');\nwhile (!IsEmpty(&amp;S))\n{\nStackElemType e;\nPop(&amp;S, &amp;e);\nprintf(\"%c \", e);\n}\n</code></pre> <pre><code>system(\"pause\");\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#linked-stack_1","title":"\u94fe\u6808(Linked Stack)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#pushpoptop","title":"\u7531\u4e8e\u6808\u7684\u4e3b\u8981\u64cd\u4f5c\u662f\u5bf9\u6808\u9876\u8fdb\u884cPush\u548cPop\uff0c\u6240\u4ee5\u9009\u7528top\u4f5c\u4e3a\u94fe\u8868\u7684\u5934\u8282\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_190","title":"\u94fe\u6808\u7684\u7c7b\u578b\u5b9a\u4e49","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_191","title":"\u94fe\u6808\u521d\u59cb\u5316","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#push_3","title":"\u94fe\u6808Push","text":"<p><pre><code>\u5728\u7b2c\u4e00\u6b21Push\u65f6\uff0c\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684next\u6307\u5411NULL\n</code></pre> <pre><code>return 0 ;\n}\n</code></pre> <pre><code>typedef struct __StackNode //\u94fe\u6808\n{\nStackElemType data;\n__StackNode *next;\n} StackNode, *LinkStack;\n</code></pre> <pre><code>Status InitStack(LinkStack *S) {\n*S = NULL;\n//(*S)-&gt;next = NULL; \u4e0d\u9700\u8981\u6b64\u884c\u4ee3\u7801\nreturn OK;\n}\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#pop_3","title":"\u94fe\u6808Pop","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_192","title":"\u94fe\u6808\u7684\u5176\u4ed6\u64cd\u4f5c","text":"<p><pre><code>Status Push(LinkStack *S, StackElemType e) {\nLinkStack pnew = (LinkStack)malloc(sizeof(StackNode));\npnew-&gt;data = e;\npnew-&gt;next =\n*S; //\u5728\u7b2c\u4e00\u6b21Push\u65f6\uff0c\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684next\u6307\u5411NULL\uff0c\u56e0\u4e3a\u521d\u59cb\u5316\u4e86*S=NULL;\n*S = pnew;\nreturn OK;\n}\n</code></pre> <pre><code>Status Pop(LinkStack *S, StackElemType *e) {\nLinkStack pfree = *S; //\u4e34\u65f6\u4fdd\u5b58\u6808\u9876\u8282\u70b9S\n*e = (*S)-&gt;data;\n*S = (*S)-&gt;next;\nfree(pfree); //\u51fa\u6808\u540e\u91ca\u653e\nreturn OK;\n}\n</code></pre> <pre><code>StackElemType GetTop(LinkStack *S) {\nif (*S)\nreturn (*S)-&gt;data;\n}\n</code></pre> <pre><code>Status IsEmpty(LinkStack *S) {\nif (!(*S))\nreturn TRUE;\nelse\nreturn FALSE;\n}\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_193","title":"\u6d4b\u8bd5\u4ee3\u7801","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#stackh_1","title":"Stack.h","text":"<p><pre><code>#include \"Stack.h\"\n</code></pre> <pre><code>int main(void)\n{\nLinkStack S;\nInitStack(&amp;S);\nPush(&amp;S, 'E');\nPush(&amp;S, 'A');\nPush(&amp;S, 'C');\nPush(&amp;S, 'H');\nPush(&amp;S, 'R');\nwhile (!IsEmpty(&amp;S))\n{\nStackElemType e;\nPop(&amp;S, &amp;e);\nprintf(\"%c \", e);\n}\nsystem(\"pause\");\nreturn 0 ;\n}\n</code></pre> <pre><code>#include \"define.h\"\n#ifndef _STACK_H\n#define _STACK_H\n//-----------------------------------------------------\n#define MAXSTACK 100\ntypedef char StackElemType; //\u6808\u6570\u636e\u7c7b\u578b\ntypedef struct __SqStack //\u987a\u5e8f\u6808\uff0c\u6700\u5e38\u7528\n{\nStackElemType *base;\nStackElemType *top;\nint stacksize;\n} SqStack;\n</code></pre> <pre><code>Status InitStack(SqStack *S);\nStatus Push(SqStack *S, StackElemType e);\nStatus Pop(SqStack *S, StackElemType *e);\nStatus IsEmpty(SqStack *S);\nStatus IsFull(SqStack *S);\nStackElemType GetTop(SqStack *S);\n//---------------------------------------------------------\ntypedef struct __StackNode //\u94fe\u6808\n{\nStackElemType data;\n__StackNode *next;\n} StackNode, *LinkStack;\n</code></pre> <pre><code>Status InitStack(LinkStack *S);\nStatus Push(LinkStack *S, StackElemType e);\nStatus Pop(LinkStack *S, StackElemType *e);\nStackElemType GetTop(LinkStack *S);\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_194","title":"\u6808\u4e0e\u9012\u5f52","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_195","title":"\u51fd\u6570\u7684\u8c03\u7528\u8fc7\u7a0b","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_196","title":"\u8c03\u7528\u524d\u7cfb\u7edf\u5b8c\u6210\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#1_3","title":"1. \u5c06\u5b9e\u53c2\uff0c\u8fd4\u56de\u5730\u5740(\u4e0b\u884c\u4ee3\u7801\u5730\u5740)\u7b49\u4f20\u9012\u7ed9\u88ab\u8c03\u7528\u51fd\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#2_1","title":"2. \u4e3a\u88ab\u8c03\u7528\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\u5206\u914d\u7a7a\u95f4","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#3_2","title":"3. \u5c06\u63a7\u5236\u8f6c\u79fb\u5230\u88ab\u8c03\u7528\u51fd\u6570\u7684\u5165\u53e3","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_197","title":"\u8c03\u7528\u540e\uff0c\u7cfb\u7edf\u5b8c\u6210\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#1_4","title":"1. \u4fdd\u5b58\u88ab\u8c03\u7528\u51fd\u6570\u7684\u8ba1\u7b97\u7ed3\u679c(\u8fd4\u56de\u503c)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#2_2","title":"2. \u91ca\u653e\u88ab\u8c03\u7528\u51fd\u6570\u7684\u6570\u636e\u533a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#3_3","title":"3. \u4f9d\u7167\u88ab\u8c03\u7528\u51fd\u6570\u4fdd\u5b58\u7684\u8fd4\u56de\u5730\u5740\uff0c\u5c06\u63a7\u5236\u8f6c\u79fb\u5230\u8c03\u7528\u51fd\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_198","title":"\u9012\u5f52\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u5982\u4e0b\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_199","title":"\u6309\u7167\u8c03\u7528\u987a\u5e8f\u4f9d\u6b64\u628a\u5404\u4e2a\u51fd\u6570\u5165\u6808","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#returnfislo","title":"\u5f53\u6808\u9876\u51fd\u6570\u6ee1\u8db3return\u6761\u4ef6\u65f6\uff0c\u4f9d\u6b64\u51fa\u6808(\u6309\u7167FISLO\u539f\u5219)\uff0c\u5e76\u4e14\u8fd4\u56de\u503c\u4ece\u4e0a\u5411\u4e0b\u4f20\u9012","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#fact4","title":"\u76f4\u5230\u4e3b\u7a0b\u5e8f\u8c03\u7528\u7684fact(4)\u51fa\u6808\u540e\uff0c\u9012\u5f52\u5b8c\u6210","text":"<pre><code>Status IsEmpty(LinkStack *S);\n#endif\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_200","title":"\u5faa\u73af\u961f\u5217","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_201","title":"\u5b9a\u4e49\uff1a\u53ea\u80fd\u5728\u8868\u7684\u4e00\u7aef\u8fdb\u884c\u63d2\u5165\u8fd0\u7b97\uff0c\u5728\u8868\u7684\u53e6\u4e00\u7aef\u8fdb\u884c\u5220\u9664\u8fd0\u7b97\u7684 \u7ebf\u6027\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#first-in-firs-out","title":"\u5148\u8fdb\u5148\u51fa(First in Firs out)\u539f\u5219","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_202","title":"\u6570\u636e\u7c7b\u578b\u5b9a\u4e49","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#drear","title":"\u5982\u4e0a\u56fe\uff0c(d)\u867d\u7136\u6570\u7ec4\u4e2d\u7684\u7a7a\u95f4\u6ca1\u6709\u6ee1\uff0c\u4f46\u662frear\u5374\u4e0d\u80fd\u7ee7\u7eed\u589e\u52a0\uff0c\u5047\u6ea2\u51fa","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#base","title":"\u89e3\u51b3\u65b9\u6cd5\uff1a\u628abase\u6570\u7ec4\u60f3\u8c61\u6210\u4e00\u4e2a\u73af\u5f62\u7684\u5faa\u73af\u961f\u5217\u5982\u4e0b\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#front-rere-front-rere1-qmaxsize","title":"\u6b64\u65f6\u5982\u679c front == rere\u8868\u793a \u961f\u7a7a \uff0c\u800c front == (rere+1) % QMAXSIZE\u65f6\u8868\u793a \u961f\u6ee1","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_203","title":"\u987a\u6362\u961f\u5217\u521d\u59cb\u5316","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#front-rere-0","title":"\u628a front \u548c rere \u521d\u59cb\u5316\u4e3a 0","text":"<p><pre><code>#define QMAXSIZE 100\ntypedef char QElemType;\ntypedef struct __SqQueue {\nQElemType *base;\nint front, rere; //front\u4e3a\u961f\u5934\u4e0b\u6807\uff0crere\u4e3a\u961f\u5c3e\u4e0b\u6807(rere\u4e0b\u6807\u7684\u4f4d\u7f6e\u4e0d\u5b58\u653e\u5143\u7d20)\n} SqQueue;\n//\u5165\u961frere+1,\u51fa\u961ffront+1,\u4f46\u662f\u6b64\u79cd\u60c5\u51b5\u5b58\u5728\u95ee\u9898\uff0c\u5982\u4e0b\u56fe\n</code></pre> <pre><code>Status InitQueue(SqQueue *Q) {\nif (!(Q-&gt;base = (QElemType *)malloc(sizeof(QElemType) * QMAXSIZE)))\nexit(OVERFLOW);\nQ-&gt;front = Q-&gt;rere = 0 ;\nreturn OK;\n}\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_204","title":"\u987a\u6362\u961f\u5217\u5165\u961f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_205","title":"\u5faa\u73af\u961f\u5217\u51fa\u961f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_206","title":"\u5faa\u73af\u961f\u5217\u5176\u4ed6\u64cd\u4f5c","text":"<p><pre><code>Status EntryQ(SqQueue *Q, QElemType e) {\nif ((Q-&gt;rere + 1 ) % QMAXSIZE == Q-&gt;front) //\u5224\u65ad\u662f\u5426\u961f\u6ee1\nreturn ERROR;\nQ-&gt;base[Q-&gt;rere] = e;\nQ-&gt;rere = (Q-&gt;rere + 1 ) % QMAXSIZE; // Q-&gt;rere++ \u9519\u8bef\u5199\u6cd5\nreturn OK;\n}\n</code></pre> <pre><code>Status OutQ(SqQueue *Q, QElemType *e) {\nif (Q-&gt;rere == Q-&gt;front) //\u5224\u65ad\u662f\u5426\u961f\u6ee1\nreturn ERROR;\n*e = Q-&gt;base[Q-&gt;front];\nQ-&gt;front = (Q-&gt;front + 1 ) % QMAXSIZE; // Q-&gt;front++; \u4e3a\u9519\u8bef\u5199\u6cd5\nreturn OK;\n}\n</code></pre> <pre><code>Status IsEmpty(SqQueue *Q) {\nif (Q-&gt;front == Q-&gt;rere)\nreturn TRUE;\nelse\nreturn FALSE;\n}\n</code></pre> <pre><code>Status IsFull(SqQueue *Q) {\nif ((Q-&gt;rere + 1 ) % QMAXSIZE == Q-&gt;front)\nreturn TRUE;\nelse\nreturn FALSE;\n}\n</code></pre> <pre><code>Status GetFront(SqQueue *Q, QElemType *e) {\nif (IsEmpty(Q))\nreturn ERROR;\n*e = Q-&gt;base[Q-&gt;front];\nreturn OK;\n}\n</code></pre> <pre><code>int LengthQueue(SqQueue *Q) {\nreturn (Q-&gt;rere - Q-&gt;front + QMAXSIZE) % QMAXSIZE;\n}\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_207","title":"\u6d4b\u8bd5\u4ee3\u7801","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_208","title":"\u94fe\u961f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#front-rere","title":"\u94fe\u961f\u7ed3\u6784\u7c7b\u4f3c\u4e8e\u94fe\u8868\uff0c\u4e0d\u540c\u4e8e\u94fe\u8868\u7684\u5934\u6307\u9488\uff0c\u7528\u4e24\u4e2a\u6307\u9488\u57df front rere \u6765\u8868\u793a\u961f\u5217\uff0c\u5982\u4e0b\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_209","title":"\u6570\u636e\u7c7b\u578b\u5b9a\u4e49\uff1a","text":"<p><pre><code>#include \"Queue.h\"\n</code></pre> <pre><code>int main(void) {\nSqQueue Q;\nInitQueue(&amp;Q);\nEntryQ(&amp;Q, 'A');\nEntryQ(&amp;Q, 'B');\nEntryQ(&amp;Q, 'N');\nEntryQ(&amp;Q, 'M');\nprintf(\"%d\\n\", LengthQueue(&amp;Q));\nQElemType e;\nwhile (!(IsEmpty(&amp;Q))) {\nOutQ(&amp;Q, &amp;e);\nprintf(\"%c \", e);\n}\nsystem(\"pause\");\nreturn 0 ;\n}\n</code></pre> <pre><code>typedef struct __QueueNode {\nQElemType data;\n__QueueNode *next;\n} QueueNode;\ntypedef struct __LinkedQueue {\nQueueNode *front;//front\u76f8\u5f53\u4e8e\u94fe\u8868\u7684\u5934\u6307\u9488\nQueueNode *rere;//rere\u6307\u5411\u6574\u4e2a\u94fe\u8868\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\n} LinkedQueue;\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_210","title":"\u94fe\u961f\u521d\u59cb\u5316","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_211","title":"\u94fe\u961f\u5165\u961f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_212","title":"\u94fe\u961f\u51fa\u961f","text":"<p><pre><code>Status InitQueue(LinkedQueue *Q) {\n// front rere \u6307\u5411\u540c\u4e00\u8282\u70b9\nif (!(Q-&gt;front = Q-&gt;rere = (QueueNode *)malloc(sizeof(QueueNode))))\nexit(OVERFLOW);\nQ-&gt;front-&gt;next = NULL; //\u4f7f\u8be5\u8282\u70b9next\u57df\u4e3aNULL\nreturn OK;\n}\n</code></pre> <pre><code>Status EntryQ(LinkedQueue *Q, QElemType e) {\nQueueNode *pnew = (QueueNode *)malloc(sizeof(QueueNode));\nif (!pnew)\nexit(OVERFLOW);\npnew-&gt;data = e;\npnew-&gt;next = NULL;\nQ-&gt;rere-&gt;next = pnew;\nQ-&gt;rere = pnew;\nreturn OK;\n}\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_213","title":"\u6808\u548c\u961f\u5217\u73a9\u5177","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_214","title":"\u8fdb\u5236\u8f6c\u5316","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#nn-8","title":"\u4e00\u4e2a\u8fdb\u8f6c\u6362\u51fd\u6570\uff0c\u6709\u4e00\u4e2a\u53c2\u6570n(\u5341\u8fdb\u5236)\uff0c\u8981\u6c42\u8f93\u51fan\u7684 8 \u8fdb\u5236","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_215","title":"\u62ec\u53f7\u7684\u5339\u914d","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_216","title":"\u8f93\u5165\u62ec\u53f7()[]\uff0c\u5224\u65ad\u62ec\u53f7\u662f\u5426\u5339\u914d\u6210\u529f\uff0c#\u5b57\u7b26\u8868\u793a\u8f93\u5165\u7ed3\u675f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_217","title":"\u4f8b: ([()])\u6210\u529f [(())]] \u5931\u8d25","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#1_5","title":"\u5199\u6cd5 1 \uff1a","text":"<p><pre><code>Status OutQ(LinkedQueue *Q, QElemType *e) {\nif (Q-&gt;front == Q-&gt;rere)\nreturn ERROR;\nQueueNode *pfree = Q-&gt;front-&gt;next;\n*e = pfree-&gt;data;\nQ-&gt;front-&gt;next = pfree-&gt;next;\n//\u5982\u679c\u5220\u9664\u7684\u8282\u70b9\u4e3a\u961f\u5c3e\uff0c\u90a3\u4e48\u91ca\u653epfree\u4e4b\u540e\uff0crere\u6307\u5411\u672a\u77e5\u5b58\u50a8\u7a7a\u95f4\nif (Q-&gt;rere == pfree)\nQ-&gt;rere = Q-&gt;front;\nfree(pfree);\nreturn OK;\n}\n</code></pre> <pre><code>//\u9700\u8981\u63d0\u524d\u4fee\u6539 StackElemType\u7684\u7c7b\u578b\nvoid Convert_8(int n) {\nSqStack S;\nInitStack(&amp;S);\n</code></pre> <pre><code>int temp = n;\nwhile (temp) {\nPush(&amp;S, temp % 8 );\ntemp = temp / 8 ;\n}\n</code></pre> <pre><code>while (!IsEmpty(&amp;S)) {\nint i;\nPop(&amp;S, &amp;i);\nprintf(\"%d\", i);\n}\nprintf(\"\\n\");\n}\n</code></pre> <pre><code>Status Matching_Parentheses(void) {\nSqStack S;\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#2_3","title":"\u5199\u6cd5 2 \uff1a","text":"<p><pre><code>InitStack(&amp;S);\nchar ch, pop;\nint flag = 1 ;\nscanf(\" %c\", &amp;ch);\n</code></pre> <pre><code>while (flag &amp;&amp; ch != '#') {\nswitch (ch) {\n// \u6ce8\u610f:\u4e0d\u53ef\u4ee5\u5199\u6210 case '(' || '[': \u5982\u679c\u8fd9\u6837\u5199 ||\u8fd0\u7b97\u7b26\u53ea\u4f1a\u8fd4\u56de 1\ncase '(':\nPush(&amp;S, ch);\nbreak;\n</code></pre> <pre><code>case '[':\nPush(&amp;S, ch);\nbreak;\n</code></pre> <pre><code>case ')':\n// \u82e5\u6808\u4e3a\u7a7a\uff0c\u5219\u8bf4\u660e\u6709\u591a\u4f59\u7684\u53f3\u62ec\u53f7\uff0c\u5219\u5339\u914d\u5931\u8d25\nif (!IsEmpty(&amp;S) &amp;&amp; GetTop(&amp;S) == '(') {\nPop(&amp;S, &amp;pop);\n} else {\nflag = 0 ;\n}\nbreak;\n</code></pre> <pre><code>case ']':\nif (!IsEmpty(&amp;S) &amp;&amp; GetTop(&amp;S) == '[') {\nPop(&amp;S, &amp;pop);\n} else {\nflag = 0 ;\n}\nbreak;\n}\n</code></pre> <pre><code>scanf(\" %c\", &amp;ch);\n}\n</code></pre> <pre><code>if (flag &amp;&amp; IsEmpty(&amp;S))\nreturn TRUE;\nelse\nreturn FALSE;\n}\n</code></pre> <pre><code>bool Matching_Parenthese(void) {\nSqStack S;\nInitStack(&amp;S);\nchar x;\nchar buffer[ 1024 ];\nscanf(\"%s\", &amp;buffer);\nchar *ptr = buffer;\nbool flag = true;\n</code></pre> <pre><code>while (*ptr != '\\0' &amp;&amp; flag) {\nif (*ptr == '(' || *ptr == '[') {\nPush(&amp;S, *(ptr++));\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#10_1","title":"10 \u4ee5\u5185\u7684\u8ba1\u7b97\u5668","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#10_2","title":"\u5199\u51fa\u4e00\u4e2a\u53ea\u6709\u52a0\u51cf\u4e58\u9664\u7684\u8ba1\u7b97\u5668\uff0c\u8981\u6c42\u6bcf\u4e00\u6b65\u8ba1\u7b97\u7ed3\u679c\u5c0f\u4e8e 10","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_218","title":"\u8fd0\u7b97\u7b26\u987a\u5e8f\u8981\u6c42\u5982\u4e0b(#\u4ee3\u8868\u7ed3\u675f\u6807\u5fd7\uff0c\u4e14#\u8fd0\u7b97\u7ea7\u6700\u5c0f)","text":"<p><pre><code>} else if (*ptr == ')') {\nif (!IsEmpty(&amp;S) &amp;&amp; GetTop(&amp;S) == '(') {\nPop(&amp;S, &amp;x);\nptr++;\n} else\nflag = false;\n} else if (*ptr == ']') {\nif (!IsEmpty(&amp;S) &amp;&amp; GetTop(&amp;S) == '[') {\nPop(&amp;S, &amp;x);\nptr++;\n} else\nflag = false;\n}\n}\n</code></pre> <pre><code>if (flag &amp;&amp; IsEmpty(&amp;S)) {\nreturn true;\n} else {\nreturn false;\n}\n}\n</code></pre> <pre><code>char Evaluate() {\nSqStack opnd; //\u8fd0\u7b97\u6570\u6808\nSqStack optr; //\u8fd0\u7b97\u7b26\u6808\nInitStack(&amp;opnd);\nInitStack(&amp;optr);\nPush(&amp;optr, '#'); //\u5148\u628a#\u7ed3\u675f\u8868\u793a\u538b\u5165\u8fd0\u7b97\u7b26\u6808\nchar ch, theta;\nchar a, b;\nscanf(\" %c\", &amp;ch);\n</code></pre> <pre><code>while ('#' != ch || GetTop(&amp;optr) != '#') {\n//\u5148\u5224\u65ad\u662f\u5426\u4e3a\u8fd0\u7b97\u7b26\nif (!IsOperator(ch)) {\nPush(&amp;opnd, ch);\nscanf(\" %c\", &amp;ch);\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_219","title":"\u6d4b\u8bd5\u4ee3\u7801:","text":"<p><pre><code>} else {\n//\u6bd4\u8f83\u6808\u9876\u8fd0\u7b97\u7b26\u548c\u8f93\u5165\u8fd0\u7b97\u7b26\u6bd4\u8f83\nswitch (Precede(GetTop(&amp;optr), ch)) {\n//\u8f93\u5165\u8fd0\u7b97\u7b26\u5927\u4e8e\u6808\u9876\u8fd0\u7b97\u7b26\uff0c\u5219\u5165\u6808\ncase '&lt;':\n</code></pre> <pre><code>Push(&amp;optr, ch);\n//\u5f00\u59cb\u8bfb\u53d6\u4e0b\u4e00\u4e2a\u8fd0\u7b97\u7b26\nscanf(\" %c\", &amp;ch);\nbreak;\n//\u5982\u679c\u8f93\u5165\u8fd0\u7b97\u7b26\u5c0f\u4e8e\u6808\u9876\u8fd0\u7b97\u7b26\uff0c\u5f39\u51faoptr\u6808\u9876\u8fd0\u7b97\u7b26\uff0c\u5e76\u5f39\u51faopnd\u7684\u4e24\u4e2a\u8fd0\u7b97\u6570\uff0c\u8fdb\u884c\u8fd0\u7b97\ncase '&gt;':\nPop(&amp;optr, &amp;theta);\nPop(&amp;opnd, &amp;a);\nPop(&amp;opnd, &amp;b);\n//\u628a\u8fd0\u7b97\u7ed3\u679c\u5165\u6808\nPush(&amp;opnd, operate(a, theta, b)); //\n//\u6ce8\u610f\u6b64\u65f6\u5e76\u6ca1\u6709\u5bf9\u8f93\u5165\u8fd0\u7b97\u7b26ch\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\uff0c\u6240\u4ee5\u4e0d\u7528\u5f80\u540e\u8bfb\u53d6\u5b57\u7b26\uff0c\n//\u5373\u4e0d\u9700\u8981scanf(\"%c\", &amp;ch);\nbreak;\n//\u5982\u679c\u76f8\u7b49\u5219\u8bf4\u660e\u62ec\u53f7\u5339\u914d\u7ed3\u675f\ncase '=':\nPop(&amp;optr, &amp;theta);\nscanf(\" %c\", &amp;ch);\nbreak;\n}\n}\n}\n//\u8fd4\u56deopnd\u6808\u9876\uff0c\u8868\u8fbe\u5f0f\u7684\u6700\u7ec8\u7ed3\u679c\nreturn GetTop(&amp;opnd);\n}\n</code></pre> <pre><code>#include \"Stack.h\"\n#define OPERATORMAX 7\n</code></pre> <pre><code>char operators[OPERATORMAX] = {'+', '-', '*', '/', '(', ')', '#'};\nint LocateChar(char *array, char theta);\nchar operate(char a, char theta, char b);\nchar Precede(char theta1, char theta2);\nchar Evaluate(void);\nint main(void) {\n</code></pre> <pre><code>printf(\"%c \", Evaluate());\n// printf(\"%c\", Precede('(', '/'));\n// printf(\"%c\", operate('2', '*', '4'));\nsystem(\"pause\");\nreturn 0 ;\n}\n</code></pre> <pre><code>char Precede(char theta1, char theta2) {\n</code></pre> <pre><code>int index1 = LocateChar(operators, theta1);\nint index2 = LocateChar(operators, theta2);\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#3_4","title":"3. \u5b57\u7b26\u4e32\uff0c\u6570\u7ec4\uff0c\u5e7f\u4e49\u8868","text":"<p><pre><code>char precedences[OPERATORMAX][OPERATORMAX] = {\n{'&gt;', '&gt;', '&lt;', '&lt;', '&lt;', '&gt;', '&gt;'}, {'&gt;', '&gt;', '&lt;', '&lt;', '&lt;', '&gt;', '&gt;'},\n{'&gt;', '&gt;', '&gt;', '&gt;', '&lt;', '&gt;', '&gt;'}, {'&gt;', '&gt;', '&gt;', '&gt;', '&lt;', '&gt;', '&gt;'},\n{'&lt;', '&lt;', '&lt;', '&lt;', '&lt;', '=', 0 }, {'&gt;', '&gt;', '&gt;', '&gt;', 0 , '&gt;', '&gt;'},\n{'&lt;', '&lt;', '&lt;', '&lt;', '&lt;', 0 , '='}};\n</code></pre> <pre><code>return precedences[index1][index2];\n}\n</code></pre> <pre><code>char operate(char a, char theta, char b) {\nint val_a = atoi(&amp;a);\nint val_b = atoi(&amp;b);\nint result;\nswitch (theta) {\ncase '+':\nresult = val_a + val_b;\nbreak;\ncase '-':\nresult = val_a - val_b;\nbreak;\ncase '*':\nresult = val_a * val_b;\nbreak;\ncase '/':\nresult = val_a / val_b;\nbreak;\n}\nchar val[ 24 ];\nitoa(result, val, 10 );\nreturn val[ 0 ];\n}\n</code></pre> <pre><code>int LocateChar(char *array, char theta) {\nfor (int i = 0 ; i &lt; OPERATORMAX; i++) {\nif (array[i] == theta)\nreturn i;\n}\nreturn - 1 ;\n}\n</code></pre> <pre><code>bool IsOperator(char a) {\nif (- 1 == LocateChar(operators, a)) {\nreturn false;\n} else\nreturn true;\n}\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_220","title":"\u5b57\u7b26\u4e32\u5339\u914d","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_221","title":"\u5b57\u7b26\u4e32\u7684\u5b58\u50a8\u7ed3\u6784\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_222","title":"\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_223","title":"\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_224","title":"\u672c\u7b14\u8bb0\u53ea\u8bb0\u5f55\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u7684\u5b57\u7b26\u4e32","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_225","title":"\u8f93\u5165\u5b57\u7b26\u4e32\u51fd\u6570\u548c\u521d\u59cb\u5316","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#bfbrute-force_1","title":"BF\u7b97\u6cd5(Brute Force)","text":"<p><pre><code>typedef struct __SString {\nchar ch[MAXLEN + 1 ]; //\u4e3a\u4e86\u4ee3\u7801\u7406\u89e3\u65b9\u4fbf\uff0c\u4e0d\u4f7f\u7528\u6570\u7ec4 0 \u53f7\u4f4d\u7f6e\nint length;\n} SString;\n</code></pre> <pre><code>#define CHUNKSIZE 80 //\u6bcf\u4e00\u8282\u70b9\u7684\u6700\u5927\u957f\u5ea6\ntypedef struct __Chunk {\nchar ch[CHUNKSIZE + 1 ];\n__Chunk *next;\n} Chunk;\n</code></pre> <pre><code>typedef struct __LString {\nChunk *head, *tail;\nint curlen; //\u5f53\u524d\u5b57\u7b26\u4e32\u957f\u5ea6\n} LString;\n#endif\n</code></pre> <pre><code>int GetLength(SString *S) {\nint cnt = 0 ;\nint i = 1 ; //\u56e0\u4e3a\u4e0d\u4f7f\u7528 0 \u53f7\u4f4d\u7f6e\uff0c\u4ece 1 \u5f00\u59cb\n</code></pre> <pre><code>while (S-&gt;ch[i] != '\\0') {\ni++;\ncnt++;\n}\n</code></pre> <pre><code>return cnt;\n}\n</code></pre> <pre><code>void InputString(SString *S) {\nscanf(\" %s\", &amp;S-&gt;ch[ 1 ]);\nS-&gt;length = GetLength(S);\n}\n</code></pre> <pre><code>int BF_Match(SString S, SString T, int position) {\nint i = position;\nint j = 1 ;\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#bf","title":"BF\u7b97\u6cd5\u6548\u7387\u5206\u6790","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_226","title":"\u4ee4\u4e3b\u4e32\u957f\u5ea6\u4e3a \u5b50\u4e32\u957f\u5ea6\u4e3a \uff0c\u82e5\u4ece\u4e3b\u4e32\u7684\u7b2c\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u4e0e\u6a21\u5f0f\u4e32\u5339\u914d\u6210\u529f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_227","title":"\u5219\u5728\u524d \u8d9f\u5339\u914d\u4e2d\u5b57\u7b26\u603b\u5171\u6bd4\u8f83\u4e86 \u6b21","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_228","title":"\u82e5\u7b2c\u8d9f\u5339\u914d\u6210\u529f\uff0c\u5219\u6bd4\u8f83\u6b21\u6570\u4e3a \uff0c\u603b\u6bd4\u8f83\u6b21\u6570\u4e3a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_229","title":"\u5373","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_230","title":"\u6700\u574f\u60c5\u51b5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_231","title":"\u5047\u8bbe\u4ece\u4e3b\u4e32\u5bf9\u7684\u7b2c\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u4e0e\u6a21\u5f0f\u4e32\u5339\u914d\u6210\u529f\uff0c\u5219\u5728\u524d \u8d9f\u4e2d\u603b\u5171\u6bd4\u8f83\u4e86 \u6b21","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_232","title":"\u82e5\u7b2c\u8d9f\u5339\u914d\u6210\u529f\uff0c\u5219\u7b2c\u8d9f\u9700\u8981 \u6b21\u5339\u914d\uff0c\u603b\u6bd4\u8f83\u6b21\u6570\u4e3a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#kmp_1","title":"KMP\u7b97\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_233","title":"\u4ee4\u5b57\u7b26\u4e32 \uff0c\u548c\u6a21\u5f0f\u4e32","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_234","title":"\u5339\u914d\u5230 \u548c \u65f6\u5931\u5339 \u5219","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_235","title":"\u4e0b\u6807\u7531\u6765\uff1a \u4e3a\u5931\u5339\u4e4b\u524d\u6210\u529f\u5339\u914d\u7684\u5b50\u4e32\u957f\u5ea6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_236","title":"\u6307\u5411 \u4e2d\u5931\u914d\u5b57\u7b26\uff0c\u5219\u6709","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_237","title":"\u4e0b\u6807\u7531\u6765\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_238","title":"\u7531 \u53ef\u77e5\uff0c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_239","title":"\u7531 \u53ef\u77e5\uff0c\u5982\u679c \u548c \u5931\u5339\uff0c\u65e0\u9700\u4ece \u5f00\u59cb\u548c \u6bd4\u8f83\uff0c\u53ea\u9700\u8981\u628a \u6ed1\u52a8\u5230 \u7684\u4f4d\u7f6e\u6bd4\u8f83\u5373\u53ef","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_240","title":"\u4ee4 \u8868\u793a\u5728\u5339\u914d\u4e2d \u5931\u5339\u65f6\uff0c\u8ba9 \u4e0e \u6bd4\u8f83","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_241","title":"\u53ef\u5f97","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_242","title":"\uff0c\u56e0\u4e3a\u5f53 \u5931\u5339\u65f6\u5b57\u7b26\u4e32\u6765\u5230 \u4f4d\u7f6e\u7a7a\u4e32\uff0c\u6709 \u7a7a\u4e32","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_243","title":"\u4e14","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_244","title":"\u9700\u8981\u4ece \u5f00\u59cb\u91cd\u65b0\u6bd4\u8f83","text":"<pre><code>while (i &lt;= S.length &amp;&amp; j &lt;= T.length) {\nif (S.ch[i] == T.ch[j]) {\ni++;\nj++;\n} else {\n// i-j+1 \u662f\u56de\u6eaf\u5230\u521d\u59cb\u5339\u914d\u4f4d\u7f6e\ni = i - j + 1 + 1 ;\nj = 1 ;\n}\n}\n//\u5982\u679c\u5339\u914d\u6210\u529f\uff0c\u90a3\u4e48\u6b64\u65f6i\u548cj\u90fd\u4f1a\u81ea\u589e+1\uff0c\u6b64\u65f6j&gt;T.length\nif (j &gt; T.length)\nreturn i - T.length;\nelse\nreturn 0 ;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#next_2","title":"\u6c42next\u6570\u7ec4","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_245","title":"\u6c42 \u6570\u7ec4\u7684\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u662f \u7684\u8fc7\u7a0b\uff0c\u5373\u5982\u679c\u5b58\u5728\uff0c\u90a3\u4e48 \u5fc5\u7136\u5b58\u5728","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_246","title":"\u4e5f\u662f\u6a21\u5f0f\u4e32\u7684\u5b57\u4e32\u5339\u914d\u6a21\u5f0f\u4e32\u7684\u8fc7\u7a0b","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_247","title":"\u8bbe \u5373\u6709","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_248","title":"\u7b2c\u4e00\u79cd\u60c5\u51b5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_249","title":"\u6b64\u65f6\u5219\u6709","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_250","title":"\u90a3\u4e48\u5219\u6709","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_251","title":"\u7b2c\u4e8c\u79cd\u60c5\u51b5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_252","title":"\u8bf4\u660e\u5728 \u5904\u5931\u5339\uff0c\u5219\u56de\u6eaf\u5230","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_253","title":"\u5982\u679c \u5982\u4e0b\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_254","title":"\u90a3\u4e48","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_255","title":"\u5982\u679c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_256","title":"\u90a3\u4e48\u4e00\u76f4\u56de\u6eaf \u82e5\u51fa\u73b0 \u5219\u540c\u4e0a\uff0c\u82e5\u672a\u51fa\u73b0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#next_3","title":"\u672a\u4f18\u5316\u524d\uff0c\u6c42next\u6570\u7ec4","text":"<p><pre><code>void GetNext(SString T, int *next) {\nnext[ 1 ] = 0 ;\nint j = 0 ;\nint i = 1 ;\n</code></pre> <pre><code>while (i &lt; T.length) {\nif ( 0 == j || T.ch[i] == T.ch[j]) {\ni++, j++;\nnext[i] = j;\n} else {\nj = next[j];\n}\n}\n}\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_257","title":"\u8003\u8651\u5982\u4e0b\u95ee\u9898\uff0c\u5982\u679c\u56de\u6eaf\u7684 \u4e5f\u7b49\u4e8e \u4f1a\u51fa\u73b0\u4ec0\u4e48\u95ee\u9898","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_258","title":"\u4f1a\u51fa\u73b0\u65e0\u610f\u4e49\u6bd4\u8f83\uff0c\u89e3\u51b3\u529e\u6cd5\u8ba9 \u4e5f\u8fdb\u884c\u56de\u6eaf","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_259","title":"\u4f18\u5316\u540e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#kmp_2","title":"KMP\u7b97\u6cd5","text":"<p><pre><code>void GetNext(SString T, int *next) {\nnext[ 1 ] = 0 ;\nint j = 0 ;\nint i = 1 ;\n//! \u6ce8\u610f:while\u91cc\u9762 \u4e0d\u80fd\u5199i&lt;=T.length\uff0c\u56e0\u4e3a\u5982\u679c\u8fd9\u4e48\u5199\uff0c\u90a3\u4e48i\u7ecf\u8fc7++\u540e,i=T.length+1\n//! \u56e0\u4e3a\u64cd\u4f5c\u7684\u5185\u5b58\u662f\u52a8\u6001\u7684\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u5185\u5b58\u6cc4\u6f0f\n//! \u6240\u4ee5\u5fc5\u987b\u662fi&lt;T.length\uff0c\u8fd9\u6837\u6700\u540ei\u624d\u4f1a\u6307\u5411T.length\nwhile (i &lt; T.length) {\nif ( 0 == j || T.ch[i] == T.ch[j]) {\ni++, j++;\n//\u5728\u672a\u4f18\u5316\u4e4b\u524d\uff0c\u5982\u679cch[i]\u5339\u914d\u5931\u8d25\uff0c\u90a3\u4e48\u4f1a\u56de\u6eaf\u5230ch[j]\u4e0a\n//\u5982\u679cch[j] == ch[i]\u90a3\u4e48\u8bf4\u660e\u5339\u914d\u4ecd\u7136\u4f1a\u5931\u8d25\uff0c\u56e0\u4e3ach[i]\u5339\u914d\u5931\u8d25\nif (T.ch[i] == T.ch[j]) {\n//\u5728i++,j++\u4e4b\u540e\u63d0\u524d\u5224\u65ad\u662f\u5426\u76f8\u7b49\nnext[i] = next[j];\n} else {\nnext[i] = j;\n}\n} else {\nj = next[j];\n}\n}\n}\n</code></pre> <pre><code>int KMP_Match(SString S, SString T, int position) {\nint *next = (int *)malloc(sizeof(int) * (T.length + 1 ));\nGetNext(T, next);\n</code></pre> <pre><code>int i = position;\nint j = 1 ;\n</code></pre> <pre><code>while (i &lt;= S.length &amp;&amp; j &lt;= T.length) {\nif (j == 0 || S.ch[i] == T.ch[j]) {\ni++, j++;\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_260","title":"\u6d4b\u8bd5\u4ee3\u7801","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_261","title":"\u5b57\u7b26\u4e32\u5339\u914d\u73a9\u5177","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_262","title":"\u8f93\u5165\u4e00\u4e2a\u75c5\u6bd2\u5e8f\u5217\u957f\u5ea6\u4e3a \uff0c\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u75c5\u4eba\u6837\u672c\uff0c\u786e\u8ba4\u75c5\u4eba\u662f\u5426\u88ab\u611f\u67d3","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_263","title":"\u6ce8\u610f \u75c5\u6bd2\u5e8f\u5217\u662f\u73af\u72b6\u7684","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_264","title":"\u6bd4\u5982\u75c5\u6bd2\u5e8f\u5217\u4e3a \u90a3\u4e48 \u90fd\u5c5e\u4e8e\u75c5\u6bd2","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_265","title":"\u601d\u8def \u5229\u7528\u4e00\u4e2a\u6570\u7ec4\u5b58\u50a8\u75c5\u6bd2\u5e8f\u5217\uff0c\u5e76\u628a\u8be5\u5e8f\u5217\u6269\u5927\u5230 \u957f\u5ea6\uff0c\u4f9d\u6b64\u6bd4\u8f83","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_266","title":"\u5b9e\u73b0\u4ee3\u7801","text":"<p><pre><code>} else {\nj = next[j];\n}\n}\nfree(next);\nif (j &gt; T.length)\nreturn i - j;\nelse\nreturn 0 ;\n}\n</code></pre> <pre><code>#include \"SString.h\"\n</code></pre> <pre><code>int main(void) {\nSString S, T;\nInputString(&amp;S);\nInputString(&amp;T);\nint i = KMP_Match(S, T, 1 ); //\u628aKMP\u6539\u6210BF\u5c31\u662fBF\u7b97\u6cd5\nprintf(\"%d\", i);\n</code></pre> <pre><code>system(\"pause\");\nreturn 0 ;\n}\n</code></pre> <pre><code>#include \"SString.h\"\n#include &lt;fstream&gt;\n#define FILENAME \"Virus.txt\"\n//\u83b7\u53d6\u6587\u4ef6\u4e2d\u6837\u672c\u4e2a\u6570\nint File_GetNumber();\n</code></pre> <pre><code>int main(void) {\n//\u521b\u5efa\u7ed3\u6784\u4f53Virus\u5b58\u50a8\u75c5\u6bd2\u4fe1\u606f\nSString Virus;\n//\u8f93\u5165\u75c5\u6bd2\u5e8f\u5217\nInputString(&amp;Virus);\n//\u83b7\u53d6\u6587\u4ef6\u4e2d\u6837\u672c\u4e2a\u6570\nint number = File_GetNumber();\n// id\u7528\u6237\u6807\u8bb0\u6587\u4ef6\u4e2d\u7b2c\u51e0\u4e2a\u6837\u672c\nint id = 1 ;\n//\u521b\u5efa\u6587\u4ef6\u8f93\u5165\u5bf9\u8c61\nstd::ifstream ifs(FILENAME);\n//\u5224\u65ad\u6587\u4ef6\u662f\u5426\u6253\u5f00\u6210\u529f\nif (!ifs.is_open()) {\nprintf(\"Failed!\\n\");\n</code></pre></p> <p>exit( 0 ); } //\u5982\u679c\u6253\u5f00\u6210\u529f,\u6269\u5927\u75c5\u6bd2\u5e8f\u5217\uff0c\u5982 xyz \u6269\u5927\u79f0 xyzxyz for (int i = Virus.length, j = 1 ; j &lt;= Virus.length; j++) { Virus.ch[i + j] = Virus.ch[j]; } //\u56e0\u4e3a\u75c5\u6bd2\u5e8f\u5217\u88ab\u6269\u5927\uff0c\u6240\u4ee5\u8981\u91cd\u65b0\u8bbe\u7f6e'\\0' Virus.ch[ 2 * Virus.length + 1 ] = '\\0';</p> <p>while (number--) { //\u521b\u5efa\u6837\u672c\u7ed3\u6784\u4f53 SString sample; //\u8bbe\u7f6e\u68c0\u6d4b\u662f\u5426\u88ab\u611f\u67d3\u6807\u8bb0flag int flag = false; // ifs\u8bfb\u6587\u4ef6\uff0c\u5e76\u8f93\u5165\u5230sample\u4e0a\u9762 ifs &gt;&gt; &amp;sample.ch[ 1 ]; //\u521d\u59cb\u5316sample\u7684\u957f\u5ea6 sample.length = GetLength(&amp;sample); //\u8bbe\u7f6e\u4e34\u65f6\u7ed3\u6784\u4f53temp\uff0c\u7528\u4e8e\u83b7\u53d6\u4e0d\u540c\u7684\u75c5\u6bd2\u5e8f\u5217 SString temp; temp.length = Virus.length; //\u628a\u4e0d\u540c\u7684\u5e8f\u5217\u8d4b\u503c\u7ed9temp for (int i = 0 ; i &lt; Virus.length; i++) { for (int j = 1 ; j &lt;= Virus.length; j++) { temp.ch[j] = Virus.ch[j + i]; } //\u4e3atemp\u8bbe\u7f6e\u7ed3\u675f\u6807\u8bc6\u7b26 temp.ch[Virus.length + 1 ] = '\\0'; //\u6b64\u65f6\u5df2\u7ecf\u83b7\u53d6\u4e86\u75c5\u6bd2\u5e8f\u5217\u50a8\u5b58\u5728temp\u4e2d\uff0c\u628a\u75c5\u6bd2\u6837\u672c\u548c\u75c5\u6bd2\u5e8f\u5217\u6bd4\u5bf9 flag = KMP_Match(sample, temp, 1 ); if (flag) { //\u5982\u679cflag!=0\u8bf4\u660e\u68c0\u6d4b\u6210\u529f printf(\"%d infected\\n\", id++); break; } } if ( 0 == flag) printf(\"%d Not infected\\n\", id++); } system(\"pause\"); return 0 ; }</p> <p>int File_GetNumber() { std::ifstream ifs(FILENAME); char buffer[ 1024 ]; int cnt = 0 ; // ifs\u4f1a\u4e00\u76f4\u8bfb\u53d6\u5b57\u7b26\u8f93\u5165\u5230buff\u6570\u7ec4\u4e0a\uff0c\u76f4\u5230\u9047\u5230\u7a7a\u683c\u7b49\u5236\u8868\u7b26\u505c\u6b62 while (ifs &gt;&gt; buffer) { cnt++; } return cnt; }</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_267","title":"\u6570\u7ec4","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_268","title":"\u58f0\u660e\u683c\u5f0f \u6570\u636e\u7c7b\u578b\u53d8\u91cf\u540d\u79f0\u884c\u6570 \u5217\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_269","title":"\u5982","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_270","title":"\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u4e5f\u53ef\u4ee5\u88ab\u5b9a\u4e49\u6210\u4e00\u7ef4\u6570\u7ec4","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_271","title":"\u4f8b\u5982:","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_272","title":"\u4e09\u7ef4\u6570\u7ec4 \u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e8c\u7ef4\u6570\u7ec4\uff0c\u4e14\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u53c8\u90fd\u662f\u4e00\u7ef4\u6570\u7ec4","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_273","title":"\u7ef4\u6570\u7ec4 \u6bcf\u4e2a\u5143\u7d20\u90fd\u662f \u7ef4\u6570\u7ec4\uff0c\u4e14 \u7ef4\u6570\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f \u7ef4\u6570\u7ec4","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_274","title":"\u7ef4\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u7ef4\u6570\u7ec4","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_275","title":"\u82e5\u6709\u4e09\u7ef4\u6570\u7ec4 \u5404\u5143\u7d20\u7ef4","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_276","title":"\u5219","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_277","title":"\u53ef\u4ee5\u62bd\u8c61\u6210\u4e0b\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_278","title":"\u82e5\u6709 \u7ef4\u6570\u7ec4\uff0c\u5404\u4e2a\u7ef4\u5ea6\u7684\u5143\u7d20\u4e2a\u6570\u4e3a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_279","title":"\u5219","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#generalized-list_1","title":"\u5e7f\u4e49\u8868(Generalized List)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_280","title":"\u5e7f\u4e49\u8868\u901a\u5e38\u8bb0\u4f5c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_281","title":"\u4e3a\u8868\u540d\u901a\u5e38\u7528\u5927\u5199\u5b57\u6bcd\u8868\u793a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_282","title":"\u4e3a\u957f\u5ea6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_283","title":"\u4e3a\u8868\u7684\u5143\u7d20","text":"<pre><code>typedef elemtype array2[m][n];\n\u7b49\u4ef7\u4e8e\ntypedef elemtype array1[n];\ntypedef array1 array2[m];\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_284","title":"\u8868\u5934 \u82e5 \u975e\u7a7a \uff0c\u5219\u7b2c\u4e00\u5143\u7d20 \u5c31\u662f\u8868\u5934","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_285","title":"\u8868\u5c3e \u9664\u8868\u5934\u4e4b\u5916\u7684\u5176\u4ed6\u5143\u7d20\u7ec4\u6210\u7684\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_286","title":"\u6ce8\u610f \u8868\u5c3e\u4e0d\u662f\u4e00\u4e2a\u5143\u7d20\uff0c\u800c\u662f\u4e00\u4e2a\u5b50\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_287","title":"\u4f8b","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_288","title":"\u7a7a\u8868\uff0c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_289","title":"\uff0c \u548c \u90fd\u662f \u4f46\u5e76\u4e0d\u662f\u540c\u4e00","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_290","title":"\u5e7f\u4e49\u8868\u7684\u6027\u8d28:","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_291","title":"\u5e7f\u4e49\u8868\u4e2d\u7684\u5143\u7d20\u6709\u76f8\u5bf9\u6b21\u5e8f \u4e00\u4e2a\u76f4\u63a5\u524d\u9a71\u548c\u4e00\u4e2a\u76f4\u63a5\u540e\u7ee7","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_292","title":"\u5e7f\u4e49\u8868\u7684\u957f\u5ea6\u5b9a\u4e49\u4e3a\u6700\u5916\u5c42\u6240\u5305\u542b\u7684\u5143\u7d20\u4e2a\u6570 \u5e7f\u4e49\u8868\u7684\u6df1\u5ea6\u5b9a\u4e49\u4e3a\u8be5\u5e7f\u4e49\u8868\u5c55\u5f00\u540e\u6240\u542b\u62ec\u53f7\u7684\u5c42\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_293","title":"\u5982 \u6df1\u5ea6 \uff0c \u6df1\u5ea6 \uff0c \u6df1\u5ea6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_294","title":"\u6ce8\u610f \u539f\u5b50\u7684\u6df1\u5ea6\u4e3a \uff0c\u7a7a\u8868\u7684\u6df1\u5ea6\u4e3a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_295","title":"\u5728\u5e7f\u4e49\u8868\u4e2d\u53ef\u4ee5\u4e3a\u5176\u4ed6\u5e7f\u4e49\u8868\u5171\u4eab\uff0c\u5982\u4e0a\u8ff0\u5e7f\u4e49\u8868 \u5c31\u5171\u4eab","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_296","title":"\u5e7f\u4e49\u8868\u53ef\u4ee5\u662f\u4e00\u4e2a\u9012\u5f52\u7684\u8868\uff0c\u5982\u4e0a\u8ff0 \u5e7f\u4e49\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_297","title":"\u6ce8\u610f \u9012\u5f52\u8868\u7684\u957f\u5ea6\u662f\u6709\u9650\u7684\uff0c\u4f46\u662f\u6df1\u5ea6\u662f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_298","title":"\u5e7f\u4e49\u8868\u7684\u57fa\u672c\u8fd0\u7b97","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#4_1","title":"4. \u6811\u3001\u4e8c\u53c9\u6811\u3001\u68ee\u6797","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_299","title":"\u5b9a\u4e49","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_300","title":"\u6811\u662f \u4e2a\u8282\u70b9\u7684\u6709\u9650\u96c6\u5408","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_301","title":"\u5f53 \u65f6\u4e3a\u7a7a\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_302","title":"\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u79f0\u4e4b\u4e3a\u6839\u7684\u8282\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_303","title":"\u4ee4\u4e00\u9897\u6811\u4e3a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_304","title":"\u9664\u6839\u8282\u70b9\u5916\uff0c\u53ef\u5206\u4e3a \u4e2a\u4e92\u4e0d\u76f8\u4ea4\u7684\u6709\u9650\u96c6 \uff0c\u5176\u4e2d\u4e00\u4e2a\u96c6\u5408\u53c8\u662f\u4e00\u68f5\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_305","title":"\u79f0\u5176\u4e3a \u7684\u5b50\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_306","title":"\u5982\u4e0b\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_307","title":"\u6811\u7684\u57fa\u672c\u672f\u8bed","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_308","title":"\u8282\u70b9\u7684\u5ea6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_309","title":"\u8282\u70b9\u62e5\u6709\u7684\u5b50\u6811\u4e2a\u6570\u6210\u4e3a\u8282\u70b9\u7684\u5ea6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_310","title":"\u5982\u4e0a\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_311","title":"\u6811\u7684\u5ea6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_312","title":"\u6811\u7684\u5ea6\u662f\u6811\u5185\u5404\u8282\u70b9\u5ea6\u7684\u6700\u5927\u503c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_313","title":"\u4e0a\u56fe\u7684\u5ea6\u4e3a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_314","title":"\u5c42\u6b21","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_315","title":"\u8282\u70b9\u7684\u5c42\u6b21\u4ece\u6839\u5f00\u59cb\u5b9a\u4e49\uff0c\u6839\u4e3a\u7b2c\u4e00\u5c42\uff0c\u6839\u7684\u5b69\u5b50\u4e3a\u7b2c\u4e8c\u5c42","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_316","title":"\u6811\u4e2d\u4efb\u610f\u8282\u70b9\u7684\u5c42\u6b21 \u5b83\u7684\u53cc\u4eb2\u5c42\u6b21","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_317","title":"\u9ad8\u5ea6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_318","title":"\u6811\u4e2d\u8282\u70b9\u7684\u6700\u5927\u5c42\u6b21\u6210\u4e3a\u6811\u7684\u9ad8\u5ea6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_319","title":"\u5982\u4e0a\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_320","title":"\u68ee\u6797","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_321","title":"\u662f \u9897\u4e92\u4e0d\u76f8\u4ea4\u7684\u6811\u7684\u96c6\u5408","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_322","title":"\u5bf9\u4efb\u610f\u4e00\u68f5\u6811\u800c\u8a00\uff0c\u5176\u5b50\u6811\u7ec4\u6210\u68ee\u6797","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_323","title":"\u4e8c\u53c9\u6811\u7684\u5b9a\u4e49","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_324","title":"\u662f \u4e2a\u8282\u70b9\u7ec4\u6210\u7684\u96c6\u5408\uff0c \u65f6\u4e3a\u7a7a\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_325","title":"\u5bf9\u4e8e\u975e\u7a7a\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_326","title":"\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u6839\u8282\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_327","title":"\u9664\u6839\u7ed3\u70b9\u5916\uff0c\u6709\u4e92\u4e0d\u76f8\u4ea4\u7684 \u4e24\u68f5\u5b50\u6811\u53ef\u4ee5\u4e3a\u7a7a\u6811\uff0c\u5206\u522b\u79f0\u5176\u4e3a \u7684\u5de6\u53f3\u5b50\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_328","title":"\u4e8c\u53c9\u6811\u7684\u6027\u8d28","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_329","title":"\u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u6709\u4e24\u68f5\u5b50\u6811\u5373","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_330","title":"\u5b50\u6811\u6709\u5de6\u53f3\u4e4b\u5206\uff0c\u4e0d\u53ef\u98a0\u5012","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_331","title":"\u4e8c\u53c9\u6811\u5b9a\u7406","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_332","title":"\u5b9a\u7406","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_333","title":"\u5728\u4e8c\u53c9\u6811\u7684\u7b2c\u5c42\u4e0a\uff0c\u6700\u591a\u6709 \u4e2a\u8282\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_334","title":"\u5b9a\u7406","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_335","title":"\u6df1\u5ea6\u4e3a \u7684\u4e8c\u53c9\u6811\uff0c\u6700\u591a\u6709 \u4e2a\u8282\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_336","title":"\u5b9a\u7406","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_337","title":"\u4ee4\u4e00\u9897\u4e8c\u53c9\u6811 \u6709 \u4e2a\u8282\u70b9\uff0c\u5176\u4e2d \u5206\u522b\u4e3a \u7684\u8282\u70b9\u4e2a\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_338","title":"\u5373\u6709","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_339","title":"\u53ef\u77e5 \u7684\u6839\u65e0\u53cc\u4eb2\u8282\u70b9\uff0c\u800c\u5176\u4ed6\u7684\u8282\u70b9\u90fd\u6709\u53cc\u4eb2 \u4ee4\u8fd9\u4e9b\u8282\u70b9\u7684\u4e2a\u6570\u4e3a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_340","title":"\u5373","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_341","title":"\u7531 \u53ef\u77e5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_342","title":"\u6240\u4ee5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_343","title":"\u5b8c\u5168\u4e8c\u53c9\u6811\u6027\u8d28\u53ca\u5b9a\u7406","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_344","title":"\u5b9a\u4e49","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_345","title":"\u6df1\u5ea6\u4e3a \u7684\uff0c\u7531 \u4e2a\u8282\u70b9\u7684\u4e8c\u53c9\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_346","title":"\u5f53\u4e14\u4ec5\u5f53\u5176\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u4e0e\u6df1\u5ea6\u4e3a \u7684\u6ee1\u4e8c\u53c9\u6811\u4e2d\u7f16\u53f7\u4ece \u5230 \u7684\u8282\u70b9\u4e00\u4e00\u5bf9\u5e94\u65f6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_347","title":"\u79f0\u5176\u4e3a\u5b8c\u5168\u4e8c\u53c9\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_348","title":"\u5982\u4e0b\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_349","title":"\u7279\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_350","title":"\u5bf9\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u4efb\u610f\u8282\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_351","title":"\u82e5\u5176\u53f3\u5206\u652f\u7684\u5b50\u5b59\u6700\u5927\u5c42\u6b21\u4e3a \uff0c\u5219\u5176\u5de6\u5206\u652f\u7684\u5b50\u5b59\u6700\u5927\u5c42\u6b21\u4e3a \u6216","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_352","title":"\u5b9a\u7406","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_353","title":"\u82e5\u4e00\u4e2a\u5b8c\u5168\u4e8c\u53c9\u6811\u6709 \u4e2a\u8282\u70b9\uff0c\u6df1\u5ea6\u4e3a \uff0c\u5219","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_354","title":"\u6839\u636e\u5b8c\u5168\u4e8c\u53c9\u6811\u6027\u8d28\u53ef\u77e5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_355","title":"\u5bf9\u5176 \u5316","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_356","title":"\u56e0\u4e3a \u6240\u4ee5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_357","title":"\u5b9a\u7406","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_358","title":"\u4e00\u9897\u5b8c\u5168\u4e8c\u53c9\u6811 \uff0c\u6709 \u4e2a\u8282\u70b9\uff0c\u82e5\u6309\u7167\u8282\u70b9\u5c42\u6b21\u4ece\u5de6\u5230\u53f3\u7ed9\u5176\u7f16\u53f7\uff0c\u5219\u5bf9\u4e8e\u4efb\u610f\u8282\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_359","title":"\u65e0\u53cc\u4eb2","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_360","title":"\u7684\u53cc\u4eb2\u4e3a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_361","title":"\u5219\u65e0\u5de6\u5b69\u5b50","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_362","title":"\u4e3a\u7684\u5de6\u5b69\u5b50","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_363","title":"\u5219\u65e0\u53f3\u5b69\u5b50","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_364","title":"\u5219 \u4e3a\u7684\u53f3\u5b69\u5b50","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_365","title":"\u5982\u4e0b\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_366","title":"\u94fe\u5f0f\u4e8c\u53c9\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_367","title":"\u5b58\u50a8\u7ed3\u6784","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_368","title":"\u904d\u5386\u65b9\u5f0f(\u9012\u5f52)","text":"<p><pre><code>typedef char BitreeElemType;\ntypedef struct __BiNode {\nBitreeElemType data;\n__BiNode *lchild, *rchild;\n} BiNode, *BiTree;\n</code></pre> <pre><code>void InOrder(BiTree T) {\nif (!T)\nreturn;\nInOrder(T-&gt;lchild);\nprintf(\"%c \", T-&gt;data);\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_369","title":"\u904d\u5386\u65b9\u5f0f(\u975e\u9012\u5f52)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_370","title":"\u5148\u5e8f\u904d\u5386\u521b\u5efa\u4e8c\u53c9\u6811","text":"<p><pre><code>InOrder(T-&gt;rchild);\n}\n</code></pre> <pre><code>void PreOrder(BiTree T) {\nif (!T)\nreturn;\nprintf(\"%c \", T-&gt;data);\nPreOrder(T-&gt;lchild);\nPreOrder(T-&gt;rchild);\n}\n</code></pre> <pre><code>void PostOrder(BiTree T) {\nif (!T)\nreturn;\nPostOrder(T-&gt;lchild);\nPostOrder(T-&gt;rchild);\nprintf(\"%c \", T-&gt;data);\n}\n</code></pre> <pre><code>void InOrder_unrec(BiTree T) {\nSqStack S;\nInitStack(&amp;S);\nBiTree p = T;\n// BiTree pop = NULL;\nwhile (p || !IsEmpty(&amp;S)) {\nif (p) {\n//\u6808\u9876\u5143\u7d20\u59cb\u7ec8\u662fp\u7684parent\u8282\u70b9\nPush(&amp;S, p);\np = p-&gt;lchild;\n} else {\nPop(&amp;S, &amp;p); //\u628a\u6808\u9876\u5143\u7d20\u5f39\u51fa\u7ed9p\uff0c\u6b64\u65f6\u53d8\u6210\u4e86\u539fp\u7684parent\n//\u6b64\u65f6p\u7684\u5de6\u5b69\u5b50\u4e3a\u7a7a\uff0c\u6839\u636ein-oder\u89c4\u5219\uff0c\u8f93\u51fa\u6839\u8282\u70b9p\uff0c\u7136\u540e\u518d\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u904d\u5386\u4ed6\u7684\u53f3\u5b69\u5b50\nprintf(\"%c\", p-&gt;data);\np = p-&gt;rchild; //\u8f93\u51fa\u6839\u8282\u70b9\u540e\uff0c\u904d\u5386\u5176\u53f3\u5b50\u6811\n}\n}\n}\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_371","title":"\u6d4b\u8bd5(\u521b\u5efa\uff0c\u904d\u5386)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_372","title":"\u8f93\u5165\u5982\u4e0b\u4e00\u68f5\u6811\uff0c\u6309\u7167\u4e2d\u5e8f\u904d\u5386\u65b9\u5f0f\u8f93\u51fa","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_373","title":"\u5c42\u6b21\u904d\u5386\u7b97\u6cd5","text":"<p><pre><code>void Creat_BiTree_Pre(BiTree *T) {\n//\u6839\u636e\u8f93\u51fa\u5b57\u7b26\u8bc6\u522b\u865a\u7a7a\u8282\u70b9\uff0c'#' \u4ee3\u8868\u865a\u7a7a\u8282\u70b9\nchar e;\nscanf(\" %c\", &amp;e); //\u8f93\u5165\u5b57\u7b26\nif ('#' == e)\n*T = NULL; //\u8bbe\u7f6e\u865a\u7a7a\u8282\u70b9\nelse {\n*T = (BiTree)malloc(sizeof(BiNode));\n(*T)-&gt;data = e;\nCreat_BiTree_Pre(&amp;(*T)-&gt;lchild);\nCreat_BiTree_Pre(&amp;(*T)-&gt;rchild);\n}\n}\n</code></pre> <pre><code>#include \"BinaryTree.h\"\n</code></pre> <pre><code>int main(void) {\nBiTree T = NULL;\nCreat_BiTree_Pre(&amp;T);\nInOrder_unrec(T); //\u975e\u9012\u5f52\n// InOrder(T); \u9012\u5f52\u8c03\u7528\nsystem(\"pause\");\nreturn 0 ;\n}\n// \u8f93\u5165\u6570\u636e\uff1aCDNK##J##BZ###FL##M##\n// \u8f93\u51fa: KNJDZBCLFM\n</code></pre> <pre><code>void LevelOrer(BiTree T) {\nBiTree temp = NULL;\nSqQueue Q;\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_374","title":"\u590d\u5236\u4e8c\u53c9\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_375","title":"\u6c42\u6df1\u5ea6\u548c\u8282\u70b9\u6570","text":"<p><pre><code>InitQueue(&amp;Q);\nif (T) // \u5148\u5165\u961f\u6839\nEntryQ(&amp;Q, T);\nwhile (!IsEmpty(&amp;Q)) {\nOutQ(&amp;Q, &amp;temp); // temp\u6682\u5b58\u5f39\u51fa\u503c\nprintf(\"%c\", temp-&gt;data); //\u8f93\u51fa\nif (temp-&gt;lchild) //\u5728\u5165\u961ftemp\u7684\u5de6\u5b69\u5b50\u548c\u53f3\u5b69\u5b50\nEntryQ(&amp;Q, temp-&gt;lchild);\nif (temp-&gt;rchild)\nEntryQ(&amp;Q, temp-&gt;rchild);\n}\n}\n</code></pre> <pre><code>/*\ninput: CDNK##J##BZ###FL##M##\n------------------------------------------\noutput:CDFNBLMKJZ\n*/\n</code></pre> <pre><code>void Copy(BiTree *Tnew, const BiTree T) {\nif (!T) {\n*Tnew = NULL;\nreturn;\n} else {\n*Tnew = (BiTree)malloc(sizeof(BiNode));\n(*Tnew)-&gt;data = T-&gt;data;\nCopy(&amp;(*Tnew)-&gt;lchild, T-&gt;lchild);\nCopy(&amp;(*Tnew)-&gt;rchild, T-&gt;rchild);\n}\n}\n</code></pre> <pre><code>int Depth(BiTree T) {\nif (!T)\nreturn 0 ;\nelse {\nreturn Depth(T-&gt;lchild) &gt; Depth(T-&gt;rchild)? Depth(T-&gt;lchild) + 1\n: Depth(T-&gt;rchild) + 1 ;\n}\n}\n</code></pre> <pre><code>int Nodes(BiTree T) {\nif (!T)\nreturn 0 ;\nelse\nreturn 1 + Nodes(T-&gt;lchild) + Nodes(T-&gt;rchild);\n}\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_376","title":"\u9500\u6bc1\u4e8c\u53c9\u6811(\u9012\u5f52\u548c\u975e\u9012\u5f52)","text":"<p><pre><code>//\u9012\u5f52\u7684\u65b9\u5f0f\nvoid Destroy(BiTree *root) {\n//\u9500\u6bc1\u64cd\u4f5c\u5fc5\u987b\u6309\u7167\u540e\u7eed\u904d\u5386\u7684\u987a\u5e8f\nif (!(*root))\nreturn;\nelse {\nDestroy(&amp;(*root)-&gt;lchild);\nDestroy(&amp;(*root)-&gt;rchild);\nfree(*root);\n*root = NULL;\n}\n}\n</code></pre> <pre><code>void Destroy_unrec(BiTree *root) {\n//\u6b64\u7b97\u6cd5\u7684\u601d\u8def\u662f:\u521b\u5efa\u4e00\u4e2a\u94fe\u6808\uff0c\u5206\u522b\u4f9d\u6b21\u5165\u6808\n//&lt;\u6839\u8282\u70b9&gt;,&lt;\u6839\u8282\u70b9\u7684\u5de6\u5b69\u5b50&gt;,&lt;\u5de6\u5b69\u5b50\u7684\u5de6\u5b69\u5b50&gt;,.....&lt;\u6700\u540e\u4e00\u4e2a\u5de6\u5b69\u5b50&gt;\n//\u5229\u7528lchild\u5145\u5f53\u94fe\u6808\u7684next.\n//\u5f53lchild\u53d1\u751f\u53d8\u6cd5\u65f6\uff0c\u6811\u7684\u7ed3\u6784\u5fc5\u7136\u53d1\u751f\u53d8\u5316\uff0c\u6240\u4ee5\u9700\u8981\u4e00\u4e2acurrent\u6307\u9488\u6765\u6307\u5411\u5165\u6808\u8282\u70b9\n//\u5f53\u6240\u6709\u6839\u8282\u70b9\u5de6\u5b50\u6811\u7684\u6240\u6709\u5de6\u5b69\u5b50\u5165\u6808\u5b8c\u6bd5\uff0c\u4f7fcurrent\u6307\u5411\u6808\u9876top\n//\u5224\u65ad\u6808\u9876\u8282\u70b9\u662f\u5426\u6709\u53f3\u5b69\u5b50\uff0c\u5982\u679c\u6709\u5219current\u6307\u5411\u5b83\u7684\u53f3\u5b69\u5b50\uff0c\u5e76\u628acurrent\u5165\u6808\n//\u5982\u679c\u6ca1\u6709\u53f3\u5b69\u5b50\uff0c\u5219\u51fa\u6808\uff0c\u5e76\u91ca\u653e\u6808\u9876\n//\u91cd\u590d\u6b64\u6b65\u9aa4\nBiTree top = NULL; //\u521d\u59cb\u5316\u4e00\u4e2a\u94fe\u6808\nBiTree temp; //\u6682\u5b58current\nBiTree current = (*root)-&gt;lchild; //\u56e0\u4e3a\u8981\u628aroot\u5165\u6808\uff0ccurrent\u6307\u5411root\u7684\u5de6\u5b69\u5b50\n(*root)-&gt;lchild = top; //\u56e0\u4e3alchild\u5145\u5f53\u94fe\u6808\u7684next\uff0c\u6240\u4ee5lchild\u6307\u5411top\ntop = *root; //\u6b64\u65f6root\u53d8\u6210\u6808\u9876\n</code></pre> <pre><code>while (top) {\nwhile (current) { //\u5982\u679ccurrent\u4e0d\u4e3a\u7a7a\uff0c\u5219\u5165\u6808\ntemp = current; //\u6682\u5b58current\ncurrent = current-&gt;lchild;\ntemp-&gt;lchild = top; //\u5165\u6808\ntop = temp;\n}\n//\u6b64\u65f6\u5df2\u7ecf\u628aroot\u7684\u5de6\u5b69\u5b50\uff0c\u5de6\u5b69\u5b50\u7684\u5de6\u5b69\u5b50.....\u5165\u6808\uff0c\u6808\u9876\u4e3a\u6811\u7684\u6700\u5de6\u8def\u5f84\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\ncurrent = top; // current \u548c top \u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\nif (current-&gt;rchild) { //\u5982\u679c\u6808\u9876\u6709\u53f3\u5b69\u5b50\ntemp = current;\n// current\u6307\u5411\u5b83\u7684\u53f3\u5b69\u5b50\uff0c\u7136\u540e\u518d\u6b21\u5faa\u73af\u4e0a\u9762\u7684\u6b65\u9aa4\ncurrent = current-&gt;rchild;\n//\u56e0\u4e3a\u6808\u9876\u7684\u53f3\u5b69\u5b50\u5730\u5740\u5df2\u7ecf\u88abcurrent\u4fdd\u5b58\uff0c\u6240\u4ee5\u53ef\u4ee5\u628a\u8be5\u6307\u9488\u6307\u5411NULL\ntemp-&gt;rchild = NULL;\n} else { // \u5982\u679c\u6808\u9876\u5143\u7d20\u6ca1\u6709\u5de6\u5b69\u5b50\n//\u6b64\u65f6top\u548ccurrent\u6307\u5411\u540c\u4e00\u8282\u70b9\ntop = top-&gt;lchild;\nfree(current);\ncurrent = NULL;\n//\u56de\u5230\u4e0a\u9762\u7684\u5faa\u73af\u65f6\uff0c\u56e0\u4e3acurrent\u4e3a\u7a7a\uff0c\u6240\u4ee5\u4e0d\u4f1a\u6709\u5143\u7d20\u5165\u6808\uff0c\u5e76\u4e14current\u4f1a\u6307\u5411\u6808\u9876\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_377","title":"\u5934\u6587\u4ef6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#threaded-binary-tree_1","title":"\u7ebf\u7d22\u4e8c\u53c9\u6811 Threaded Binary Tree(\u4e86\u89e3\u5373\u53ef)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_378","title":"\u95ee\u9898\uff0c\u5982\u4f55\u5bfb\u627e\u7279\u70b9\u904d\u5386\u987a\u5e8f\u4e2d\u4e8c\u53c9\u6811\u8282\u70b9\u7684\u524d\u9a71\u548c\u540e\u7ee7","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_379","title":"\u529e\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_380","title":"\u901a\u8fc7\u904d\u5386\uff0c\u6d6a\u8d39\u65f6\u95f4","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_381","title":"\u7ed9\u7ed3\u6784\u4f53\u5185\u589e\u52a0\u524d\u9a71\u548c\u540e\u7ee7\u6307\u9488\uff0c\u589e\u52a0\u5b58\u50a8\u8d1f\u62c5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_382","title":"\u5229\u7528\u4e8c\u53c9\u94fe\u8868\u4e2d\u7684\u7a7a\u6307\u9488\u57df","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_383","title":"\u5b9a\u7406","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_384","title":"\u5982\u679c\u4e00\u4e2a\u4e8c\u53c9\u6811\u6709 \u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u7a7a\u6307\u9488\u57df\u4e3a \u4e2a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_385","title":"\u603b\u6307\u9488\u57df\u4e3a \u4e2a\uff0c\u9664\u53bb\u6839\u8282\u70b9\uff0c\u4e00\u4e2a\u6709 \u4e2a\u8282\u70b9\uff0c\u5373\u9700\u8981 \u4e2a\u6307\u9488\u57df","text":"<p><pre><code>}\n}\n*root = NULL; //\u9500\u6bc1\u5b8c\u6bd5\uff0c\u628aroot\u6307\u5411\u7a7a\n}\n</code></pre> <pre><code>#include \"Queue.h\"\n#include \"Stack.h\"\n#include \"define.h\"\n</code></pre> <pre><code>#ifndef __BINARYTREE_H\n#define __BINARYTREE_H\n</code></pre> <pre><code>typedef char BitreeElemType;\ntypedef struct __BiNode {\nBitreeElemType data;\n__BiNode *lchild, *rchild;\n} BiNode, *BiTree;\n</code></pre> <pre><code>void Creat_BiTree_Pre(BiTree *T);\nvoid InOrder(BiTree T);\nvoid InOrder_unrec(BiTree T);\nvoid PreOrder(BiTree T);\nvoid PostOrder(BiTree T);\nvoid LevelOrer(BiTree T);\nvoid Copy(BiTree *Tnew, const BiTree T);\nint Depth(BiTree T);\nint Nodes(BiTree T);\nvoid Destroy_unrec(BiTree *root);\nvoid Destroy(BiTree *root);\n#endif\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_386","title":"\u7ebf\u7d22\u4e8c\u53c9\u6811\u7684\u5b9a\u4e49","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_387","title":"\u5982\u679c\u67d0\u4e2a\u8282\u70b9\u7684\u5de6\u5b69\u5b50\u4e3a\u7a7a\uff0c\u90a3\u4e48\u5229\u7528\u5de6\u5b69\u5b50\u6307\u9488\u57df\uff0c\u628a\u5b83\u6307\u5411\u5b83\u7684\u524d\u9a71","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_388","title":"\u5982\u679c\u53f3\u5b69\u5b50\u4e3a\u7a7a\uff0c\u5219\u6307\u5411\u5b83\u540e\u7ee7","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_389","title":"\u8fd9\u79cd\u6539\u53d8\u6307\u5411\u7684\u6307\u9488\u79f0\u4e3a\u7ebf\u7d22","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_390","title":"\u6570\u636e\u7c7b\u578b\u5b9a\u4e49","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_391","title":"\u5de6\u5b69\u5b50\u4e3a\u7a7a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_392","title":"\u5de6\u5b69\u5b50\u6307\u5411\u524d\u9a71","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_393","title":"\u53f3\u5b69\u5b50\u4e3a\u7a7a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_394","title":"\u53f3\u5b69\u5b50\u6307\u5411\u524d\u9a71","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_395","title":"\u5982\u679c\u6309\u7167\u904d\u5386\u7684\u987a\u5e8f\uff0c\u90a3\u4e48\u5e8f\u5217\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u5fc5\u7136\u6ca1\u6709\u524d\u9a71","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_396","title":"\u628a\u8be5\u8282\u70b9\u7684\u5de6\u5b69\u5b50\u6307\u5411\u4e00\u4e2a\u5934\u6307\u9488","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_397","title":"\u8be5\u5934\u6307\u9488\u7684\u5de6\u5b69\u5b50\u6307\u5411\u6839\u8282\u70b9\uff0c\u53f3\u5b69\u5b50\u6307\u5411\u5e8f\u5217\u6700\u540e\u4e00\u4e2a\u8282\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_398","title":"\u4e00\u4e2a\u4e2d\u5e8f\u904d\u5386\u4e3a \u7684\u7ebf\u7d22\u4e8c\u53c9\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_399","title":"\u5982\u4e0b\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_400","title":"\u6811\u548c\u68ee\u6797","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_401","title":"\u6811\u7684\u5b58\u50a8\u7ed3\u6784","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#1_6","title":"1. \u53cc\u4eb2\u8868\u793a\u6cd5","text":"<pre><code>typedef struct BiThrNode {\nint data;\nint ltag, rtag; //\u4e3a\u4e86\u533a\u5206\u5de6\u53f3\u5b69\u5b50\u6307\u5411\u4e3a\u7a7a\u8fd8\u662f\u524d\u9a71\u6216\u540e\u7ee7\uff0c\u65b0\u589eltag,rtag\nBiThrNode * lchidl, *rchild;\n} *BiThrTree;\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#2_4","title":"2. \u5b69\u5b50\u94fe\u8868","text":"<p><pre><code>struct PTNode {\nDataType data;\nint parent; //\u5b58\u653eparent\u5728\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\n};\n</code></pre> <pre><code>struct PTree {\nPTNode[MAXSIZE];\nint root; //\u6839\u8282\u70b9\u4f4d\u7f6e\nint n; //\u5f53\u524d\u8282\u70b9\u4e2a\u6570\n};\n</code></pre> <pre><code>//\u5b69\u5b50\u8282\u70b9\u7ed3\u6784\nstruct CTNode {\nint chlid;\nCTNode *next;\n};\n</code></pre> <pre><code>//\u53cc\u4eb2\u7ed3\u70b9\u7ed3\u6784\nstruct CTBox {\nDataType data;\nint parent; //\u53ef\u6709\u53ef\u65e0\uff0c\u770b\u5177\u4f53\u9700\u6c42\nCTNode * child;\n};\n</code></pre> <pre><code>//\u6574\u4f53\u6811\u7ed3\u6784\nstruct CTree {\nCTBox[MAXSIZE];\nint root;\nint n;\n};\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#3_5","title":"3. \u5b69\u5b50\u5144\u5f1f\u8868\u793a\u6cd5(\u6811\u8f6c\u5316\u4e8c\u53c9\u6811\u7684\u57fa\u7840)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_402","title":"\u6811\u4e0e\u4e8c\u53c9\u6811\u4e4b\u95f4\u76f8\u4e92\u8f6c\u6362","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_403","title":"\u6811\u8f6c\u4e8c\u53c9\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_404","title":"\u5728\u5144\u5f1f\u4e4b\u95f4\u8fde\u7ebf","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_405","title":"\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u8282\u70b9 \uff0c\u9664\u4e86\u5176\u5de6\u5b69\u5b50\u5916\uff0c\u53bb\u9664\u6389\u6240\u6709\u5b69\u5b50\u4e0e\u5176\u7684\u5173\u7cfb","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_406","title":"\u4ee5\u6839\u8282\u70b9\u7684\u5de6\u5b69\u5b50\u4e3a\u4e2d\u5fc3\uff0c\u987a\u65f6\u9488\u65cb\u8f6c \uff0c\u518d\u4e0e\u6839\u8282\u70b9\u76f8\u8fde","text":"<pre><code>//\u8282\u70b9\u7684child\u6307\u9488\u57df\u6307\u5411\u5b83\u7684\u7b2c\u4e00\u4e2a\u5b69\u5b50\uff0csibling\u6307\u5411\u7b2c\u4e00\u4e2a\u5144\u5f1f\nstruct CSNode {\nDataType data;\nCSNode * child, *sibling;\n};\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_407","title":"\u4e8c\u53c9\u6811\u8f6c\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_408","title":"\u82e5 \u8282\u70b9\u662f\u53cc\u4eb2\u8282\u70b9\u7684\u5de6\u5b69\u5b50\uff0c\u5219\u5c06 \u7684\u53f3\u5b69\u5b50\uff0c\u53f3\u5b69\u5b50\u7684\u53f3\u5b69\u5b50 \u8fde\u63a5\u5230 \u7684\u53cc\u4eb2\u7ed3\u70b9\u4e0a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_409","title":"\u62b9\u6389\u6240\u6709\u53cc\u4eb2\u7ed3\u70b9\u548c\u53f3\u5b69\u5b50\u4e4b\u95f4\u5173\u7cfb","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_410","title":"\u6574\u7406\u6210\u6811\u72b6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_411","title":"\u68ee\u6797\u4e0e\u4e8c\u53c9\u6811\u4e4b\u95f4\u7684\u8f6c\u5316","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_412","title":"\u68ee\u6797\u8f6c\u4e8c\u53c9\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_413","title":"\u5c06\u68ee\u6797\u4e2d\u7684\u5404\u68f5\u6811\u8f6c\u5316\u4e3a\u4e8c\u53c9\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_414","title":"\u94fe\u63a5\u8fd9\u4e9b\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_415","title":"\u7b2c\u4e00\u68f5\u6811\u7684\u6839\u4e3a\u4e8c\u53c9\u6811\u7684\u6839\uff0c\u8fdb\u884c\u8c03\u6574","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_416","title":"\u4e8c\u53c9\u6811\u8f6c\u68ee\u6797","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_417","title":"\u82e5\u662f\u4e8c\u53c9\u6811\u7684\u6839\uff0c\u5219\u53d6\u6d88\u6240\u6709 \u7684\u53f3\u5b69\u5b50\uff0c\u53f3\u5b69\u5b50\u7684\u53f3\u5b69\u5b50 \u4e4b\u95f4\u7684\u5173\u7cfb","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_418","title":"\u6b64\u65f6\u6709 \u9897\u5b64\u7acb\u7684\u4e8c\u53c9\u6811\uff0c\u628a\u8fd9\u4e9b\u4e8c\u53c9\u6811\u8f6c\u6210\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_419","title":"\u6811\u548c\u68ee\u6797\u7684\u904d\u5386","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_420","title":"\u6811\u7684\u904d\u5386","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_421","title":"\u5148\u6839\u904d\u5386 \u82e5\u6811\u4e0d\u4e3a\u7a7a\uff0c\u5219\u5148\u8bbf\u95ee\u6839\u8282\u70b9\uff0c\u7136\u540e\u518d\u4f9d\u6b21\u5148\u6839\u904d\u5386\u904d\u5386\u5404\u4e2a\u5b50\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_422","title":"\u540e\u6839\u904d\u5386 \u82e5\u6811\u4e0d\u4e3a\u7a7a\uff0c\u5148\u4f9d\u6b21\u540e\u6839\u904d\u5386\u5404\u4e2a\u5b50\u6811\uff0c\u518d\u8bbf\u95ee\u6839\u8282\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_423","title":"\u5c42\u6b21\u904d\u5386 \u81ea\u4e0a\u5230\u4e0b\uff0c\u4ece\u5de6\u5230\u53f3","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#s","title":"s","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_424","title":"\u5148\u6839\u904d\u5386\u4e3a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_425","title":"\u540e\u6839\u904d\u5386","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_426","title":"\u68ee\u6797\u7684\u904d\u5386","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_427","title":"\u5047\u8bbe\u6709\u68ee\u6797 \uff0c\u6709 \u68f5\u4e92\u4e0d\u76f8\u4ea4\u7684\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_428","title":"\u5c06\u68ee\u6797\u770b\u6210\u4e09\u90e8\u5206","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_429","title":"\u68ee\u6797\u4e2d\u7b2c\u4e00\u68f5\u6811\u7684\u6839\u8282\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_430","title":"\u68ee\u6797\u4e2d\u7b2c\u4e00\u68f5\u6811\u7684\u6240\u6709\u5b50\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_431","title":"\u68ee\u6797\u4e2d \u5230 \u9897\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_432","title":"\u5148\u5e8f\u904d\u5386","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_433","title":"\u8bbf\u95ee \u7684\u6839\u8282\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_434","title":"\u5148\u5e8f\u904d\u5386 \u7684\u6240\u6709\u5b50\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_435","title":"\u5148\u5e8f\u904d\u5386 \u5230","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_436","title":"\u5373\u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u5bf9 \u8fdb\u884c\u5148\u6839\u904d\u5386","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_437","title":"\u4e2d\u5e8f\u904d\u5386","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_438","title":"\u4e2d\u5e8f\u904d\u5386 \u7684\u6240\u6709\u5b50\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_439","title":"\u8bbf\u95ee \u7684\u6839\u8282\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_440","title":"\u4e2d\u5e8f\u904d\u5386 \u5230","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_441","title":"\u5373\u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u5bf9 \u8fdb\u884c\u540e\u6839\u904d\u5386","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_442","title":"\u5bf9\u4e0a\u56fe\u8fdb\u884c\u5148\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_443","title":"\u5148\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_444","title":"\u4e2d\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_445","title":"\u54c8\u592b\u66fc\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_446","title":"\u672f\u8bed","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_447","title":"\u8def\u5f84","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_448","title":"\u4ece\u6811\u4e2d\u4e00\u4e2a\u8282\u70b9\u5230\u53e6\u4e00\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u5206\u652f\uff0c\u7ec4\u6210\u4e24\u4e2a\u8282\u70b9\u95f4\u7684\u8def\u5f84","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_449","title":"\u8282\u70b9\u7684\u8def\u5f84\u957f\u5ea6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_450","title":"\u4e24\u8282\u70b9\u95f4\u8def\u5f84\u4e0a\u7684\u5206\u652f\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_451","title":"\u6811\u7684\u8def\u5f84\u957f\u5ea6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_452","title":"\u4ece\u6811\u6839\u5230\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u8def\u5f84\u957f\u5ea6\u4e4b\u548c\uff0c\u8bb0\u4f5c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_453","title":"\u8282\u70b9\u6570\u76ee\u76f8\u540c\u7684\u4e8c\u53c9\u6811\u4e2d\uff0c\u5b8c\u5168\u4e8c\u53c9\u6811\u662f\u8def\u5f84\u957f\u5ea6\u6700\u77ed\u7684\u4e8c\u53c9\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_454","title":"\u6743","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_455","title":"\u5c06\u6811\u4e2d\u8282\u70b9\u8d4b\u7ed9\u4e00\u4e2a\u542b\u6709\u67d0\u79cd\u610f\u4e49\u7684\u503c\uff0c\u8fd9\u4e2a\u503c\u53eb","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_456","title":"\u7ed3\u70b9\u7684\u5e26\u6743\u8def\u5f84\u957f\u5ea6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_457","title":"\u4ece\u6839\u8282\u70b9\u5230\u8be5\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u957f\u5ea6\u4e0e\u8be5\u8282\u70b9\u7684\u4e58\u79ef\uff0c\u5373","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_458","title":"\u6811\u7684\u5e26\u6743\u8def\u5f84\u957f\u5ea6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_459","title":"\u6811\u4e2d\u6240\u6709\u53f6\u5b50\u8282\u70b9\u7684\u5e26\u6743\u8def\u5f84\u957f\u5ea6\u4e4b\u548c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_460","title":"\u5982\u4e0b\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_461","title":"\u6700\u4f18\u4e8c\u53c9\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_462","title":"\u54c8\u592b\u66fc\u6811\uff0c\u53c8\u79f0\u6700\u4f18\u4e8c\u53c9\u6811\uff0c\u5373\u5e26\u6743\u8def\u5f84 \u6700\u77ed\u7684\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_463","title":"\u6ce8\u610f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_464","title":"\u662f \u76f8\u540c\u7684\u6811\u6bd4\u8f83\u4e4b\u4e0b","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_465","title":"\u5b8c\u5168\u4e8c\u53c9\u6811\u5305\u62ec\u6ee1\u4e8c\u53c9\u6811\u4e0d\u4e00\u5b9a\u662f\u54c8\u592b\u66fc\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_466","title":"\u54c8\u592b\u66fc\u6811\u4e2d\u6743\u503c\u8d8a\u5927\u7684\u53f6\u5b50\u8282\u70b9\u79bb\u6839\u8282\u70b9\u8d8a\u8fd1","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_467","title":"\u5177\u6709\u76f8\u540c\u5e26\u6743\u8def\u5f84\u7684\u54c8\u592b\u66fc\u6811\uff0c\u8282\u70b9\u4f4d\u7f6e\u4e0d\u552f\u4e00","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_468","title":"\u6784\u9020\u54c8\u592b\u66fc\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#step_1","title":"step\u548c\u5b9a\u7406","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_469","title":"\u6839\u636e \u4e2a\u7ed9\u5b9a\u7684\u6743\u503c \u6784\u6210 \u4e2a\u53ea\u6709\u6839\u8282\u70b9\u7684\u68ee\u6797 \u68ee\u6797\u91cc\u5168\u662f\u6839","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_470","title":"\u5728 \u4e2d\u9009\u53d6\u4e24\u4e2a\u6743\u503c\u6700\u5c0f\u7684\u6811 \uff0c\u6784\u9020\u4e00\u9897\u65b0\u7684\u4e8c\u53c9\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_471","title":"\u5728 \u4e2d\u5220\u9664 \uff0c\u628a \u52a0\u5165 \u4e2d","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_472","title":"\u91cd\u590d\u5982\u4e0a\u6b65\u9aa4\uff0c\u76f4\u5230 \u4e2d\u53ea\u6709\u4e00\u9897\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_473","title":"\u5b9a\u7406","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_474","title":"\u5305\u542b \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u9700\u8981\u7ecf\u8fc7 \u6b21\u5408\u5e76\u624d\u80fd\u5f62\u6210\u54c8\u592b\u66fc\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_475","title":"\u5b9a\u7406","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_476","title":"\u628a\u4e00\u9897\u542b\u6709 \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u8f6c\u5316\u6210\u54c8\u592b\u66fc\u6811\uff0c\u90a3\u4e48\u8fd9\u4e2a\u54c8\u592b\u66fc\u6811\u4e00\u5171\u6709 \u4e2a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_477","title":"\u5b9a\u7406","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_478","title":"\u4ee3\u7801\u5b9e\u73b0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_479","title":"\u6570\u636e\u7c7b\u578b\u5b9a\u4e49","text":"<pre><code>typedef struct __HTNode {\nint weight;\nint parent, lchild, rchild;\n} HTNode, *HTree;\n</code></pre> <p>\u524d\u7f6e\u51fd\u6570\uff0c\u9009\u53d6\u4e24\u4e2a\u6700\u5c0f\u503c</p> <p>Creat_Huffman</p> <p><pre><code>void Select_Min(const HTree T, int length, int *e1, int *e2) {\nint min1, min2;\nmin1 = min2 = INT_MAX;\nint pos1, pos2;\npos1 = pos2 = 0 ;\n</code></pre> <pre><code>for (int i = 1 ; i &lt; length + 1 ; ++i) {\nif (T[i].parent == 0 ) { //! parent==0 \u8bf4\u660e\u5728\u68ee\u6797\u4e2d\nif (T[i].weight &lt; min1) {\nmin2 = min1;\npos2 = pos1;\nmin1 = T[i].weight;\npos1 = i;\n} else if (T[i].weight &lt; min2) {\nmin2 = T[i].weight;\npos2 = i;\n}\n}\n}\n</code></pre> <pre><code>*e1 = pos1;\n*e2 = pos2;\n}\n</code></pre> <pre><code>void Creat_Huffman(HTree *T, int n) {\nif (n &lt;= 1 )\nreturn;\nint m = 2 * n - 1 ; //\u5b9a\u7406 2\n</code></pre> <pre><code>*T = (HTree)malloc(sizeof(HTNode) * (m + 1 )); // 0\u53f7\u4f4d\u7f6e\u4e0d\u5b58\u5143\u7d20\n</code></pre> <pre><code>for (int i = 1 ; i &lt; m + 1 ; ++i) { //\u8fdb\u884c\u521d\u59cb\u5316\n(*T)[i].lchild = (*T)[i].rchild = 0 ;\n(*T)[i].parent = 0 ;\n}\n</code></pre> <pre><code>for (int i = 1 ; i &lt; n + 1 ; ++i) { //\u8d4b\u503cweight\nscanf(\" %d\", &amp;(*T)[i].weight);\n}\n//-------------------\u521d\u59cb\u5316\u5b8c\u6bd5\uff0c\u5f00\u59cb\u6784\u9020--------------------------\nint min1, min2; //\u8868\u793a\u7b2c\u4e00\u5c0f\u548c\u7b2c\u4e8c\u5c0f\u7684\u4f4d\u7f6e\nfor (int i = n + 1 ; i &lt; m + 1 ; ++i) { // n+1\u53f7\u4f4d\u7f6e\u4e3a\u65b0\u6784\u9020\u7684\u8282\u70b9\u4e0b\u6807\nSelect_Min(*T, i - 1 , &amp;min1, &amp;min2); //! \u6838\u5fc3\u8bed\u53e5 \u52a8\u6001\u7684\u9009\u62e9\u5927\u5c0f\n</code></pre> <pre><code>(*T)[min1].parent = (*T)[min2].parent = i; //\u5408\u5e76\n(*T)[i].lchild = min1; //\u65b0\u8282\u70b9\u7684\u5de6\u53f3\u5b69\u5b50\n(*T)[i].rchild = min2;\n(*T)[i].weight = (*T)[min1].weight + (*T)[min2].weight; //\u8d4b\u503c\u6743\u503c\n}\n}\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_480","title":"\u6d4b\u8bd5\u4ee3\u7801","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_481","title":"\u54c8\u592b\u66fc\u7f16\u7801","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_482","title":"\u8ba8\u8bba\u7684\u80cc\u666f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_483","title":"\u5728\u8fdc\u7a0b\u901a\u4fe1\u4e2d\u4f20\u9012\u5b57\u7b26\u4e32\u65f6\uff0c\u9700\u8981\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u7684\u5b57\u7b26\u4e32","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_484","title":"\u5373\uff0c\u8ba9\u5f85\u4f20\u9012\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u6b21\u6570\u591a\u7684\u5b57\u7b26\u91c7\u7528\u5c3d\u53ef\u80fd\u77ed\u7684\u7f16\u7801","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_485","title":"\u8fd9\u6837\u7684\u8bdd\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u7684\u7f16\u7801\u5c31\u4f1a\u7f29\u77ed","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_486","title":"\u4f46\uff0c\u7531\u4e8e\u4e8c\u8fdb\u5236\u53ea\u6709 \u548c \uff0c\u6240\u4ee5\u6709\u53ef\u80fd\u4e8c\u8fdb\u5236\u4ee3\u7801\u8f6c\u6210\u5b57\u7b26\u65f6\uff0c\u51fa\u73b0\u4e8c\u4e49\u6027","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_487","title":"\u6240\u4ee5\u8981\u8bbe\u8ba1\u957f\u5ea6\u4e0d\u7b49\u7684\u7f16\u7801\uff0c\u5219\u5fc5\u987b\u4f7f\u4efb\u4e00\u5b57\u7b26\u7684\u7f16\u7801\u90fd\u4e0d\u662f\u53e6\u4e00\u4e2a\u5b57\u7b26\u7f16\u7801\u7684\u524d\u7f00","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_488","title":"\u5982\u4e0a\u5f62\u5f0f\u7684\u7f16\u7801\u79f0\u4e3a \u524d\u7f00\u7801","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_489","title":"\u54c8\u592b\u66fc\u7f16\u7801","text":"<p><pre><code>#include \"HuffmanTree.h\"\n#define NODES 8\nint main(void) {\nHTree T = NULL;\nCreat_Huffman(&amp;T, NODES);\n</code></pre> <pre><code>for (int i = 1 ; i &lt; 2 * NODES; ++i) {\nprintf(\"weight = %d\\tparent = %d\\tlchild = %d\\trchild = %d\\n\", T[i].weight,\nT[i].parent, T[i].lchild, T[i].rchild);\n}\n</code></pre> <pre><code>system(\"pause\");\nreturn 0 ;\n}\n//\n/*\ninput: 7 19 2 6 32 3 21 10\n------------------------------------------\noutput:\nweight = 7 parent = 11 lchild = 0 rchild = 0\nweight = 19 parent = 13 lchild = 0 rchild = 0\nweight = 2 parent = 9 lchild = 0 rchild = 0\nweight = 6 parent = 10 lchild = 0 rchild = 0\nweight = 32 parent = 14 lchild = 0 rchild = 0\nweight = 3 parent = 9 lchild = 0 rchild = 0\nweight = 21 parent = 13 lchild = 0 rchild = 0\nweight = 10 parent = 11 lchild = 0 rchild = 0\nweight = 5 parent = 10 lchild = 3 rchild = 6\nweight = 11 parent = 12 lchild = 9 rchild = 4\nweight = 17 parent = 12 lchild = 1 rchild = 8\nweight = 28 parent = 14 lchild = 10 rchild = 11\nweight = 40 parent = 15 lchild = 2 rchild = 7\nweight = 60 parent = 15 lchild = 12 rchild = 5\nweight = 100 parent = 0 lchild = 13 rchild = 14\n*/\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_490","title":"\u54c8\u592b\u66fc\u7f16\u7801\u662f\u603b\u957f\u6700\u77ed\u7684\u524d\u7f00\u7801","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_491","title":"\u7edf\u8ba1\u5b57\u7b26\u96c6\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u5728\u7535\u6587\u4e2d\u51fa\u73b0\u7684\u5e73\u5747\u6982\u7387\u6982\u7387\u8d8a\u5927\uff0c\u7f16\u7801\u8981\u6c42\u6700\u77ed","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_492","title":"\u5229\u7528\u54c8\u592b\u66fc\u6811\u7684\u7279\u70b9 \u6743\u503c\u8d8a\u5927\u7684\u53f6\u5b50\u79bb\u6839\u8d8a\u8fd1 \u5c06\u6bcf\u4e2a\u5b57\u7b26\u7684\u6982\u7387\u503c\u6700\u4e3a\u6743\u503c\uff0c\u6784\u9020\u54c8\u592b\u66fc\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_493","title":"\u5728\u54c8\u592b\u66fc\u6811\u7684\u6bcf\u4e2a\u5206\u652f\u4e0a\u6807 \u548c \uff0c\u5de6\u5206\u652f\u4e3a \uff0c\u53f3\u5206\u652f\u4e3a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_494","title":"\u4e3a\u4ec0\u4e48\u54c8\u592b\u66fc\u7f16\u7801\u662f\u6700\u77ed\u7684\u524d\u7f00\u7801\uff1f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_495","title":"\u6839\u636e\u54c8\u592b\u66fc\u6811\u7684\u7279\u6027\uff0c\u539f\u6811\u4e2d\u7684 \u4e2a\u8282\u70b9\uff0c\u5728\u54c8\u592b\u66fc\u6811\u4e2d\u53d8\u6210\u4e86\u53f6\u5b50","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_496","title":"\u53f6\u5b50\u8282\u70b9\u4e0d\u4f1a\u662f\u53e6\u4e00\u4e2a\u53f6\u5b50\u7684\u53cc\u4eb2\u6216\u662f\u7956\u5148\uff0c\u6240\u4ee5\u662f\u524d\u7f00\u7801","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_497","title":"\u54c8\u592b\u66fc\u6811\u7684\u6027\u8d28","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_498","title":"\u6027\u8d28 \u54c8\u592b\u66fc\u7f16\u7801\u662f\u524d\u7f00\u7801","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_499","title":"\u6027\u8d28 \u54c8\u592b\u66fc\u7f16\u7801\u662f\u6700\u4f18\u524d\u7f00\u7801","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_500","title":"\u4ee3\u7801\u5b9e\u73b0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_501","title":"\u6d4b\u8bd5\u4ee3\u7801","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_502","title":"\u6784\u5efa\u5982\u4e0b\u54c8\u592b\u66fc\u7f16\u7801","text":"<p><pre><code>HuffmanCode Creat_HuffmanCode(const HTree HT, int n) {\n// HC\u548c\u54c8\u592b\u66fc\u6811\u4e00\u6837\uff0c\u4e0d\u4f7f\u7528 0 \u53f7\u4e0b\u6807\nHuffmanCode HC = (char **)malloc(sizeof(char *) * (n + 1 ));\nchar *temp_string = (char *)malloc(sizeof(char) * n); //\u6b64\u6570\u7ec4\u4f7f\u7528 0 \u53f7\u4e0b\u6807\ntemp_string[n - 1 ] = '\\0'; //\u56e0\u4e3a\u5b58\u653e\u5b57\u7b26\u4e32\u6240\u4ee5\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e '\\0'\n</code></pre> <pre><code>for (int i = 1 ; i &lt; n + 1 ; ++i) {\nint parent = HT[i].parent; //\u9700\u8981\u5411\u4e0a\u56de\u6eaf\nint current = i; //\u56de\u6eaf\u4e2d\u5f53\u524d\u8282\u70b9\nint start = n - 1 ; //\u6570\u7ec4\u4e2d\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5373'\\0'\nwhile (parent) {\n</code></pre> <pre><code>if (current == HT[parent].lchild) //\u5982\u679c\u662f\u5de6\u5b69\u5b50\uff0c\u90a3\u4e48\u4e3a'0'\ntemp_string[--start] = '0';\nelse\ntemp_string[--start] = '1'; //\u53f3\u5b69\u5b50\u4e3a '1'\n</code></pre> <pre><code>current = parent;\nparent = HT[parent].parent;\n}\n//\u8ba1\u7b97\u957f\u5ea6:\u56e0\u4e3astrat\u8868\u793a\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u4e0b\u6807\uff0cn-1\u8868\u793a\u672b\u5c3e\u7ed3\u675f\u7b26'\\0',\u6240\u4ee5 length\n//= n-1-start+1=n-start;\nHC[i] = (char *)malloc(sizeof(char) * (n - start)); //\u6839\u636e\u957f\u5ea6\u5206\u914d\u7a7a\u95f4\nstrcpy(HC[i], &amp;temp_string[start]); //\u62f7\u8d1d\u5b57\u7b26\u4e32\n}\n</code></pre> <pre><code>free(temp_string); //\u91ca\u653e\u5806\u7a7a\u95f4\nreturn HC;\n}\n</code></pre> <pre><code>#include \"HuffmanTree.h\"\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#define-nodes-7","title":"define NODES 7","text":"<p>int main(void) { HTree T = NULL; Creat_Huffman(&amp;T, NODES);</p> <p>HuffmanCode HC = Creat_HuffmanCode(T, NODES); int a = 65 ; // ASCII 65 \u662f'A' for (int i = 1 ; i &lt; NODES + 1 ; ++i) { printf(\"%c=%s\\n\", a, HC[i]); ++a; }</p> <p>system(\"pause\"); return 0 ; } // /* input: 40 30 15 5 4 3 3</p> <p>output: A=0 B=10 C=110 D=11111 E=11110 F=11100 G=11101 */</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_503","title":"\u6574\u4f53\u5934\u6587\u4ef6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#5-graph_1","title":"5. \u56fe(Graph)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_504","title":"\u56fe\u7684\u5b9a\u4e49\u548c\u672f\u8bed","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_505","title":"\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_506","title":"\u9876\u70b9\u7684\u6709\u9650\u975e\u7a7a\u96c6\u5408","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_507","title":"\u8fb9\u7684\u6709\u9650\u96c6\u5408","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_508","title":"\u56fe\u5206\u4e3a\u6709\u5411\u56fe \u548c\u65e0\u5411\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_509","title":"\u5982\u4e0b\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_510","title":"\u5b8c\u5168\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_511","title":"\u5b8c\u5168\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_512","title":"\u4efb\u610f\u4e24\u4e2a\u70b9\u90fd\u6709\u4e00\u6761\u8fb9\u76f8\u8fde","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_513","title":"\u82e5\u6709 \u4e2a\u9876\u70b9\u7684\u65e0\u5411\u5b8c\u5168\u56fe\uff0c\u5219","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_514","title":"\u82e5\u6709 \u4e2a\u9876\u70b9\u7684\u6709\u5411\u5b8c\u5168\u56fe\uff0c\u5219","text":"<p><pre><code>#include \"define.h\"\n#include \"string.h\"\n#ifndef __HUFFMANTREE_H\n#define __HUFFMANTREE_H\n</code></pre> <pre><code>typedef struct __HTNode {\nint weight;\nint parent, lchild, rchild;\n} HTNode, *HTree;\ntypedef char **HuffmanCode;\n</code></pre> <pre><code>void Select_Min(const HTree T, int length, int *e1, int *e2);\nvoid Creat_Huffman(HTree *T, int n);\n</code></pre> <pre><code>HuffmanCode Creat_HuffmanCode(const HTree HT, int n);\n#endif\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#sparse-graphdense-gaph_1","title":"\u7a00\u758f\u56fe(Sparse Graph)\u548c\u7a20\u5bc6\u56fe(Dense Gaph)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_515","title":"\u7a20\u5bc6\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_516","title":"\u7a20\u5bc6\u56fe \u6709\u8f83\u591a\u8fb9\u7684\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#degree_1","title":"\u9876\u70b9\u7684\u5ea6(degree)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_517","title":"\u4e0e\u8be5\u9876\u70b9\u76f8\u5173\u8054\u7684\u8fb9\u7684\u6570\u91cf","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_518","title":"\u4e2d\uff0c\u9876\u70b9\u7684\u5ea6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_519","title":"\u95ee\u9898 \u5f53 \u4e2d\uff0c\u4ec5\u6709\u4e00\u4e2a\u9876\u70b9\u7684 \u4e3a \uff0c\u5176\u4f59\u9876\u70b9\u7684 \uff0c\u6b64\u65f6\u56fe\u4e3a\u4ec0\u4e48\u5f62\u72b6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_520","title":"\u7b54 \u6811\uff0c\u6709\u5411\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#path_1","title":"\u8def\u5f84(path)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_521","title":"\u8def\u5f84 \u63a5\u7eed\u7684\u8fb9\u6784\u6210\u7684\u9876\u70b9\u5e8f\u5217","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_522","title":"\u8def\u5f84\u957f\u5ea6 \u8def\u5f84\u4e0a\u8fb9\u7684\u6570\u91cf\u6216\u6743\u503c\u4e4b\u548c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_523","title":"\u56de\u8def \u7b2c\u4e00\u4e2a\u9876\u70b9\u548c\u6700\u540e\u4e00\u4e2a\u9876\u70b9\u76f8\u540c\u7684\u8def\u5f84","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_524","title":"\u8def\u5f84 \u8def\u5f84\u4e0a\u7684\u9876\u70b9\u5747\u4e0d\u76f8\u540c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_525","title":"\u56de\u8def \u9664\u8def\u5f84\u8d77\u70b9\u548c\u7ec8\u70b9\u53ef\u4ee5\u76f8\u540c\u5916\uff0c\u5176\u4f59\u9876\u70b9\u5747\u4e0d\u76f8\u540c\u7684\u8def\u5f84","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#connected-graph_1","title":"\u8fde\u901a\u56fe(Connected Graph)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_526","title":"\u82e5\u8fde\u901a\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_527","title":"\u5728\u65e0\u5411\u56fe \u4e2d","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_528","title":"\u82e5\u5bf9\u4efb\u4f55\u4e24\u4e2a\u9876\u70b9 \uff0c\u90fd\u5b58\u5728 \u8def\u5f84\uff0c\u5219 \u662f\u8fde\u901a\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_529","title":"\u5f31\u8fde\u901a\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_530","title":"\u82e5\u628a\u6709\u5411\u56fe \u4e2d\u6240\u6709\u7684\u8fb9\u66ff\u6362\u6210\u65e0\u5411\u8fb9\uff0c\u6b64\u65f6\u5f97\u5230\u7684\u56fe\u4e3a \u7684\u57fa\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_531","title":"\u82e5\u5b83\u7684\u57fa\u56fe\u4e3a\u8fde\u901a\u56fe\uff0c\u5219 \u4e3a\u82e5\u8fde\u901a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_532","title":"\u5f3a\u8fde\u901a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_533","title":"\u4efb\u53d6\u6709\u5411\u56fe \u4e2d\u4e24\u4e2a\u9876\u70b9 \uff0c\u82e5 \u548c \u4e2d\u95f4\u5b58\u5728\u8def\u5f84\uff0c\u5219 \u4e3a\u5f3a\u8fde\u901a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#connected-component_1","title":"\u8fde\u901a\u5b50\u56fe\u548c\u8fde\u901a\u5206\u91cf(Connected Component)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_534","title":"\u65e0\u5411\u56fe \u7684\u6781\u5927\u8fde\u901a\u5b50\u56fe\u79f0\u4e3a \u7684\u8fde\u901a\u5206\u91cf","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_535","title":"\u6781\u5927\u8fde\u901a\u5b50\u56fe \u82e5\u65e0\u5411\u56fe \u7684\u5b50\u56fe \u4e3a\u8fde\u901a\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_536","title":"\u4efb\u53d6 \u5373","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_537","title":"\u82e5\u628a \u52a0\u5165\u5230 \u4e2d\uff0c\u5982\u679c \u4e0d\u518d\u8fde\u901a\uff0c\u5219\u79f0 \u4e3a \u7684\u6781\u5927\u8fde\u901a\u5b50\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_538","title":"\u5982\u4e0b\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_539","title":"\u5f3a\u8fde\u901a\u5206\u91cf","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_540","title":"\u6709\u5411\u56fe \u7684\u6781\u5927\u5f3a\u8fde\u901a\u5b50\u56fe\u79f0\u4e3a \u7684\u8fde\u901a\u5206\u91cf","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_541","title":"\u82e5\u6709\u5411\u56fe \u7684\u5b50\u56fe \u4e3a\u8fde\u901a\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_542","title":"\u4efb\u53d6 \u5373","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_543","title":"\u82e5\u628a \u52a0\u5165\u5230 \u4e2d\uff0c\u5982\u679c \u4e0d\u518d\u8fde\u901a\uff0c\u5219\u79f0 \u4e3a \u7684\u6781\u5927\u5f3a\u8fde\u901a\u5b50\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#spanning-tree_2","title":"\u6781\u5c0f\u8fde\u901a\u5b50\u56fe\u548c\u751f\u6210\u6811(Spanning Tree)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_544","title":"\u82e5\u5b50\u56fe \u662f \u7684\u8fde\u901a\u5b50\u56fe\uff0c\u5728\u6539\u5b50\u56fe\u4e2d\u5220\u9664\u4efb\u610f\u4e00\u6761\u8fb9\uff0c \u4e0d\u518d\u8fde\u901a\uff0c\u5219\u79f0 \u662f \u7684\u6781\u5c0f\u8fde\u901a\u5b50\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_545","title":"\u6ce8\u610f \u6781\u5c0f\u8fde\u901a\u5b50\u56fe\u4e2d\u4e0d\u5b58\u5728 \uff0c\u6781\u5927\u8fde\u901a\u5b50\u56fe\u53ef\u4ee5\u5b58\u5728","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_546","title":"\u751f\u6210\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_547","title":"\u82e5\u65e0\u5411\u56fe \uff0c \u4e2d\u6240\u6709\u7684\u70b9\u6784\u6210\u7684\u6781\u5c0f\u8fde\u901a\u5b50\u56fe\u5c31\u662f \u7684\u751f\u6210\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_548","title":"\u56fe\u7684\u5b58\u50a8\u7ed3\u6784","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#adjacency-matrix_1","title":"\u90bb\u63a5\u77e9\u9635(Adjacency Matrix)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_549","title":"\u82e5\u6709\u56fe \uff0c\u6709 \u4e2a\u9876\u70b9\uff0c\u5219\u5bf9\u5e94 \u77e9\u9635","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_550","title":"\u6ce8\u610f \u65e0\u5411\u56fe\u7684\u90bb\u63a5\u77e9\u9635\u4e3a\u5bf9\u79f0\u77e9\u9635\uff0c\u800c\u6709\u5411\u56fe\u7684\u90bb\u63a5\u77e9\u9635\u672a\u5fc5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_551","title":"\u65e0\u5411\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_552","title":"\u7684\u90bb\u63a5\u77e9\u9635\u4e3a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_553","title":"\u884c\u4e2d \u7684\u4e2a\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_554","title":"\u6709\u5411\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_555","title":"\u7b2c\u5217 \u7684\u4e2a\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_556","title":"\u7b2c\u884c \u7684\u4e2a\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#weighted-graph_1","title":"\u5e26\u6743\u56fe(\u7f51) weighted Graph","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_557","title":"\u82e5\u6709\u5e26\u6743\u56fe \uff0c\u6709 \u4e2a\u9876\u70b9\uff0c\u5219\u5bf9\u5e94 \u77e9\u9635","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_558","title":"\u4ee3\u7801\u5b9e\u73b0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_559","title":"\u6570\u636e\u7c7b\u578b\u5b9a\u4e49","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_560","title":"\u65e0\u5411\u65e0\u6743\u56fe","text":"<p><pre><code>#define MAXWEIGHT 99999 //\u6700\u5927\u6743\u503c\n#define MAXVERTEX 20 //\u6700\u5927\u5b9a\u70b9\u6570\ntypedef char VetexType; //\u9876\u70b9\u7528\u5b57\u7b26\u8868\u793a\ntypedef int MatrixType; //\u77e9\u9635\u7c7b\u578b\n</code></pre> <pre><code>typedef struct __AMGraph {\nchar vertex[MAXVERTEX];\nMatrixType edge[MAXVERTEX][MAXVERTEX];\nint vertices, edges;\n} AMGraph;\n</code></pre> <pre><code>void Creat_unAMGraph_unweightd(AMGraph *G) {\n//\u521d\u59cb\u5316\u70b9\u548c\u8fb9\u4e2a\u6570\nprintf(\"Please input the number of vertices:\");\nscanf(\" %d\", &amp;G-&gt;vertices);\nprintf(\"Please input the number of edges:\");\nscanf(\" %d\", &amp;G-&gt;edges);\n//\u8f93\u5165\u5404\u4e2a\u9876\u70b9\u7684\u540d\u5b57\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_561","title":"\u6d4b\u8bd5\u4ee3\u7801","text":"<p><pre><code>printf(\"Please input the name of vertices(just like A B C):\");\nfor (int i = 0 ; i &lt; G-&gt;vertices; ++i) {\nscanf(\" %c\", &amp;G-&gt;vertex[i]);\n}\n//\u628a\u77e9\u9635\u521d\u59cb\u5316\nfor (int i = 0 ; i &lt; G-&gt;vertices; ++i)\nfor (int j = 0 ; j &lt; G-&gt;vertices; ++j)\nG-&gt;edge[i][j] = 0 ;\n</code></pre> <pre><code>char v1, v2; //\u4e00\u6761\u8fb9\u7684\u9876\u70b9\nint index_v1, index_v2; //\u8fb9\u7684\u9876\u70b9\u7684\u4e0b\u6807\nfor (int i = 0 ; i &lt; G-&gt;edges; ++i) {\nprintf(\"(for %d)Please input the edge(just like A B):\", i + 1 );\nscanf(\" %c %c\", &amp;v1, &amp;v2);\nindex_v1 = Locate_vertex(G, v1);\nindex_v2 = Locate_vertex(G, v2);\n</code></pre> <pre><code>G-&gt;edge[index_v1][index_v2] = 1 ;\nG-&gt;edge[index_v2][index_v1] = 1 ;\n}\n}\n</code></pre> <pre><code>#include \"Graph.h\"\n</code></pre> <pre><code>int main(void) {\nAMGraph G;\nCreat_unAMGraph_unweightd(&amp;G);\nprint_Matrix(&amp;G);\n</code></pre> <pre><code>system(\"pause\");\nreturn 0 ;\n}\n//\n/*\n5 6\nA B C D E\nA B\nA D\nB C\nD C\nC E\nB E\n----------------------\n0 1 0 1 0\n1 0 1 0 1\n0 1 0 1 1\n1 0 1 0 0\n0 1 1 0 0\n*/\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_562","title":"\u65e0\u5411\u5e26\u6743\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_563","title":"\u6709\u5411\u5e26\u6743\u56fe","text":"<p><pre><code>void Creat_unAMGraph_weightd(AMGraph *G) {\n//\u521d\u59cb\u5316\u70b9\u548c\u8fb9\u4e2a\u6570\nprintf(\"Please input the number of vertices:\");\nscanf(\" %d\", &amp;G-&gt;vertices);\nprintf(\"Please input the number of edges:\");\nscanf(\" %d\", &amp;G-&gt;edges);\n//\u8f93\u5165\u5404\u4e2a\u9876\u70b9\u7684\u540d\u5b57\nprintf(\"Please input the name of vertices(just like A B C):\");\nfor (int i = 0 ; i &lt; G-&gt;vertices; ++i) {\nscanf(\" %c\", &amp;G-&gt;vertex[i]);\n}\n//\u628a\u77e9\u9635\u521d\u59cb\u5316\nfor (int i = 0 ; i &lt; G-&gt;vertices; ++i)\nfor (int j = 0 ; j &lt; G-&gt;vertices; ++j)\nG-&gt;edge[i][j] = MAXWEIGHT;\n</code></pre> <pre><code>char v1, v2; //\u4e00\u6761\u8fb9\u7684\u9876\u70b9\nint index_v1, index_v2; //\u8fb9\u7684\u9876\u70b9\u7684\u4e0b\u6807\nint weight;\nfor (int i = 0 ; i &lt; G-&gt;edges; ++i) {\nprintf(\"(for %d)Please input the edge(just like A B):\", i + 1 );\nscanf(\" %c %c %d\", &amp;v1, &amp;v2, &amp;weight); //\u76f8\u6bd4\u65e0\u5411\u65e0\u6743\u56fe\u53ea\u591a\u4e86\u4e00\u4e2aweight\nindex_v1 = Locate_vertex(G, v1);\nindex_v2 = Locate_vertex(G, v2);\n</code></pre> <pre><code>G-&gt;edge[index_v1][index_v2] = weight;\nG-&gt;edge[index_v2][index_v1] = weight;\n}\n}\n</code></pre> <pre><code>void Creat_AMGraph_weightd(AMGraph *G) {\n//\u521d\u59cb\u5316\u70b9\u548c\u8fb9\u4e2a\u6570\nprintf(\"Please input the number of vertices:\");\nscanf(\" %d\", &amp;G-&gt;vertices);\nprintf(\"Please input the number of edges:\");\nscanf(\" %d\", &amp;G-&gt;edges);\n//\u8f93\u5165\u5404\u4e2a\u9876\u70b9\u7684\u540d\u5b57\nprintf(\"Please input the name of vertices(just like A B C):\");\nfor (int i = 0 ; i &lt; G-&gt;vertices; ++i) {\nscanf(\" %c\", &amp;G-&gt;vertex[i]);\n}\n//\u628a\u77e9\u9635\u521d\u59cb\u5316\nfor (int i = 0 ; i &lt; G-&gt;vertices; ++i)\nfor (int j = 0 ; j &lt; G-&gt;vertices; ++j)\nG-&gt;edge[i][j] = MAXWEIGHT;\n</code></pre> <pre><code>char v1, v2; //\u4e00\u6761\u8fb9\u7684\u9876\u70b9\nint index_v1, index_v2; //\u8fb9\u7684\u9876\u70b9\u7684\u4e0b\u6807\nint weight;\nfor (int i = 0 ; i &lt; G-&gt;edges; ++i) {\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_564","title":"\u6709\u5411\u65e0\u6743\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#adjacency-list_1","title":"\u90bb\u63a5\u8868(Adjacency List)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_565","title":"\u6570\u636e\u7c7b\u578b\u5b9a\u4e49","text":"<p><pre><code>printf(\"(for %d)Please input the edge(just like A B):\", i + 1 );\nscanf(\" %c %c %d\", &amp;v1, &amp;v2, &amp;weight);\nindex_v1 = Locate_vertex(G, v1);\nindex_v2 = Locate_vertex(G, v2);\n</code></pre> <pre><code>G-&gt;edge[index_v1][index_v2] = weight;\n}\n}\n</code></pre> <pre><code>void Creat_AMGraph_unweightd(AMGraph *G) {\n//\u521d\u59cb\u5316\u70b9\u548c\u8fb9\u4e2a\u6570\nprintf(\"Please input the number of vertices:\");\nscanf(\" %d\", &amp;G-&gt;vertices);\nprintf(\"Please input the number of edges:\");\nscanf(\" %d\", &amp;G-&gt;edges);\n//\u8f93\u5165\u5404\u4e2a\u9876\u70b9\u7684\u540d\u5b57\nprintf(\"Please input the name of vertices(just like A B C):\");\nfor (int i = 0 ; i &lt; G-&gt;vertices; ++i) {\nscanf(\" %c\", &amp;G-&gt;vertex[i]);\n}\n//\u628a\u77e9\u9635\u521d\u59cb\u5316\nfor (int i = 0 ; i &lt; G-&gt;vertices; ++i)\nfor (int j = 0 ; j &lt; G-&gt;vertices; ++j)\nG-&gt;edge[i][j] = 0 ;\n</code></pre> <pre><code>char v1, v2; //\u4e00\u6761\u8fb9\u7684\u9876\u70b9\nint index_v1, index_v2; //\u8fb9\u7684\u9876\u70b9\u7684\u4e0b\u6807\nint weight;\nfor (int i = 0 ; i &lt; G-&gt;edges; ++i) {\nprintf(\"(for %d)Please input the edge(just like A B):\", i + 1 );\nscanf(\" %c %c %d\", &amp;v1, &amp;v2, &amp;weight);\nindex_v1 = Locate_vertex(G, v1);\nindex_v2 = Locate_vertex(G, v2);\n</code></pre> <pre><code>G-&gt;edge[index_v1][index_v2] = 1 ; //\u6709\u5411\u56fe\u4e0d\u662f\u5bf9\u79f0\u77e9\u9635\n}\n}\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_566","title":"\u4ee3\u7801\u5b9e\u73b0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_567","title":"\u65e0\u5411\u65e0\u6743\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#weight","title":"\u65e0\u5411\u6709\u6743\uff0c\u6709\u5411\u65e0\u6743\uff0c\u6709\u5411\u6709\u6743\u56fe\u7684\u521b\u5efa\u65b9\u6cd5\u548c\u6b64\u65b9\u6cd5\u7c7b\u4f3c\uff0c\u53ea\u9700\u6539\u52a8weight,\u548c\u65b0\u5efa\u8282\u70b9\u4e2a\u6570\u5373\u53ef","text":"<p><pre><code>typedef struct __EdgeNode {\nint adjvertex;\n__EdgeNode *next;\nint weight;\n} EdgeNode;\n</code></pre> <pre><code>typedef struct __ALGNode {\nVertexType name;\nEdgeNode *first;\n} ALGNode;\n</code></pre> <pre><code>typedef struct __ALGraph {\nALGNode vertex[MAXVERTEX];\nint edges, vertices;\n} ALGraph;\n//\u5982\u4e0b\u56fe\n</code></pre> <pre><code>void Creat_unALGraph_unweighted(ALGraph *G) {\n//\u521d\u59cb\u5316\u70b9\u548c\u8fb9\u4e2a\u6570\nprintf(\"Please input the number of vertices:\");\nscanf(\" %d\", &amp;G-&gt;vertices);\nprintf(\"Please input the number of edges:\");\nscanf(\" %d\", &amp;G-&gt;edges);\n//\u8f93\u5165\u5404\u4e2a\u9876\u70b9\u7684\u540d\u5b57\nprintf(\"Please input the name of vertices(just like A B C):\");\nfor (int i = 0 ; i &lt; G-&gt;vertices; ++i) {\nscanf(\" %c\", &amp;G-&gt;vertex[i].name);\nG-&gt;vertex[i].first = NULL;\n}\n</code></pre> <pre><code>char v1, v2; //\u4e00\u6761\u8fb9\u7684\u9876\u70b9\nint index_v1, index_v2; //\u8fb9\u7684\u9876\u70b9\u7684\u4e0b\u6807\n</code></pre> <pre><code>for (int i = 0 ; i &lt; G-&gt;edges; ++i) {\nprintf(\"(for %d)Please input the edge(just like A B):\", i + 1 );\nscanf(\" %c %c\", &amp;v1, &amp;v2);\nindex_v1 = Locate_vertex(G, v1);\nindex_v2 = Locate_vertex(G, v2);\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_568","title":"\u6d4b\u8bd5\u4ee3\u7801","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_569","title":"\u90bb\u63a5\u8868\u548c\u90bb\u63a5\u77e9\u9635\u7684\u6bd4\u8f83","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_570","title":"\u90bb\u63a5\u77e9\u9635","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_571","title":"\u4f18\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_572","title":"\u4fbf\u4e8e\u5224\u65ad\u9876\u70b9\u95f4\u662f\u5426\u6709\u8fb9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_573","title":"\u4fbf\u4e8e\u8ba1\u7b97\u5404\u4e2a\u9876\u70b9\u7684\u5ea6","text":"<p><pre><code>//\u521b\u9020\u65b0\u8282\u70b9 1\nEdgeNode *pnew1 = (EdgeNode *)malloc(sizeof(EdgeNode));\npnew1-&gt;adjvertex = index_v2;\n//\u5934\u63d2\u6cd5\npnew1-&gt;next = G-&gt;vertex[index_v1].first;\nG-&gt;vertex[index_v1].first = pnew1;\n//\u521b\u9020\u65b0\u8282\u70b9 2\nEdgeNode *pnew2 = (EdgeNode *)malloc(sizeof(EdgeNode));\npnew2-&gt;adjvertex = index_v1;\n//\u5934\u63d2\u6cd5\npnew2-&gt;next = G-&gt;vertex[index_v2].first;\nG-&gt;vertex[index_v2].first = pnew2;\n}\n}\n</code></pre> <pre><code>#include \"ALGraph.h\"\n</code></pre> <pre><code>int main(void) {\nALGraph G;\nCreat_unALGraph_unweighted(&amp;G);\nprint_ALG_unweighted(&amp;G);\n</code></pre> <pre><code>system(\"pause\");\nreturn 0 ;\n}\n//\n/*\n5 6\nA B C D E\nA B\nA D\nB C\nD C\nC E\nB E\n----------------------\nA:A--D A--B\nB:B--E B--C B--A\nC:C--E C--D C--B\nD:D--C D--A\nE:E--B E--C\n*/\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_574","title":"\u7f3a\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_575","title":"\u4e0d\u4fbf\u4e8e\u63d2\u5165\u548c\u5220\u9664\u9876\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_576","title":"\u4e0d\u4fbf\u4e8e\u7edf\u8ba1\u8fb9\u6570\uff0c\u9700\u8981\u626b\u63cf\u77e9\u9635\u624d\u80fd\u8ba1\u7b97.","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_577","title":"\u7a7a\u95f4\u590d\u6742\u5ea6\u8f83\u9ad8\uff0c\u4f46\u5982\u679c \u8f83\u5927\u65f6\uff0c\u53ef\u4ee5\u91c7\u7528\u4e0a\u4e09\u89d2\u6216\u4e0b\u4e09\u89d2\u77e9\u9635(\u56e0\u4e3a\u77e9\u9635\u662f\u5bf9\u79f0\u7684)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_578","title":"\u90bb\u63a5\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_579","title":"\u4f18\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_580","title":"\u4fbf\u4e8e\u589e\u52a0\u548c\u5220\u9664\u9876\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_581","title":"\u4fbf\u4e8e\u7edf\u8ba1\u8fb9\u7684\u6570\u91cf\uff0c\u6309\u9876\u70b9\u987a\u5e8f\u626b\u63cf\u6240\u6709\u8fb9\u5373\u53ef\u3002","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_582","title":"\u7a7a\u95f4\u6548\u7387\u9ad8\uff0c\u65e0\u5411\u56fe \uff0c\u6709\u5411\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_583","title":"\u7f3a\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_584","title":"\u4e0d\u4fbf\u4e8e\u5224\u65ad\u4e24\u9876\u70b9\u95f4\u662f\u5426\u6709\u8fb9(\u76f8\u5bf9\u4e8e\u77e9\u9635\u7684\u968f\u673a\u53d6\u503c\u800c\u8a00)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_585","title":"\u4e0d\u4fbf\u4e8e\u8ba1\u7b97\u5404\u4e2a\u9876\u70b9\u7684\u5ea6\u3002","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_586","title":"\u5bf9\u4e8e\u65e0\u5411\u56fe\uff0c \u7b2c\u4e2a\u8868\u7684\u8282\u70b9\u4e2a\u6570","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_587","title":"\u5bf9\u65e0\u5411\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_588","title":")","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_589","title":"\uff0c\u5165\u5ea6\u4e3a\u7b2c\u4e2a\u8868\u7684\u8282\u70b9\u4e2a\u6570\uff0c\u4f46\u662f\u51fa\u5ea6\u5374\u8981\u5386\u904d\u6240\u6709\u7684\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_590","title":"\u5341\u5b57\u94fe\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#degree_2","title":"\u5341\u5b57\u94fe\u8868\u53ef\u4ee5\u89e3\u51b3\u7528\u90bb\u63a5\u94fe\u8868\u50a8\u5b58\u7684\u6709\u5411\u56fe\u6c42\u9876\u70b9degree\u7684\u95ee\u9898","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_591","title":"\u6839\u636e\u4e0a\u56fe\u53ef\u77e5\uff0c\u4e00\u6761\u8fb9\u5373\u662f\u4e00\u4e2a\u9876\u70b9\u7684\u5165\u5ea6\uff0c\u4e5f\u662f\u53e6\u5916\u4e00\u4e2a\u9876\u70b9\u7684\u51fa\u5ea6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_592","title":"\u8bbe\u662f \u7684\u4e00\u6761\u8fb9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_593","title":"\u5f53\u5efa\u7acb\u8fb9\u8282\u70b9 \u65f6\uff0c\u4f7f \u7684 \u57df\u6307\u5411\uff0c\u4f7f \u7684 \u6307\u5411","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_594","title":"\u5f53 \u518d\u6b21\u6709\u51fa\u5ea6\u8fb9 \u65f6\uff0c\u4f7f \u7684 \u57df\u6307\u5411 \u7684 \u6240\u6307\u8282\u70b9 \u6307\u5411","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_595","title":"\u5f53 \u518d\u6b21\u6709\u5165\u5ea6\u8fb9 \u65f6\uff0c\u4f7f \u7684 \u57df\u6307\u5411 \u7684 \u6240\u6307\u8282\u70b9 \u6307\u5411","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_596","title":"\u90bb\u63a5\u591a\u91cd\u94fe\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_597","title":"\u7528\u4e8e \u89e3\u51b3 \u7528 \u90bb\u63a5\u8868 \u5b58\u50a8\u7684 \u65e0\u5411\u56fe \u6bcf\u6761\u8fb9\u90fd\u8981\u5b58\u50a8 \u4e24\u904d \u7684\u95ee\u9898","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_598","title":"\u5982\u4e0a\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_599","title":"\u8bb0\u5f55\u8be5\u8fb9\u662f\u5426\u88ab\u641c\u7d22\u8fc7","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_600","title":"\u5206\u522b\u8868\u793a\u8fb9 \u9876\u70b9\u7684\u4e0b\u6807","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_601","title":"\u5206\u522b\u8868\u793a \u7684\u4e0b\u6761\u8fb9\u8282\u70b9\uff0c \u7684\u4e0b\u6761\u8fb9\u8282\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_602","title":"\u4ee4","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_603","title":"\u4f7f \u7684 \u6307\u5411 \u7684 \u57df\uff0c \u7684 \u6307\u5411 \u7684 \u57df","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_604","title":"\u7684 \u7684\u4e0b\u6807\uff0c \u7684 \u7684\u4e0b\u6807","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_605","title":"\u4f7f \u548c \u7684 \u6307\u5411","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_606","title":"\u904d\u5386","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_607","title":"\u4ee4 \u7684 \u4e3a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_608","title":"\u6253\u5370","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_609","title":"\u56fe\u7684\u904d\u5386","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_610","title":"\u56fe\u4e2d\u53ef\u80fd\u5b58\u5728 \uff0c\u4e14\u56fe\u7684\u4efb\u4f55\u4e00\u70b9\u90fd\u6709\u53ef\u80fd\u548c\u5176\u4ed6\u9876\u70b9\u76f8\u8fde","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_611","title":"\u5728\u8bbf\u95ee\u5b8c\u67d0\u4e2a\u9876\u70b9\u4e4b\u540e\uff0c\u53ef\u80fd\u4f1a\u6cbf\u7740\u67d0\u4e9b\u8fb9\u53c8\u56de\u5230\u4e86\u66fe\u7ecf\u8bbf\u95ee\u8fc7\u7684\u9876\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_612","title":"\u89e3\u51b3\u601d\u8def","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_613","title":"\u8bbe\u7f6e\u8f85\u52a9\u6570\u7ec4 \uff0c\u7528\u6765\u6807\u8bb0\u9876\u70b9\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_614","title":"\u9876\u70b9\u672a\u88ab\u8bbf\u95ee\u8fc7","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_615","title":"\u9876\u70b9\u88ab\u8bbf\u95ee\u8fc7","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#depth-first-search_1","title":"\u6df1\u5ea6\u4f18\u5148 (Depth First Search)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_616","title":"\u7b97\u6cd5\u63cf\u8ff0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_617","title":"\u5148\u8bbf\u95ee \uff0c\u518d\u8bbf\u95ee \u7684\u90bb\u63a5\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_618","title":"\u518d\u8bbf\u95ee \u7684\u90bb\u63a5\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_619","title":"\u5f00\u59cb\u51fa\u6808\uff0c\u63a7\u5236\u8282\u70b9\u518d\u6b21\u6765\u5230","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_620","title":"\u56e0\u4e3a \u5df2\u7ecf\u88ab\u8bbf\u95ee\u8fc7\uff0c\u6240\u4ee5\u5f00\u59cb\u8bbf\u95ee","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_621","title":"\u5168\u90e8\u51fa\u6808\u5b8c\uff0c\u63a7\u5236\u518d\u6b21\u56de\u5230","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_622","title":"\u51fa\u6808\uff0c\u7ed3\u675f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_623","title":"\u4ee3\u7801\u5b9e\u73b0\u4e0b\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_624","title":"\u6ce8\u610f\u4e0a\u56fe\u4e2d\u7684\u5f53\u8bbf\u95ee\u5b8c \u4e4b\u540e\uff0c\u5e76\u4e0d\u662f\u76f4\u63a5\u56de\u5230","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_625","title":"\u800c\u662f\u9000\u56de\u5230 \uff0c\u9700\u8981\u4f9d\u6b21\u51fa\u6808","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_626","title":"\u904d\u5386\u77e9\u9635","text":"<p><pre><code>void DFS_AM(AMGraph *G, int v, bool *visit) {\n</code></pre> <pre><code>printf(\"%c \", G-&gt;vertex[v]); //\u5148\u904d\u5386\u9876\u70b9\nvisit[v] = true; //\u8bbf\u95ee\u6807\u8bb0\n</code></pre> <pre><code>for (int k = 0 ; k &lt; G-&gt;vertices; ++k) {\nif (G-&gt;edge[v][k] &amp;&amp; !visit[k]) //\u5982\u679cv\uff0ck\u4e4b\u95f4\u5b58\u5728\u8fb9\uff0c\u5e76\u4e14k\u9876\u70b9\u5e76\u672a\u88ab\u8bbf\u95ee\u8fc7\nDFS_AM(G, k, visit);\n}\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_627","title":"\u6d4b\u8bd5\u4ee3\u7801","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_628","title":"\u904d\u5386\u90bb\u63a5\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_629","title":"\u6ce8\u610f:\u4f7f\u7528\u90bb\u63a5\u8868\u65f6\uff0c\u904d\u5386\u7684\u987a\u5e8f\u548c\u90bb\u63a5\u77e9\u9635\u4e0d\u4e00\u6837\uff0c\u56e0\u4e3a\u521b\u5efa\u90bb\u63a5\u8868\u4f7f\u7528\u5934\u63d2\u6cd5(\u5982\u679c\u4f7f\u7528\u5c3e\u63d2\u6cd5\u987a\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_630","title":"\u5219\u4e00\u6837)","text":"<p><pre><code>}\n</code></pre> <pre><code>void DFS_AMGraph(AMGraph *G, VertexType v) { //\u5c01\u88c5\u51fd\u6570\nbool *visit = (bool *)malloc(sizeof(bool) * G-&gt;vertices); //\u4e3avisit\u5206\u914d\u7a7a\u95f4\nmemset(visit, false, sizeof(bool) * G-&gt;vertices); //\u521d\u59cb\u5316\u4e3afalse\n</code></pre> <pre><code>int index = Locate_vertex(G, v); //\u627e\u5230\u4e0b\u6807\nDFS_AM(G, index, visit); //\u4ee5\u6b64\u4e0b\u6807\u4e3a\u9876\u70b9\u51fa\u53d1\uff0c\u904d\u5386\nfree(visit);\n}\n</code></pre> <pre><code>#include \"AMGraph.h\"\n</code></pre> <pre><code>int main(void) {\nAMGraph G;\nCreat_unAMGraph_unweightd(&amp;G);\nDFS_AMGraph(&amp;G, 'A');\n</code></pre> <pre><code>system(\"pause\");\nreturn 0 ;\n}\n//\n/*\n8 9\nA B C D E F G H\nA B\nA C\nB D\nD H\nB E\nE H\nC F\nC G\nF G\n----------------------\nA B D H E C F G\n*/\n</code></pre> <pre><code>void DFS_AL(ALGraph *G, int v, bool *visit) {\nprintf(\"%c \", G-&gt;vertex[v].name);\nvisit[v] = true;\n</code></pre> <pre><code>EdgeNode *p = G-&gt;vertex[v].first;\nwhile (p) {\nint adj = p-&gt;adjvertex;\nif (!visit[adj]) // \u53ea\u9700\u5224\u65advisit\u6570\u7ec4\uff0c\u56e0\u4e3a\u5f53p\u4e0d\u4e3a\u7a7a\u65f6\uff0cadjvertex\u5fc5\u7136\u5b58\u5728\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_631","title":"\u6d4b\u8bd5\u4ee3\u7801","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#breadth-first-search_1","title":"\u5e7f\u5ea6\u4f18\u5148 (Breadth First Search)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_632","title":"\u4ece\u56fe\u7684 \u51fa\u53d1\uff0c\u9996\u5148\u8bbf\u95ee \uff0c\u7136\u540e\u8bbf\u95ee \u7684\u6240\u6709\u90bb\u63a5\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_633","title":"\u7136\u540e\u6309\u7167 \u7684\u987a\u5e8f\uff0c\u4f9d\u6b21\u8bbf\u95ee\u4ed6\u4eec\u7684\u90bb\u63a5\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_634","title":"\u5b9e\u73b0\u904d\u5386\u4e0b\u56fe","text":"<p><pre><code>DFS_AL(G, adj, visit);\n</code></pre> <pre><code>p = p-&gt;next;\n}\n}\nvoid DFS_ALGraph(ALGraph *G, VertexType v) { //\u5c01\u88c5\u4ee3\u7801\nbool *visit = (bool *)malloc(sizeof(bool) * G-&gt;vertices);\nmemset(visit, false, sizeof(bool) * G-&gt;vertices);\n</code></pre> <pre><code>int index = Locate_vertex(G, v);\nDFS_AL(G, index, visit);\n}\n</code></pre> <pre><code>#include \"ALGraph.h\"\n</code></pre> <pre><code>int main(void) {\nALGraph G;\nCreat_unALGraph_unweighted(&amp;G);\nDFS_ALGraph(&amp;G, 'A');\n</code></pre> <pre><code>system(\"pause\");\nreturn 0 ;\n}\n//\n/*\n8 9\nA B C D E F G H\nA B\nA C\nB D\nD H\nB E\nE H\nC F\nC G\nF G\n----------------------\nA C G F B E H D\n*/\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_635","title":"\u4ee3\u7801\u5b9e\u73b0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_636","title":"\u904d\u5386\u77e9\u9635","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_637","title":"\u6d4b\u8bd5\u4ee3\u7801","text":"<p><pre><code>void BFS_AM(AMGraph *G, int v, bool *visit) {\nSqQueue Q;\nInitQueue(&amp;Q);\nEntryQ(&amp;Q, v); //\u5148\u8ba9\u9876\u70b9\u5165\u961f\nvisit[v] = true; //\u5165\u961f\u65f6\u8bbe\u7f6evisit\u72b6\u6001\nint pop; //\u7528\u4e8e\u63a5\u6536\u961f\u5217\u5f39\u51fa\u6570\u636e\nwhile (!IsEmpty(&amp;Q)) {\nOutQ(&amp;Q, &amp;pop);\nprintf(\"%c \", G-&gt;vertex[pop]); //\u51fa\u961f\u65f6\uff0c\u6253\u5370\n</code></pre> <pre><code>for (int k = 0 ; k &lt; G-&gt;vertices; ++k) {\nif (G-&gt;edge[pop][k] &amp;&amp; !visit[k]) {\nEntryQ(&amp;Q, k);\nvisit[k] = true;\n//! \u8bbe\u7f6evisit\u72b6\u6001\uff0c\u4e0d\u53ef\u4ee5\u653e\u5728printf\u540e\u9762\uff0c\u56e0\u4e3afor\u5faa\u73af\u53ef\u80fd\u9020\u6210\u91cd\u590d\u5165\u961f\n}\n}\n}\n}\nvoid BFS_AMGraph(AMGraph *G, VertexType v) {\nbool *visit = (bool *)malloc(sizeof(bool) * G-&gt;vertices); //\u4e3avisit\u5206\u914d\u7a7a\u95f4\nmemset(visit, false, sizeof(bool) * G-&gt;vertices); //\u521d\u59cb\u5316\u4e3afalse\n</code></pre> <pre><code>int index = Locate_vertex(G, v); //\u627e\u5230\u4e0b\u6807\nBFS_AM(G, index, visit); //\u4ee5\u6b64\u4e0b\u6807\u4e3a\u9876\u70b9\u51fa\u53d1\uff0c\u904d\u5386\nfree(visit);\n}\n</code></pre> <pre><code>#include \"AMGraph.h\"\n</code></pre> <pre><code>int main(void) {\nAMGraph G;\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_638","title":"\u904d\u5386\u90bb\u63a5\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_639","title":"\u6ce8\u610f:\u4f7f\u7528\u90bb\u63a5\u8868\u65f6\uff0c\u904d\u5386\u7684\u987a\u5e8f\u548c\u90bb\u63a5\u77e9\u9635\u4e0d\u4e00\u6837\uff0c\u56e0\u4e3a\u521b\u5efa\u90bb\u63a5\u8868\u4f7f\u7528\u5934\u63d2\u6cd5(\u5982\u679c\u4f7f\u7528\u5c3e\u63d2\u6cd5\u987a\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_640","title":"\u5219\u4e00\u6837)","text":"<p><pre><code>Creat_unAMGraph_unweightd(&amp;G);\nBFS_AMGraph(&amp;G, 'A');\n</code></pre> <pre><code>system(\"pause\");\nreturn 0 ;\n}\n//\n/*\n8 9\nA B C D E F G H\nA B\nA C\nB D\nD H\nB E\nE H\nC F\nC G\nF G\n----------------------\nA B C D E F G H\n*/\n</code></pre> <pre><code>void BFS_AL(ALGraph *G, int v, bool *visit) {\nSqQueue Q;\nInitQueue(&amp;Q);\nEdgeNode *p; //\u7528\u4e8e\u904d\u5386\u90bb\u63a5\u8868\nEntryQ(&amp;Q, v); //\u5165\u961f\u9876\u70b9\nvisit[v] = true; //\u8bbe\u7f6e\u9876\u70b9visit\u6570\u7ec4\u72b6\u6001\nint pop; //\u7528\u4e8e\u63a5\u6536\u961f\u5217\u5f39\u51fa\u6570\u636e\nwhile (!IsEmpty(&amp;Q)) {\nOutQ(&amp;Q, &amp;pop);\nprintf(\"%c \", G-&gt;vertex[pop].name); //\u51fa\u961f\u540e\u6253\u5370\np = G-&gt;vertex[pop].first; //\u5229\u7528p\u904d\u5386\n</code></pre> <pre><code>while (p) {\nif (!visit[p-&gt;adjvertex]) { //\u5224\u65adp\u904d\u5386\u4e2d\u7684\u90bb\u63a5\u70b9\u662f\u5426\u88ab\u904d\u5386\u8fc7\nEntryQ(&amp;Q, p-&gt;adjvertex); //\u5982\u679c\u6ca1\u6709\u88ab\u904d\u5386\u8fc7\uff0c\u5165\u961f\nvisit[p-&gt;adjvertex] = true; //\u540c\u65f6\u8bbe\u7f6evisit\u72b6\u6001\n}\np = p-&gt;next;\n}\n}\n}\nvoid BFS_ALGraph(ALGraph *G, VertexType v) {\nbool *visit = (bool *)malloc(sizeof(bool) * G-&gt;vertices); //\u4e3avisit\u5206\u914d\u7a7a\u95f4\nmemset(visit, false, sizeof(bool) * G-&gt;vertices); //\u521d\u59cb\u5316\u4e3afalse\n</code></pre> <pre><code>int index = Locate_vertex(G, v); //\u627e\u5230\u4e0b\u6807\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_641","title":"\u6d4b\u8bd5\u4ee3\u7801","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_642","title":"\u7b97\u6cd5\u6548\u7387","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_643","title":"\u53ef\u77e5\uff0c\u90bb\u63a5\u77e9\u9635\u7684\u65f6\u95f4\u6548\u7387\u4e3a \u90bb\u63a5\u8868\u7684\u65f6\u95f4\u6548\u7387\u4e3a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#spanning-tree_3","title":"\u6700\u5c0f\u751f\u6210\u6811 Spanning Tree","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#prim_1","title":"Prim \u7b97\u6cd5","text":"<p><pre><code>BFS_AL(G, index, visit); //\u4ee5\u6b64\u4e0b\u6807\u4e3a\u9876\u70b9\u51fa\u53d1\uff0c\u904d\u5386\nfree(visit);\n}\n</code></pre> <pre><code>#include \"ALGraph.h\"\n</code></pre> <pre><code>int main(void) {\nALGraph G;\nCreat_unALGraph_unweighted(&amp;G);\nBFS_ALGraph(&amp;G, 'A');\n</code></pre> <pre><code>system(\"pause\");\nreturn 0 ;\n}\n//\n/*\n8 9\nA B C D E F G H\nA B\nA C\nB D\nD H\nB E\nE H\nC F\nC G\nF G\n----------------------\nA C B G F E D H\n*/\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_644","title":"\u4ee4 \u4e3a\u8fde\u901a\u56fe\u5e26\u6743\uff0c\u4e14","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_645","title":"\u8bbe\u8d77\u70b9\u4e3a \u628a \u52a0\u5165\u5230 \u4e2d","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_646","title":"\u9009\u53d6 \u4e3a\u6700\u5c0f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_647","title":"\u8f93\u51fa \u8fb9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_648","title":"\u628a \u52a0\u5165 \u4e2d","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_649","title":"\u9009\u53d6 \u4e3a\u6700\u5c0f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_650","title":"\u8f93\u51fa \u8fb9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_651","title":"\u76f4\u5230\u5b58\u5728 \u6761\u8fb9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_652","title":"\u6b64\u65f6\u8f93\u51fa\u7684\u8fb9\u5373\u4e3a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_653","title":"\u4ee3\u7801\u5b9e\u73b0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#spanning-tree_4","title":"\u5b9e\u73b0\u4e0b\u56fe\u7684Spanning Tree","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#u","title":"\u9700\u8981\u8f85\u52a9\u96c6\u5408U","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_654","title":"\u90bb\u63a5\u77e9\u9635","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_655","title":"\u524d\u7f6e\u7b97\u6cd5","text":"<pre><code>struct Uset {\nint adjvertex; //\u4e0b\u6807\u4e3ai\u7684\u70b9\u7684\u90bb\u63a5\u70b9\nint weight; //\u5f53\u524d\u6743\u503c\n};\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_656","title":"\u90bb\u63a5\u8868","text":"<p><pre><code>int Min_Uset(Uset *U, int n) {\nint min = INT_MAX;\nint pos = 0 ;\n</code></pre> <pre><code>for (int i = 0 ; i &lt; n; ++i) {\nif (U[i].weight != 0 &amp;&amp; U[i].weight &lt; min) {\n//! \u6838\u5fc3\u8bed\u53e5 U[i].weight != 0 \u8bf4\u660e\u4e0d\u5728U\u4e2d\uff0c\u5373V-U\nmin = U[i].weight;\npos = i;\n}\n}\nreturn pos;\n}\n</code></pre> <pre><code>void MST_Prim(AMGraph *G, VertexType v) {\nint u = Locate_vertex(G, v);\nUset *U = (Uset *)malloc(sizeof(Uset) * G-&gt;vertices);\n//\u52a8\u6001\u4e3aU\u5206\u914d\u7a7a\u95f4\uff0c\u5927\u5c0f\u4e3an(\u9876\u70b9\u4e2a\u6570)\nfor (int i = 0 ; i &lt; G-&gt;vertices; ++i) {\n//\u521d\u59cb\u5316U\u96c6\u5408\uff0c\u56e0\u4e3a\u5148\u628a\u9876\u70b9v\u653e\u5165U\u96c6\u5408\u4e2d\uff0c\u6240\u4ee5U[i].adjvertex\u4e3a\n//\u9876\u70b9v\u7684\u4e0b\u6807\uff0c\u5373u\u3002\u5982\u679ci\u4e0e\u70b9v\u5b58\u5728\u8fb9\nU[i].adjvertex = u;\n//\u5982\u679ci\u4e0e\u70b9v\u5b58\u5728\u8fb9\uff0c\u8d4b\u503c\uff0c\u5982\u679c\u4e0d\u5b58\u5728weight\u4e3a 99999\nU[i].weight = G-&gt;edge[u][i];\n}\nU[u].weight = 0 ; // weight = 0 \u8bf4\u660e\u6b64\u70b9\u5df2\u7ecf\u52a0\u5165U\u96c6\u5408\n</code></pre> <pre><code>for (int i = 1 ; i &lt; G-&gt;vertices; ++i) { //\u9009\u53d6n-1\u6761\u8fb9\nint min = Min_Uset(U, G-&gt;vertices); //\u5728V-U\u4e2d\u9009\u53d6\u6743\u503c\u6700\u5c0f\u7684\u8fb9\nint u_0 = U[min].adjvertex; // u_0\u4e3a\u6700\u5c0f\u8fb9\u7684\u90bb\u63a5\u70b9\nprintf(\"%c-&gt;%c \", G-&gt;vertex[u_0], G-&gt;vertex[min]); //\u8f93\u51fa\u6b64\u4e24\u70b9\nU[min].weight = 0 ; //\u628a\u8be5\u8fb9\u7684\u9876\u70b9\u52a0\u5165\u96c6\u5408U\n</code></pre> <pre><code>for (int j = 0 ; j &lt; G-&gt;vertices; ++j) { //\u66f4\u65b0U\u96c6\u5408\nif (G-&gt;edge[min][j] &lt; U[j].weight) {\n//\u5982\u679c\u6210\u7acb\uff0c\u4f7fU\u7684weight\uff0c\u548cadjvertex\u548cmin\u76f8\u5173\nU[j].weight = G-&gt;edge[min][j];\nU[j].adjvertex = min;\n}\n}\n}\n</code></pre> <pre><code>free(U);\n}\n</code></pre> <pre><code>void MST_Prime(ALGraph *G, VertexType v) {\nint u = Locate_vertex(G, v);\nUset *U = (Uset *)malloc(sizeof(Uset) * G-&gt;vertices);\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_657","title":"\u6d4b\u8bd5\u4ee3\u7801","text":"<p><pre><code>for (int i = 0 ; i &lt; G-&gt;vertices; ++i) {\n//\u90bb\u63a5\u8868\u7684weight\u4e0d\u4f1a\u4e3a\u6700\u5927\u503c\uff0c\u6240\u4ee5\u521d\u59cb\u5316\u4e3a\u6700\u5927\u503c\nU[i].weight = MAXWEIGHT;\nU[i].adjvertex = u;\n}\nU[u].weight = 0 ; //\u52a0\u5165U\u96c6\u5408\nEdgeNode *p = G-&gt;vertex[u].first;\nwhile (p) {\n//\u904d\u5386\u70b9v\u7684\u90bb\u63a5\u8868\uff0c\u628aweight\u653e\u5165U\u4e2d\nU[p-&gt;adjvertex].weight = p-&gt;weight;\np = p-&gt;next;\n}\n</code></pre> <pre><code>for (int i = 1 ; i &lt; G-&gt;vertices; ++i) {\n// n-1\u4e2a\u8fb9\nint min = Min_Uset(U, G-&gt;vertices); // \u6743\u503c\u6700\u5c0f\u8fb9\nint u_0 = U[min].adjvertex;\nprintf(\"%c-&gt;%c \", G-&gt;vertex[u_0].name, G-&gt;vertex[min].name);\nU[min].weight = 0 ; //\u52a0\u5165\u96c6\u5408U\u4e2d\n</code></pre> <pre><code>EdgeNode *p_min = G-&gt;vertex[min].first;\nwhile (p_min) {\n//\u56e0\u4e3a\u90bb\u63a5\u8868\u7684\u7279\u6027\uff0c\u65e0\u9700\u8981\u904d\u5386\u6240\u6709\u9876\u70b9\uff0c\u53ea\u9700\u904d\u5386min\u7684\u90bb\u63a5\u8868\u5373\u53ef\nif (p_min-&gt;weight &lt; U[p_min-&gt;adjvertex].weight) {\nU[p_min-&gt;adjvertex].adjvertex = min;\nU[p_min-&gt;adjvertex].weight = p_min-&gt;weight;\n}\np_min = p_min-&gt;next;\n}\n}\n</code></pre> <pre><code>free(U);\n}\n</code></pre> <pre><code>#include \"ALGraph.h\"\n</code></pre> <pre><code>int main(void) {\nALGraph G;\nCreat_unALGraph_weighted(&amp;G);\nMST_Prime(&amp;G, 'A');\n</code></pre> <pre><code>system(\"pause\");\nreturn 0 ;\n}\n//\n/*\n6 10\nA B C D E F\nA B 6\nA D 5\nA C 1\nB C 5\nC D 5\nB E 3\nE C 6\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#kruskal_1","title":"Kruskal \u7b97\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_658","title":"\u5b9a\u7406","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_659","title":"\u82e5\u65e0\u5411\u6709\u6743\u65e0\u73af\u56fe \u4e3a \u56fe\u7684\u6700\u5927\u8fde\u901a\u5b50\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_660","title":"\uff0c\u4f5c\u4e3a\u8fde\u901a\u4f9d\u8d56\u70b9\uff0c\u5219 \u96c6\u5408\u6240\u6709\u70b9\u5fc5\u7136\u5b58\u5728\u4e00\u6761\u901a\u5f80 \u7684\u8def\u5f84","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_661","title":"\u5355\u4e2a\u9876\u70b9\u7684\u8fde\u901a\u4f9d\u8d56\u70b9\u4e3a\u81ea\u8eab\u6ce8\u610f \u8868\u793a\u4e3a \u4e0d\u53ef\u4ee5\u8fd9\u4e48\u8868\u793a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_662","title":"\u4ee4 \u4e3a\u8fde\u901a\u4f9d\u8d56\u70b9\uff0c\u4e14 \u4f7f \u4e4b\u95f4\u5e76\u4e0d\u5b58\u5728\u8def\u5f84","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_663","title":"\u4e3a\u8fde\u901a\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_664","title":"\u5f15\u7406","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_665","title":"\u82e5 \u5206\u522b\u4e3a \u7684\u6700\u5927\u8fde\u901a\u5b50\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_666","title":"\u82e5 \uff0c\u5219","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_667","title":"\u5229\u7528","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_668","title":"\u82e5 \uff0c\u5219\u8bf4\u660e \u4e2d\u6240\u6709\u7684\u70b9\u90fd\u6709\u4e00\u6761\u901a\u5f80 \u7684\u8def\u5f84","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_669","title":"\u4e3a\u6700\u5927\u8fde\u901a\u5b50\u56fe\u5b50\u56fe \u540c\u7406","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_670","title":"\u7b97\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_671","title":"\u82e5\u5b58\u5728\u65e0\u5411\u5e26\u6743\u56fe \u4e14 \u8fde\u901a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_672","title":"\u4ee4\u96c6\u5408","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_673","title":"\u5bf9 \u8fdb\u884c\u6392\u5e8f\uff0c\u53d6 \uff0c\u628a \u52a0\u5165 \u4e2d","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_674","title":"\u5faa\u73af\u5bf9 \u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_675","title":"\u5982\u679c \u7684\u8fde\u901a\u4f9d\u8d56\u70b9 \u7684\u8054\u901a\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_676","title":"\u5219\u628a \u52a0\u5165\u5230","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_677","title":"\u76f4\u5230\u904d\u5386\u6240\u6709\u8fb9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_678","title":"\u96c6\u5408\u4e2d\u4e3a \u7684","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_679","title":"\u4ee3\u7801\u5b9e\u73b0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_680","title":"\u6570\u636e\u7c7b\u578b\u5b9a\u4e49","text":"<p><pre><code>C F 4\nD F 2\nE F 6\n----------------------\nA-&gt;C C-&gt;F F-&gt;D C-&gt;B B-&gt;E\n*/\n</code></pre> <pre><code>struct Eset { //\u8fb9\u96c6\u5408\nint start; //\u8d77\u70b9\nint end; //\u7ec8\u70b9\nint weight;\n};\n</code></pre> <pre><code>void Sort_Eset(Eset *E, int length); //\u6392\u5e8f\u51fd\u6570\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_681","title":"\u91c7\u7528\u5192\u6ce1\u6392\u5e8f\uff0c\u53ef\u4ee5\u7075\u6d3b\u53d8\u6362","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_682","title":"\u90bb\u63a5\u77e9\u9635","text":"<p><pre><code>void Sort_Eset(Eset *E, int length) {\nbool flag = true; //\u6392\u5e8fflag\nfor (int i = 0 ; i &lt; length - 1 &amp;&amp; flag; ++i) { //\u5982\u679c\u672a\u53d1\u751f\u4ea4\u6362\u5219\u8bf4\u660e\u6709\u5e8f\nflag = false; //\u7b2c\u4e00\u6b21\u8bbe\u7f6e\u4e3afalse\nfor (int j = 0 ; j &lt; length - 1 - i; ++j) {\nif (E[j].weight &gt; E[j + 1 ].weight) {\nflag = true; //\u5982\u679c\u53d1\u751f\u4ea4\u6362\uff0c\u4e3atrue\nEset temp = E[j];\nE[j] = E[j + 1 ];\nE[j + 1 ] = temp;\n}\n}\n}\n}\n</code></pre> <pre><code>void InitEset(Eset *E, AMGraph *G) {\n//\u904d\u5386\u4e0a\u4e09\u89d2\u77e9\u9635\nEset *p = E;\nfor (int i = 0 ; i &lt; G-&gt;vertices; ++i) // i\u4e3aarray\nfor (int k = i + 1 ; k &lt; G-&gt;vertices; ++k) { // k\u4e3acolumn\nif (G-&gt;edge[i][k] &lt; MAXWEIGHT) { //\u5c0f\u4e8e\u8bf4\u660e\u5b58\u5728\n(p)-&gt;start = i;\n(p)-&gt;end = k;\n(p)-&gt;weight = G-&gt;edge[i][k];\n++p;\n}\n}\np = NULL;\n}\n</code></pre> <pre><code>void MST_Krusal(AMGraph *G) {\nEset *E = (Eset *)malloc(sizeof(Eset) * G-&gt;edges);\nInitEset(E, G);\nSort_Eset(E, G-&gt;edges);\n//\u6b64\u65f6E\u96c6\u5408\u6709\u5e8f\n//\u5efa\u7acbV\u96c6\u5408\u5b58\u653e\u8fde\u901a\u4f9d\u8d56\u70b9\nint V[G-&gt;vertices]; //\u4f8b\u5982V[i] = k;\n//\u8868\u793a\u9876\u70b9i\u4f9d\u8d56\u4e8ek\u70b9(\u5373\u5fc5\u6709\u4e00\u6761\u5230k\u7684\u8def\u5f84)\nfor (int i = 0 ; i &lt; G-&gt;vertices; ++i) //\u6e05\u6389\u6240\u6709\u8fb9\nV[i] = i; //\u73b0\u5728V\u96c6\u5408\u7684\u8fde\u901a\u5206\u91cf\u5c31\u662f\u81ea\u5df1\uff0c\u5373\u6240\u6709\u9876\u70b9\u65e0\u90bb\u63a5\u70b9\n</code></pre> <pre><code>for (int j = 0 ; j &lt; G-&gt;edges; ++j) {\nint v_1 = E[j].start; // v_1\u548cv_2\u5206\u522b\u4e3a\u8fd9\u4e2a\u8fb9\u7684\u9876\u70b9\nint v_2 = E[j].end;\n</code></pre> <pre><code>int component_v_1 = V[v_1]; // v_1\u6240\u5c5e\u7684\u8fde\u901a\u5206\u91cf\nint component_v_2 = V[v_2]; // v_2\u6240\u5c5e\u7684\u8fde\u901a\u5206\u91cf\nif (component_v_1 != component_v_2) { //\u8bf4\u660e\u4e0d\u4f1a\u5f62\u6210loop\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_683","title":"\u6d4b\u8bd5\u4ee3\u7801","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_684","title":"\u90bb\u63a5\u8868","text":"<p><pre><code>printf(\"%c-&gt;%c \", G-&gt;vertex[v_1], G-&gt;vertex[v_2]);\n//\u94fe\u63a5\u8fd9\u4e24\u4e2a\u9876\u70b9\uff0c\u5e76\u4e14\u8f93\u51fa\n//\u56e0\u4e3a\u94fe\u63a5\u4e86\u4e24\u4e2a\u9876\u70b9\uff0c\u90a3\u4e48\u6b64\u65f6\u6784\u6210\u4e00\u6761\u65b0\u7684\u8fde\u901a\u5206\u91cf\uff0c\u6240\u4ee5\u8981\u66f4\u65b0\u8fde\u901a\u5206\u91cf\u4f9d\u8d56\u70b9\nfor (int k = 0 ; k &lt; G-&gt;vertices; ++k) {\nif (V[k] == component_v_2) //\u5982\u679ck\u9876\u70b9\u4f9d\u8d56\u4e8ev_2\u7684\u8fde\u901a\u5206\u91cf\n//\u90a3\u4e48\u5728\u8fde\u63a5\u4e4b\u540e\uff0c\u6240\u6709\u7684\u9876\u70b9\u90fd\u4f9d\u8d56\u4e8ev_1\u7684\u8fde\u901a\u5206\u91cf\nV[k] = component_v_1;\n}\n}\n}\n</code></pre> <pre><code>free(E);\n}\n</code></pre> <pre><code>#include \"AMGraph.h\"\n</code></pre> <pre><code>int main(void) {\nAMGraph G;\nCreat_unAMGraph_weightd(&amp;G);\n</code></pre> <pre><code>MST_Krusal(&amp;G);\nsystem(\"pause\");\nreturn 0 ;\n}\n</code></pre> <pre><code>//\n/*\n6 10\nA B C D E F\nA B 6\nA D 5\nA C 1\nB C 5\nC D 5\nB E 3\nE C 6\nC F 4\nD F 2\nE F 6\n----------------------\nA-&gt;C D-&gt;F B-&gt;E C-&gt;F B-&gt;C\n*/\n</code></pre> <pre><code>void InitEset(Eset *E, ALGraph *G) {\n//! \u90bb\u63a5\u8868\u548c\u90bb\u63a5\u77e9\u9635\u4e0d\u4e00\u6837\uff0c\u77e9\u9635\u662f\u8fde\u7eed\u7684\uff0c\u800c\u90bb\u63a5\u8868\u5728\u5b58\u50a8\u4e0a\u4e0d\u662f\u8fde\u7eed\u7684\n//! ALGraph\u9700\u8981\u4e3a\u6709\u5411\u56fe\nEset *p_E = E;\n</code></pre> <pre><code>for (int i = 0 ; i &lt; G-&gt;vertices; ++i) {\nEdgeNode *p = G-&gt;vertex[i].first;\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_685","title":"\u6d4b\u8bd5\u4ee3\u7801","text":"<p><pre><code>while (p) {\np_E-&gt;start = i;\np_E-&gt;end = p-&gt;adjvertex;\np_E-&gt;weight = p-&gt;weight;\n</code></pre> <pre><code>p = p-&gt;next;\n</code></pre> <pre><code>++p_E;\n}\n}\np_E = NULL;\n}\n</code></pre> <pre><code>void MST_Krusal(ALGraph *G) {\nEset *E = (Eset *)malloc(sizeof(Eset) * G-&gt;edges);\nInitEset(E, G);\nSort_Eset(E, G-&gt;edges);\n</code></pre> <pre><code>for (int w = 0 ; w &lt; G-&gt;edges; ++w) {\nprintf(\"(%d)start=%d, end=%d,weight=%d\\n\", w, E[w].start, E[w].end,\nE[w].weight);\n}\nint V[G-&gt;vertices];\nfor (int i = 0 ; i &lt; G-&gt;vertices; ++i)\nV[i] = i;\n</code></pre> <pre><code>for (int j = 0 ; j &lt; G-&gt;edges; ++j) {\nint v_1 = E[j].start;\nint v_2 = E[j].end;\n</code></pre> <pre><code>int component_v_1 = V[v_1];\nint component_v_2 = V[v_2];\n</code></pre> <pre><code>if (component_v_1 != component_v_2) {\nprintf(\"%c-&gt;%c \", G-&gt;vertex[v_1].name, G-&gt;vertex[v_2].name);\n</code></pre> <pre><code>for (int k = 0 ; k &lt; G-&gt;vertices; ++k) {\nif (component_v_2 == V[k])\nV[k] = component_v_1;\n}\n}\n}\n</code></pre> <pre><code>free(E);\n}\n</code></pre> <pre><code>#include \"ALGraph.h\"\n</code></pre> <pre><code>int main(void) {\nALGraph G;\nCreat_ALGraph_weighted(&amp;G); //! \u9700\u8981\u7528\u6709\u5411\u56fe\u6765\u8868\u793a\u65e0\u5411\u56fe\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_686","title":"\u6700\u77ed\u8def\u5f84","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#dijkstra_1","title":"Dijkstra \u7b97\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_687","title":"\u82e5\u6709\u65e0\u5411\u5e26\u6743\u7f51","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_688","title":"\u4ee5 \u4e3a\u9876\u70b9\uff0c\u6c42\u51fa\u6240\u6709 \u548c \u95f4\u7684\u6700\u8def\u5f84","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_689","title":"\u4ee4 \u4e3a \u5230 \u95f4\u7684\u8def\u5f84\u957f\u5ea6\uff0c\u96c6\u5408","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_690","title":"\u82e5 \u5b58\u5728\uff0c\u5219\u521d\u59cb\u5316 \uff0c\u82e5\u4e0d\u5b58\u5728\u5219","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_691","title":"\u904d\u5386\u6240\u6709\u70b9\u4e4b\u540e\uff0c\u628a \u52a0\u5165\u5230 \u4e2d","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_692","title":"\u628a \u52a0\u5165\u5230 \u4e2d\uff0c\u82e5 \u4e3a \u7684\u90bb\u63a5\u70b9\uff0c\u4e14","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_693","title":"\u5219","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_694","title":"\u91cd\u590d\u4e0a\u6b65\u9aa4\uff0c\u76f4\u5230","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_695","title":"\u7528\u4ee3\u7801\u5b9e\u73b0\u6b64\u56fe","text":"<p><pre><code>MST_Krusal(&amp;G);\n</code></pre> <pre><code>system(\"pause\");\nreturn 0 ;\n}\n//\n/*\n6 10\nA B C D E F\nA B 6\nA D 5\nA C 1\nB C 5\nC D 5\nB E 3\nE C 6\nC F 4\nD F 2\nE F 6\n----------------------\nA-&gt;C D-&gt;F B-&gt;E C-&gt;F B-&gt;C\n*/\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_696","title":"\u4ee3\u7801\u5b9e\u73b0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_697","title":"\u90bb\u63a5\u77e9\u9635","text":"<p><pre><code>void ShortestPath(AMGraph *G, int v, int *path) {\n//! \u6570\u7ec4path[i]\u8868\u793ai\u7684\u6700\u77ed\u524d\u9a71\nint D[G-&gt;vertices]; //\u96c6\u5408D\u8868\u793a\u5404\u4e2a\u9876\u70b9\u5230v\u7684\u8ddd\u79bb\nbool S[G-&gt;vertices]; //\u96c6\u5408S\uff0c\u5982\u679ci\u70b9\u5728S\u4e2d\u5219\u4e3atrue\n</code></pre> <pre><code>for (int i = 0 ; i &lt; G-&gt;vertices; ++i) {\n//\u521d\u59cb\u5316D,S,path\nD[i] = G-&gt;edge[v][i]; //\u5982\u679c\u4e0d\u5b58\u5728\u8fb9\uff0c\u5219\u4e3aMAXWEIGHT\nS[i] = false; //\u521d\u59cb\u5316S\u4e3a\u7a7a\u96c6\n</code></pre> <pre><code>if (D[i] &lt; MAXWEIGHT) //\u8bf4\u660e\u8fb9\u5b58\u5728\npath[i] = v; //\u8bbe\u7f6e\u524d\u9a71\nelse\npath[i] = - 1 ; //\u5982\u679c\u4e0d\u5b58\u5728\u8fb9\uff0c-1\n}\n</code></pre> <pre><code>S[v] = true;\nD[v] = 0 ;\n//\u521d\u59cb\u5316\u5b8c\u6210\n</code></pre> <pre><code>for (int i = 1 ; i &lt; G-&gt;vertices; ++i) {\nint min_index;\nint min = MAXWEIGHT;\nfor (int j = 0 ; j &lt; G-&gt;vertices; ++j) {\n//\u4eceD\u4e2d\u9009\u51fa\u8def\u5f84\u6700\u77ed\u70b9\uff0c\u4e14\u4e0d\u5728\u96c6\u5408S\u4e2d\nif (!S[j] &amp;&amp; D[j] &lt; min) {\nmin_index = j;\nmin = D[j]; //\u6c42\u51faD[j]\u6700\u5c0f\u7684\u70b9\n}\n}\nS[min_index] = true; //\u628a\u8be5\u70b9\u52a0\u5165\u5230S\u4e2d\n</code></pre> <pre><code>for (int k = 0 ; k &lt; G-&gt;vertices; ++k) {\nif (!S[k] &amp;&amp; (G-&gt;edge[min_index][k] + D[min_index] &lt; D[k])) {\n//\u904d\u5386min_index\u7684\u90bb\u63a5\u70b9\uff0c\u8fdb\u884c\u5224\u65ad\nD[k] = G-&gt;edge[min_index][k] + D[min_index];\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_698","title":"\u6d4b\u8bd5\u4ee3\u7801","text":"<p><pre><code>path[k] = min_index;\n}\n}\n}\n}\n</code></pre> <pre><code>void ShortestPath_Dijkstra(AMGraph *G, VertexType v) {\n//\u5c01\u88c5\u7684\u51fd\u6570\uff0c\u8868\u793a\u4ee5v\u4e3a\u8d77\u70b9\uff0c\u6c42\u51fa\u6240\u6709\u70b9\u4e0ev\u7684\u6700\u77ed\u8def\u5f84\nint v_index = Locate_vertex(G, v);\nint *path = (int *)malloc(sizeof(int) * G-&gt;vertices);\nShortestPath(G, v_index, path);\n// for (int i = 0; i &lt; G-&gt;vertices; ++i)\n</code></pre> <pre><code>for (int i = 0 ; i &lt; G-&gt;vertices; ++i) {\nif (i != v_index) {\nprint_path(G, path, v_index, i);\nprintf(\"\\n\");\n}\n}\n</code></pre> <pre><code>free(path);\n}\n</code></pre> <pre><code>void print_path(AMGraph *G, int *path, int start, int end) {\nSqStack S;\nInitStack(&amp;S);\nprintf(\"%c-&gt;\", G-&gt;vertex[start]);\nPush(&amp;S, end); //\u5148\u5165\u6808end\nint flag = end; //\u7528\u4e8e\u5224\u65ad\u662f\u5426\u8f93\u51fa\"-&gt;\"\"\nend = path[end];\nwhile (end != start) {\nPush(&amp;S, end);\nend = path[end];\n}\n</code></pre> <pre><code>int head = start;\nint pop;\nwhile (!IsEmpty(&amp;S)) {\n</code></pre> <pre><code>Pop(&amp;S, &amp;pop);\nprintf(\"%c(%d)\", G-&gt;vertex[pop], G-&gt;edge[head][pop]);\nif (pop != flag)\nprintf(\"-&gt;\");\nhead = pop;\n}\n}\n</code></pre> <pre><code>#include \"AMGraph.h\"\n</code></pre> <pre><code>int main(void) {\nAMGraph G;\nCreat_unAMGraph_weightd(&amp;G);\nShortestPath_Dijkstra(&amp;G, 'A');\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#floyd_1","title":"Floyd\u7b97\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_699","title":"\u672c\u8d28\u4e0a\u4e3a\u66b4\u529b\u7b97\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_700","title":"\u4ee4\u77e9\u9635 \u5b58\u50a8\u56fe \u7684\u6743\u503c\uff0c\u5176\u4e2d \u6709 \u4e2a\u9876\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_701","title":"\u8868\u793a\u5230\u7684 \u8868\u793a \u5230 \u7684","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_702","title":"\u904d\u5386\u77e9\u9635\u6240\u6709\u5143\u7d20\uff0c\u5411 \u4e4b\u95f4\u63d2\u5165\u70b9 \uff0c\u5982\u679c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_703","title":"\u5219","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_704","title":"\u904d\u5386\u7ed3\u675f\u540e\uff0c\u77e9\u9635 \u8bb0\u5f55 \u7684\u6700\u77ed\u8def\u5f84","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_705","title":"\u4ee3\u7801\u5b9e\u73b0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_706","title":"\u90bb\u63a5\u77e9\u9635","text":"<p><pre><code>system(\"pause\");\nreturn 0 ;\n}\n//\n/*\n7 11\nA B C D E F G\nA B 15\nA C 9\nA D 4\nC F 12\nF G 16\nF D 6\nD B 5\nB G 8\nB E 2\nE G 3\nD G 11\n----------------------\nA-&gt;D(4)-&gt;B(5)\nA-&gt;C(9)\nA-&gt;D(4)\nA-&gt;D(4)-&gt;B(5)-&gt;E(2)\nA-&gt;D(4)-&gt;F(6)\nA-&gt;D(4)-&gt;B(5)-&gt;E(2)-&gt;G(3)\n*/\n</code></pre> <pre><code>int **Path_Matrix(AMGraph *G) {\n// path[i][j]\u8868\u793a\u4ecei\u5230j\u7684\u8def\u5f84\u4e0a\uff0cj\u70b9\u7684\u76f4\u63a5\u524d\u9a71\nint n = G-&gt;vertices;\nint **path = (int **)malloc(sizeof(int *) * n); //\u5148\u5206\u914d\u4e00\u7ef4\u6307\u9488\u6570\u7ec4\nfor (int i = 0 ; i &lt; G-&gt;vertices; ++i) // path[i]\u5206\u914d\u7a7a\u95f4;\npath[i] = (int *)malloc(sizeof(int) * n);\n//\u6b64\u65f6path\u4e3a\u4e8c\u7ef4\u6570\u7ec4\n</code></pre></p> <p>int D[n][n];</p> <p>for (int i = 0 ; i &lt; n; ++i) for (int j = 0 ; j &lt; n; ++j) { D[i][j] = G-&gt;edge[i][j]; // copy\u7ed9D if (D[i][j] &lt; MAXWEIGHT) //\u70b9i,j\u5982\u679c\u4e3a\u90bb\u63a5\u70b9 path[i][j] = i; //\u6b64\u65f6\u7684\u8def\u5f84\u5373\u4e3ai\uff0cj\u4e4b\u95f4\u7684\u8fb9\uff0c\u6240\u4ee5j\u7684\u524d\u9a71\u4e3ai else path[i][j] = - 1 ; }</p> <p>for (int k = 0 ; k &lt; n; ++k) //\u5c1d\u8bd5\u5728\u4e24\u70b9\u4e4b\u95f4\u52a0\u5165\u70b9k for (int i = 0 ; i &lt; n; ++i) for (int j = 0 ; j &lt; n; ++j) { if (D[i][k] + D[k][j] &lt; D[i][j]) { D[i][j] = D[i][k] + D[k][j]; path[i][j] = path[k][j]; //\u66f4\u65b0path\uff0c\u5373j\u7684\u524d\u9a71\uff0c\u5411\u524d\u9012\u5f52 } }</p> <p>return path; }</p> <p>void ShortestPath_Floyd(AMGraph *G, VertexType v1, VertexType v2) { int start = Locate_vertex(G, v1); int end = Locate_vertex(G, v2);</p> <p>int **path = Path_Matrix(G);</p> <p>SqStack S; InitStack(&amp;S); Push(&amp;S, end); //\u5148\u5165\u6808\u672b\u7aef\u70b9 int prior = path[start][end];</p> <p>while (prior != start) { //\u5411\u524d\u56de\u6eaf\uff0c\u76f4\u5230prior == start Push(&amp;S, prior); prior = path[start][prior]; }</p> <p>int head = start; // head\u7528\u4e8e\u5411\u524d\u8ffd\u6eaf int pop; printf(\"%c-&gt;\", G-&gt;vertex[start]); while (!IsEmpty(&amp;S)) { Pop(&amp;S, &amp;pop); printf(\"%c(%d)\", G-&gt;vertex[pop], G-&gt;edge[head][pop]); if (pop != end) printf(\"-&gt;\"); head = pop; //\u5411\u524d\u8ffd\u6eaf }</p> <p>for (int i = 0 ; i &lt; G-&gt;vertices; ++i) //\u56e0\u4e3apath\u672c\u8d28\u4e0a\u662f\u4e00\u7ef4\u6307\u9488\u6570\u7ec4\uff0c\u6bcf\u4e2a\u6307\u9488\u53c8\u6307\u5411\u4e00\u5757\u7a7a\u95f4\uff0c\u6240\u4ee5\u9010\u4e2a\u91ca\u653e free(path[i]); free(path); //\u8fd8\u9700\u8981\u91ca\u653epath</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#directed-acycline-graph_1","title":"\u6709\u5411\u65e0\u73af\u56fe(Directed Acycline Graph)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#aocaoe_1","title":"AOC\u548cAOE","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_707","title":"\u7f51","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_708","title":"\u7528\u4e00\u4e2a\u6709\u5411\u56fe\u8868\u793a\u4e00\u4e2a\u5de5\u7a0b\u7684\u5404\u4e2a\u5b50\u5de5\u7a0b\u53ca\u5176\u76f8\u4e92\u5236\u7ea6\u5173\u7cfb","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_709","title":"\u5176\u4e2d\u9876\u70b9\u8868\u793a\u6d3b\u52a8\uff0c\u5f27\u8868\u793a\u4f18\u5148\u5236\u7ea6\u5173\u7cfb","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_710","title":"\u7f51","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_711","title":"\u5f27\u8868\u793a\u6d3b\u52a8\uff0c\u4ee5\u9876\u70b9\u8868\u793a\u6d3b\u52a8\u5f00\u59cb\u6216\u7ed3\u675f\u4e8b\u4ef6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_712","title":"\u62d3\u6251\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_713","title":"\u5728 \u7f51\u6ca1\u6709\u56de\u8def\u7684\u524d\u63d0\u4e0b\uff0c\u5c06\u5168\u90e8\u6d3b\u52a8\u6392\u5217\u6210\u4e00\u4e2a\u7ebf\u6027\u5e8f\u5217","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_714","title":"\u7f51\u4e2d\u8fb9 \u5b58\u5728\uff0c\u5219\u5728\u8fd9\u4e2a\u5e8f\u5217\u4e2d\u4e00\u5b9a\u6392\u5728\u7684\u524d\u9762","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_715","title":"\u5bf9 \u7f51\u8fdb\u884c\u5982\u4e0a\u6392\u5e8f\uff0c\u5373\u4e3a\u62d3\u6251\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_716","title":"\u7b97\u6cd5\u601d\u8def","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_717","title":"\u82e5 \u56fe\u4e2d \uff0c\u5219\u53bb\u9664\u6389\u6240\u6709\u548c \u76f8\u5173\u7684\u8fb9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_718","title":"\u4ee4 \uff0c\u628a \u52a0\u5165\u5230 \u4e2d","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_719","title":"\u66f4\u65b0\u6240\u6709 \u7684","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_720","title":"\u76f4\u5230","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_721","title":"\u6b64\u65f6 \u7684\u5e8f\u5217\u5219\u4e3a\u62d3\u6251\u5e8f\u5217","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_722","title":"\u4ee3\u7801\u5b9e\u73b0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_723","title":"\u5b9e\u73b0\u4e0b\u56fe","text":"<pre><code>path = NULL;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_724","title":"\u90bb\u63a5\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_725","title":"\u524d\u7f6e\u51fd\u6570","text":"<p><pre><code>void InDegree(ALGraph *G, int *a) {\n//\u83b7\u53d6\u6240\u6709\u70b9\u7684indegree\nfor (int i = 0 ; i &lt; G-&gt;vertices; ++i) {\nEdgeNode *p = G-&gt;vertex[i].first;\n</code></pre> <pre><code>while (p) {\n++a[p-&gt;adjvertex];\np = p-&gt;next;\n}\n}\n}\n</code></pre> <pre><code>int *Get_Topo(ALGraph *G) {\nint *indegree = (int *)malloc(sizeof(int) * G-&gt;vertices);\nmemset(indegree, 0 , sizeof(int) * G-&gt;vertices); //\u4e3b\u8981\u8981\u5bf9\u5806\u6570\u636e\u521d\u59cb\u5316\nint *topo = (int *)malloc(sizeof(int) * G-&gt;vertices);\nmemset(topo, 0 , sizeof(int) * G-&gt;vertices);\n</code></pre> <pre><code>InDegree(G, indegree); //\u83b7\u53d6\u5168\u90e8\u70b9\u7684indegree\n</code></pre> <pre><code>SqStack S;\nInitStack(&amp;S);\n</code></pre> <pre><code>for (int i = 0 ; i &lt; G-&gt;vertices; ++i)\nif (!indegree[i]) //\u5982\u679cindegree==0 \u5165\u6808\nPush(&amp;S, i);\n</code></pre> <pre><code>int m = 0 ; //\u7528\u4e8e\u63a7\u5236topo\u4e0b\u6807\nint pop; //\u7528\u4e8e\u63a5\u6536\u6808\u5f39\u51fa\u503c\nwhile (!IsEmpty(&amp;S)) {\nPop(&amp;S, &amp;pop); //\u5f39\u51fa\ntopo[m++] = pop; //\u6808\u9876\u5373\u4e3a\u62d3\u6251\u5e8f\u5217\u9876\u70b9\nEdgeNode *p = G-&gt;vertex[pop].first;\n</code></pre> <pre><code>while (p) {\n//\u56e0\u4e3a\u5728\u903b\u8f91\u4e0a\u5220\u9664\u4e86pop\u70b9\uff0c\u6240\u4ee5\u66f4\u65b0\u5b83\u90bb\u63a5\u70b9\u7684indegree\n--indegree[p-&gt;adjvertex];\n</code></pre> <pre><code>if (!indegree[p-&gt;adjvertex]) //\u5224\u65adindegree==0\nPush(&amp;S, p-&gt;adjvertex);\n</code></pre> <pre><code>p = p-&gt;next;\n}\n}\n</code></pre> <pre><code>if (m &lt; G-&gt;vertices) {\n//\u5982\u679cm=G-&gt;vertices \u8bf4\u660eG\u4e3aAOV\n//\u5982\u679c\u4e0d\u8bf4\u660e\u6709\u56de\u8def\nfree(indegree);\nfree(topo);\nreturn NULL; //\u8fd4\u56de\u7a7a\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_726","title":"\u5173\u952e\u8def\u5f84","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_727","title":"\u5982\u4e0a\u56fe \u7f51\uff0c\u6e90\u70b9 \u8868\u793a\u4e8b\u4ef6\u6574\u4f53\u7684\u5f00\u59cb\uff0c\u6c47\u70b9 \u8868\u793a\u4e8b\u4ef6\u6574\u4f53\u7ed3\u675f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_728","title":"\u5176\u4ed6\u7684\u70b9\u5219\u8868\u793a\u4e00\u4e2a\u6d3b\u52a8\u7684\u7ed3\u675f\uff0c\u540c\u65f6\u4e5f\u8868\u793a\u53e6\u5916\u4e00\u4e2a\u6d3b\u52a8\u7684\u5f00\u59cb","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_729","title":"\u5173 \u8868\u793a\u65f6\u95f4\uff0c\u800c \u8868\u793a\u6d3b\u52a8\uff0c \u8868\u793a\u6d3b\u52a8\u6240\u9700\u8981\u7684\u65f6\u95f4","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_730","title":"\u4ee4 \u8868\u793a \u7684\u6700\u65e9\u5f00\u59cb\u65f6\u95f4\uff0c\u5373 \u65f6\u95f4\u4e4b\u524d\u7684\u6d3b\u52a8\u5fc5\u987b\u5b8c\u6210\uff0c \u624d\u80fd\u5f00\u59cb","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_731","title":"\u5373 \u4e3a\u7684\u76f4\u63a5\u524d\u9a71","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_732","title":"\u4ee4 \u8868\u793a \u7684\u6700\u8fdf\u5f00\u59cb\u65f6\u95f4 \u5373 \u7684\u540e\u7ee7\u70b9 \u9700\u8981\u4e3a \u7559\u51fa\u65f6\u95f4 \u4e3a \u7684\u76f4\u63a5\u524d\u9a71","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_733","title":"\u82e5\u5df2\u77e5 \uff0c\u5219","text":"<p><pre><code>} else {\nfree(indegree);\nreturn topo;\n}\n}\n</code></pre> <pre><code>void TopoSort(ALGraph *G) {\nint *topo = Get_Topo(G);\nif (!topo) { //\u5982\u679c\u4e3aNULL\nprintf(\"The Graph is not AVO!\\n\");\nreturn;\n}\n</code></pre> <pre><code>for (int i = 0 ; i &lt; G-&gt;vertices; ++i) {\nprintf(\"%c \", G-&gt;vertex[topo[i]].name);\n}\n</code></pre> <pre><code>free(topo); //\u6ce8\u610f\u91ca\u653e\u5806\u533a\u6570\u636e\ntopo = NULL;\n}\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_734","title":"\u6d3b\u52a8\u65f6\u95f4 \u8868\u793a\u8fb9 \u7684","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_735","title":"\u8868\u793a\uff0c \u53d1\u751f\u7684\u6700\u65e9\u65f6\u95f4\uff0c\u53ea\u6709 \u53d1\u751f\u4e86\uff0c \u624d\u80fd\u53d1\u751f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_736","title":"\u6240\u4ee5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_737","title":"\u6ce8\u610f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_738","title":"\uff0c\u5373\u6e90\u70b9 \u7684\u6700\u65e9\u53d1\u751f\u65f6\u95f4\u4e3a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_739","title":"\u5373\u6c47\u70b9 \u7684\u53d1\u751f\u6700\u65e9\u65f6\u95f4 \u7684\u6700\u8fdf\u65f6\u95f4","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_740","title":"\u7531\u6b64\u53ef\u77e5 \u4ece\u6e90\u70b9\u5f00\u59cb\u5411\u524d\u9012\u5f52 \u4ece\u540e\u5411\u524d\u9012\u5f52","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_741","title":"\u8868\u793a \u7684\u6700\u8fdf\u53d1\u751f\u65f6\u95f4","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_742","title":"\u82e5 \u5219\u8bf4\u660e\u6d3b\u52a8 \u6ca1\u6709\u7f13\u51b2\u65f6\u95f4\uff0c\u4e3a\u5173\u952e\u8def\u5f84","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_743","title":"\u5982\u679c \u8fd9\u8bf4\u660e\u6d3b\u52a8 \u6709 \u65f6\u95f4\u53ef\u4ee5\u8c03\u6574","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_744","title":"\u4ee3\u7801\u5b9e\u73b0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_745","title":"\u5b9e\u73b0\u4e0b\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_746","title":"\u90bb\u63a5\u8868","text":"<p><pre><code>void CriticalPath(ALGraph *G) {\nint *topo = Get_Topo(G);\nif (!topo) {\nprintf(\"The Graph is not AVO\");\nreturn;\n}\n</code></pre> <pre><code>int n = G-&gt;vertices;\nint ve[n], vl[n]; // ve\u8868\u793ai\u9876\u70b9\u7684\u6700\u65e9\u53d1\u751f\u65f6\u95f4\uff0cvl\u8868\u793ai\u9876\u70b9\u7684\u6700\u665a\u53d1\u751f\u65f6\u95f4\nmemset(ve, 0 , sizeof(int) * n); //\u521d\u59cb\u5316\u4e3a 0\n</code></pre> <pre><code>for (int i = 0 ; i &lt; n; ++i) {\nint k = topo[i]; //\u6309\u7167\u62d3\u6251\u5e8f\u5217\u904d\u5386\u5404\u70b9\u7684\u90bb\u63a5\u70b9\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#_747","title":"\u56fe\u7684\u5934\u6587\u4ef6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#define_graphh_1","title":"define_Graph.h","text":"<p><pre><code>EdgeNode *p = G-&gt;vertex[k].first;\nwhile (p) {\nif (ve[p-&gt;adjvertex] &lt; ve[k] + p-&gt;weight) //\u6c42\u51fa\u6700\u5927\u503c\nve[p-&gt;adjvertex] = ve[k] + p-&gt;weight;\np = p-&gt;next; //\u63a5\u7740\u5224\u65ad\u4e0b\u4e00\u4e2a\u90bb\u63a5\u70b9\n}\n}\n//\u628a\u6240\u6709\u7684\u9876\u70b9\u7684\u6700\u665a\u53d1\u751f\u65f6\u95f4\u521d\u59cb\u5316\u4e3a\u6c47\u70b9\u7684\u6700\u665a\u53d1\u751f\u65f6\u95f4\nfor (int i = 0 ; i &lt; n; ++i)\nvl[i] = ve[topo[n - 1 ]]; // topo[n-1]\u7684ve\u662f\u6700\u5927\u7684\uff0c\u4e3a\u4e0b\u9762\u6c42vl\u6700\u5c0f\u503c\u505a\u51c6\u5907\n//--------------------------------------------\nfor (int i = n - 1 ; i &gt;= 0 ; --i) {\n//\u4ece\u6c47\u70b9\u4ece\u540e\u5411\u524d\u904d\u5386\u62d3\u6251\u5e8f\u5217\nint k = topo[i];\n</code></pre> <pre><code>EdgeNode *p = G-&gt;vertex[k].first;\n</code></pre> <pre><code>while (p) {\nif (vl[k] &gt; vl[p-&gt;adjvertex] - p-&gt;weight)\nvl[k] = vl[p-&gt;adjvertex] - p-&gt;weight; //\u8981vl\u7684\u6700\u5c0f\u503c\np = p-&gt;next;\n}\n}\n//------------------------------------------\nfor (int i = 0 ; i &lt; n; ++i) {\n</code></pre> <pre><code>EdgeNode *p = G-&gt;vertex[i].first;\nwhile (p) {\nint j = p-&gt;adjvertex;\nint e = ve[i]; // \u6d3b\u52a8\u7684\u6700\u53d1\u751f\u65f6\u95f4 = \u8be5\u8fb9\u7684\u524d\u9a71\u8282\u70b9i\u7684\u6700\u65e9\u53d1\u751f\u65f6\u95f4\n//\u6d3b\u52a8\u7684\u6700\u665a\u53d1\u751f\u65f6\u95f4=\u8be5\u8fb9\u524d\u9a71\u8282\u70b9\u7684\u6700\u665a\u53d1\u751f\u65f6\u95f4-\u8be5\u8fb9\u7684weight\nint l = vl[j] - p-&gt;weight;\n</code></pre> <pre><code>if (e == l) //\u5982\u679c\u7b49\u4e8e\u5373\u4e3a\u5173\u952e\u8def\u5f84\nprintf(\"%c-&gt;%c \", G-&gt;vertex[i].name, G-&gt;vertex[j].name);\n</code></pre> <pre><code>p = p-&gt;next;\n}\n}\n</code></pre> <pre><code>free(topo);\n}\n</code></pre> <pre><code>#include \"Queue.h\"\n#include \"Stack.h\"\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#amgraphh_1","title":"AMGraph.h","text":"<p><pre><code>#define MAXWEIGHT 99999 //\u6700\u5927\u6743\u503c\n#define MAXVERTEX 20 //\u6700\u5927\u5b9a\u70b9\u6570\n</code></pre> <pre><code>typedef char VertexType; //\u9876\u70b9\u7528\u5b57\u7b26\u8868\u793a\ntypedef int MatrixType; //\u77e9\u9635\u7c7b\u578b\n</code></pre> <pre><code>struct Uset {\nint adjvertex; //\u4e0b\u6807\u4e3ai\u7684\u70b9\u7684\u90bb\u63a5\u70b9\nint weight; //\u5f53\u524d\u6743\u503c\n};\n</code></pre> <pre><code>int Min_Uset(Uset *U, int n);\n</code></pre> <pre><code>struct Eset {\nint start;\nint end;\nint weight;\n};\n</code></pre> <pre><code>void Sort_Eset(Eset *E, int length);\n</code></pre> <pre><code>#include \"define_Graph.h\"\n</code></pre> <pre><code>#ifndef __GRAPH_H\n#define __GRAPH_H\n</code></pre> <pre><code>typedef struct __AMGraph {\nVertexType vertex[MAXVERTEX];\nMatrixType edge[MAXVERTEX][MAXVERTEX];\nint vertices, edges;\n} AMGraph;\n</code></pre> <pre><code>int Locate_vertex(AMGraph *G, char v);\nvoid print_Matrix_weighted(const AMGraph *G);\nvoid print_Matrix_unweighted(const AMGraph *G);\nvoid Creat_unAMGraph_unweightd(AMGraph *G);\nvoid Creat_unAMGraph_weightd(AMGraph *G);\nvoid Creat_AMGraph_weightd(AMGraph *G);\nvoid Creat_AMGraph_unweightd(AMGraph *G);\n</code></pre> <pre><code>void DFS_AM(AMGraph *G, int v, bool *visit);\nvoid DFS_AMGraph(AMGraph *G, VertexType v);\n</code></pre> <pre><code>void BFS_AM(AMGraph *G, int v, bool *visit);\nvoid BFS_AMGraph(AMGraph *G, VertexType v);\n</code></pre> <pre><code>void MST_Prim(AMGraph *G, VertexType v);\n</code></pre> <pre><code>void InitEset(Eset *E, AMGraph *G);\nvoid MST_Krusal(AMGraph *G);\n</code></pre> <pre><code>void ShortestPath(AMGraph *G, VertexType v);\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#algraphh_1","title":"ALGraph.h","text":"<p><pre><code>void ShortestPath_Dijkstra(AMGraph *G, VertexType v);\n</code></pre> <pre><code>void ShortestPath(AMGraph *G, int v, int *path);\nvoid ShortestPath_Dijkstra(AMGraph *G, VertexType v);\nvoid print_path(AMGraph *G, int *path, int start, int end);\n</code></pre> <pre><code>int **Path_Matrix(AMGraph *G);\nvoid ShortestPath_Floyd(AMGraph *G, VertexType v1, VertexType v2);\n#endif\n</code></pre> <pre><code>#include \"define_Graph.h\"\n</code></pre> <pre><code>#ifndef __ALGRAPH_H\n#define __ALGRAPH_H\n</code></pre> <pre><code>typedef struct __EdgeNode {\nint adjvertex;\n__EdgeNode *next;\nint weight;\n} EdgeNode;\n</code></pre> <pre><code>typedef struct __ALGNode {\nVertexType name;\nEdgeNode *first;\n} ALGNode;\n</code></pre> <pre><code>typedef struct __ALGraph {\nALGNode vertex[MAXVERTEX];\nint edges, vertices;\n} ALGraph;\n</code></pre> <pre><code>int Locate_vertex(const ALGraph *G, VertexType v);\nvoid print_ALG_unweighted(const ALGraph *G);\nvoid print_ALG_weighted(const ALGraph *G);\nvoid Creat_unALGraph_unweighted(ALGraph *G);\nvoid Creat_ALGraph_unweighted(ALGraph *G);\nvoid Creat_unALGraph_weighted(ALGraph *G);\nvoid Creat_ALGraph_weighted(ALGraph *G);\nvoid DFS_AL(ALGraph *G, int v, bool *visit);\nvoid DFS_ALGraph(ALGraph *G, VertexType v);\n</code></pre> <pre><code>void BFS_AL(ALGraph *G, int v, bool *visit);\nvoid BFS_ALGraph(ALGraph *G, VertexType v);\n</code></pre> <pre><code>void MST_Prime(ALGraph *G, VertexType v);\n</code></pre> <pre><code>void InitEset(Eset *E, ALGraph *G);\nvoid MST_Krusal(ALGraph *G);\n</code></pre> <pre><code>void InDegree(ALGraph *G, int *a);\nint *Get_Topo(ALGraph *G);\nvoid TopoSort(ALGraph *G);\n</code></pre></p> <p>void CriticalPath(ALGraph *G);</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/DataStructure/#endif","title":"endif","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/%E5%AD%A6%E7%94%9F%E9%80%9A%E8%AE%AF%E5%BD%95%28%E5%8D%95%E9%93%BE%E8%A1%A8%29/","title":"\u94fe\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/%E5%AD%A6%E7%94%9F%E9%80%9A%E8%AE%AF%E5%BD%95%28%E5%8D%95%E9%93%BE%E8%A1%A8%29/#-","title":"\u5b66\u751f\u901a\u8baf\u5f55---\u5355\u94fe\u8868\u5b9e\u73b0","text":"<ul> <li>1\uff09\u521b\u5efa\u901a\u8baf\u5f55\u94fe\u8868\uff1b</li> <li>2\uff09\u8054\u7cfb\u4eba\u4fe1\u606f\u7684\u63d2\u5165\uff1b</li> <li>3\uff09\u6839\u636e\u8054\u7cfb\u4eba\u59d3\u540d\u6216\u5e8f\u53f7\u67e5\u627e\u4fe1\u606f\uff0c\u67e5\u627e\u6210\u529f\uff0c\u5c06\u67e5\u627e\u8005\u7684\u4fe1\u606f\u8f93\u51fa\u3002</li> <li>4\uff09\u5b9e\u73b0\u8054\u7cfb\u4eba\u4fe1\u606f\u5220\u9664\uff0c\u6839\u636e\u59d3\u540d\u6216\u5e8f\u53f7\u67e5\u627e\uff0c\u627e\u5230\u540e\u5220\u9664\uff1b</li> <li>5\uff09\u8f93\u51fa\u901a\u8baf\u5f55\u4e2d\u8054\u7cfb\u4eba\u4fe1\u606f\uff08\u6309\u7167\u7f16\u53f7\u6709\u5e8f\u8f93\u51fa\uff09\u3002</li> <li>6\uff09\u5220\u9664\u64cd\u4f5c\u65f6\uff0c\u63d0\u9192\u662f\u5426\u5220\u9664\uff0c\u786e\u8ba4\u540e\u5220\u9664\uff1b</li> <li>7\uff09\u4f7f\u7528\u83dc\u5355\u65b9\u5f0f\u7ba1\u7406\u901a\u8baf\u5f55\u64cd\u4f5c\u3002</li> </ul>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/%E5%AD%A6%E7%94%9F%E9%80%9A%E8%AE%AF%E5%BD%95%28%E5%8D%95%E9%93%BE%E8%A1%A8%29/#_1","title":"\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a","text":"<pre><code>#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n#include&lt;string.h&gt;\ntypedef int Status;\nconst int FALSE = 0;\nconst int TRUE = 1;\n//\u5b66\u751f\u4fe1\u606f\u6570\u636e\u7c7b\u578b\u5b9a\u4e49\ntypedef struct{\nchar name[10];\nchar stu_number[10];\nchar phone[10];\n}ElemType;\n//\u94fe\u8868\u7ed3\u70b9\u5b9a\u4e49\ntypedef struct Node{\nElemType data;      //\u6570\u636e\u57df\nstruct Node *next;  //\u6307\u9488\u57df\n}Lnode,*LinkList;\n//1.\u521d\u59cb\u5316\u94fe\u8868\nStatus initialization(LinkList &amp;Head)\n{\nHead=(LinkList)malloc(sizeof(Lnode));\n//\u5f00\u8f9f\u7a7a\u95f4\u5931\u8d25\uff0c\u8fd4\u56deFALSE\nif(Head==NULL)\n{\nreturn FALSE;\n}\nHead-&gt;next=NULL;\nreturn TRUE;\n}\n//2.\u521b\u5efa(\u94fe\u8868\u8d4b\u503c)\nStatus CreateList(LinkList &amp;Head)\n{\nif(Head==NULL)\n{\nreturn FALSE;\n}\nint n;\nLinkList p;\nprintf(\"\u8bf7\u8f93\u5165\u4f60\u8981\u5b58\u50a8\u7684\u5b66\u751f\u4eba\u6570:\\n\");\nscanf(\"%d\",&amp;n);\nfor(int i = 0; i &lt; n; i++ )\n{\np=(LinkList)malloc(sizeof(Lnode));\nprintf(\"\u8bf7\u8f93\u5165\u7b2c%d\u4e2a\u5b66\u751f\u7684\u59d3\u540d\u3001\u5b66\u53f7\u548c\u7535\u8bdd\u53f7\u7801\\n\",i+1);\nscanf(\"%s%s%s\",p-&gt;data.name,p-&gt;data.stu_number,p-&gt;data.phone);\np-&gt;next=Head-&gt;next;\nHead-&gt;next=p;\n}\nreturn TRUE;\n}\n//3.\u8f93\u51fa\nvoid Display(LinkList Head)\n{\nLinkList p;\nint i=1;\np=Head-&gt;next;\nprintf(\"\u5e8f\u53f7\\t\u59d3\u540d\\t\u5b66\u53f7\\t\\t\u7535\u8bdd\\n\");\nwhile(p!=NULL)\n{\nprintf(\"%d\\t%s\\t%s\\t%s\\n\",i,p-&gt;data.name,p-&gt;data.stu_number,p-&gt;data.phone);\np=p-&gt;next;\n++i;\n}\n}\n//4.\u9500\u6bc1\nStatus Destroy(LinkList &amp;Head)\n{\nLinkList p;\nif(Head==NULL)\n{\nreturn FALSE;\n}\nwhile(Head!=NULL)\n{\np=Head;\nHead=Head-&gt;next;\nfree(p);\n}\nreturn TRUE;\n}\n//5.\u63d2\u5165\nStatus Insert(LinkList &amp;Head)\n{\nif(Head==NULL)\n{\nreturn FALSE;\n}\nLinkList p;\np=(LinkList)malloc(sizeof(Lnode));\nif(p==NULL)\n{\nreturn FALSE;\n}\nprintf(\"\u8bf7\u8f93\u5165\u4f60\u8981\u63d2\u5165\u7684\u5b66\u751f\u4fe1\u606f\uff1a\\n\");\nscanf(\"%s%s%s\",p-&gt;data.name,p-&gt;data.stu_number,p-&gt;data.phone);\np-&gt;next=Head-&gt;next;\nHead-&gt;next=p;\nreturn TRUE;\n}\n//6.\u6839\u636e\u59d3\u540d\u67e5\u627e\nStatus SearchName(LinkList Head)\n{\nif(Head==NULL)\n{\nreturn FALSE;\n}\nchar name[10];\nprintf(\"\u8bf7\u8f93\u5165\u8981\u67e5\u627e\u7684\u5b66\u751f\u59d3\u540d\uff1a\\n\");\nscanf(\"%s\",name);\nLinkList p;\np=Head-&gt;next;\nwhile(strcmp(p-&gt;data.name,name)!=0)\n{\np=p-&gt;next;\n}\nprintf(\"\u67e5\u627e\u7684\u5b66\u751f\u4fe1\u606f\uff1a\\n\");\nprintf(\"\u59d3\u540d\uff1a%s\\t\u5b66\u53f7\uff1a%s\\t\u7535\u8bdd\uff1a%s\\n\",p-&gt;data.name,p-&gt;data.stu_number,p-&gt;data.phone);\nreturn TRUE;\n}\n//7.\u5220\u9664\nStatus Delete(LinkList &amp;Head,ElemType &amp;e)\n{\nif(Head==NULL)\n{\nreturn FALSE;\n}\nint j,i;\nprintf(\"\u8bf7\u8f93\u5165\u8981\u5220\u9664\u7684\u5e8f\u53f7\uff1a\\n\");\nscanf(\"%d\",&amp;j);\nint y=0;\nprintf(\"\u662f\u5426\u5220\u9664(1/0)\uff1a\");\nscanf(\"%d\",&amp;y);\nif(y==1)\n{\nLinkList p=Head;\nfor(i=0;i&lt;j-1;++i)\n{\nif(p!=NULL)\n{\np=p-&gt;next;\n}\n}\n//q\u4e3a\u5f85\u5220\u9664\u7ed3\u70b9\nLinkList q=p-&gt;next;\np-&gt;next=q-&gt;next;\n//\u4fdd\u5b58\u5220\u9664\u7ed3\u70b9\u7684\u5185\u5bb9\ne=q-&gt;data;\nfree(q);\nprintf(\"\u5220\u9664\u7684\u4fe1\u606f:%s\\t%s\\t%s\\n\",e.name,e.stu_number,e.phone);\nreturn TRUE;\n}\nelse\n{\nprintf(\"\u5df2\u9000\u51fa\u5220\u9664\uff01\\n\");\nreturn FALSE;\n}\n}\nvoid fun()\n{\nsystem(\"pause\");\nsystem(\"cls\");\n}\n//\u83dc\u5355\nvoid MenuList()\n{\nprintf(\"\\n\"\n\"*********************************************************\\n\"\n\"*\\t\\t1\u3001\u521d\u59cb\u5316    \\t\\t\\t\\t*\\n\"\n\"*\\t\\t2\u3001\u8d4b\u503c\\t\\t\\t\\t\\t*\\n\"\n\"*\\t\\t3\u3001\u8f93\u51fa\\t\\t\\t\\t\\t*\\n\"\n\"*\\t\\t4\u3001\u9500\u6bc1\\t\\t\\t\\t\\t*\\n\"\n\"*\\t\\t5\u3001\u63d2\u5165\\t\\t\\t\\t\\t*\\n\"\n\"*\\t\\t6\u3001\u67e5\u627e\\t\\t\\t\\t\\t*\\n\"\n\"*\\t\\t7\u3001\u5220\u9664\\t\\t\\t\\t\\t*\\n\"\n\"*\\t\\t0\u3001\u9000\u51fa\\t\\t\\t\\t\\t*\\n\"\n\"*********************************************************\\n\"\n);\n}\nint main()\n{\nLinkList node;\nint x;\nElemType e;\nwhile(1)\n{\nMenuList();\nprintf(\"\u8bf7\u8f93\u5165\u8981\u6267\u884c\u7684\u529f\u80fd\uff1a\");\nint n=0;\nscanf(\"%d\",&amp;n);\nswitch (n) {\ncase 0:{\nexit(1);\nfun();\nbreak;\n}\ncase 1:{\nx=initialization(node);\nprintf(\"\u521d\u59cb\u5316\uff1a%d\\n\\n\",x);\nfun();\nbreak;\n}\ncase 2:{\nx=CreateList(node);\nprintf(\"\u94fe\u8868\u8d4b\u503c\uff1a%d\\n\\n\",x);\nfun();\nbreak;\n}\ncase 3:{\nDisplay(node);\nfun();\nbreak;\n}\ncase 4:{\nx=Destroy(node);\nprintf(\"\u9500\u6bc1\uff1a%d\\n\\n\",x);\nfun();\nbreak;\n}\ncase 5:{\nx=Insert(node);\nprintf(\"\u63d2\u5165\uff1a%d\\n\\n\",x);\nfun();\nbreak;\n}\ncase 6:{\nx=SearchName(node);\nprintf(\"\\n\u67e5\u627e\uff1a%d\\n\\n\",x);\nfun();\nbreak;\n}\ncase 7:{\nx=Delete(node,e);\nprintf(\"\u5220\u9664\uff1a%d\\n\\n\",x);\nfun();\n}\n}\n}\nreturn 0;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/%E5%AD%A6%E7%94%9F%E9%80%9A%E8%AE%AF%E5%BD%95%28%E9%A1%BA%E5%BA%8F%E8%A1%A8%29/","title":"\u987a\u5e8f\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/%E5%AD%A6%E7%94%9F%E9%80%9A%E8%AE%AF%E5%BD%95%28%E9%A1%BA%E5%BA%8F%E8%A1%A8%29/#_1","title":"\u987a\u5e8f\u8868\u5b9e\u73b0\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/%E5%AD%A6%E7%94%9F%E9%80%9A%E8%AE%AF%E5%BD%95%28%E9%A1%BA%E5%BA%8F%E8%A1%A8%29/#_2","title":"\u7eaf\u624b\u5de5\u624b\u5199","text":"<pre><code>#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n#include&lt;string.h&gt;\nconst int MAX = 45;\ntypedef int Status;\nconst int TRUE = 1;\nconst int FALSE = 0;\n//\u5b66\u751f\u4fe1\u606f\u6570\u636e\u7c7b\u578b\u5b9a\u4e49\ntypedef struct\n{\nchar name[10];\nchar num[10];\nlong long int telephone;\n}Student;\n//\u987a\u5e8f\u8868\u5b9a\u4e49\ntypedef struct\n{\nStudent *infor;\nint length;\n}Sqlist,*SqList;\nvoid fun()\n{\nsystem(\"pause\");\nsystem(\"cls\");\n}\n//\u521d\u59cb\u5316\nStatus InitList(SqList &amp;list)\n{\nlist = (SqList)malloc(sizeof(Sqlist));\nif(!list)\n{\nreturn FALSE;\n}\nlist-&gt;infor = (Student*)malloc(MAX * sizeof(Student));\nif(list-&gt;infor ==NULL)\n{\nreturn FALSE;\n}\nlist-&gt;length=0;\nreturn TRUE;\n}\n//\u8d4b\u503c\nvoid CreatList(SqList &amp;list,Student stu[],int length)\n{\nfor(int i=0;i&lt;length;i++)\n{\nlist-&gt;infor[i]=stu[i];\n}\nlist-&gt;length=length;\n}\n//\u5220\u9664\nStatus DeleteList(SqList &amp;list)\n{\nchar str[10];\nprintf(\"\u8bf7\u8f93\u5165\u4f60\u8981\u5220\u9664\u7684\u5b66\u751f\u59d3\u540d\uff1a\\n\");\nscanf(\"%s\",str);\nint i=0;\nwhile(strcmp(list-&gt;infor[i].name,str)!=0)\n{\ni++;\n}\nfor(int j=i;j&lt;=list-&gt;length;j++)\n{\n//\u540e\u79fb\nlist-&gt;infor[j]=list-&gt;infor[j+1];\n}\nlist-&gt;length--;\nfun();\nreturn TRUE;\n}\n//\u63d2\u5165\nStatus InsertList(SqList &amp;list,Student e)\n{\nint postion=0;\nprintf(\"\u8bf7\u8f93\u5165\u4f60\u8981\u63d2\u5165\u7684\u4f4d\u7f6e\uff1a\\n\");\nscanf(\"%d\",&amp;postion);\nif(postion&lt;1||postion&gt;list-&gt;length+1)\n{\nreturn FALSE;\n}\nif(list-&gt;length==MAX)\n{\nprintf(\"\u987a\u5e8f\u8868\u5df2\u6ee1\uff01\\n\");\nreturn FALSE;\n}\nfor(int j=list-&gt;length-1;j&gt;=postion-1;j--)\n{\nlist-&gt;infor[j+1]=list-&gt;infor[j];\n}\nlist-&gt;infor[postion-1]=e;\nlist-&gt;length++;\nfun();\nreturn TRUE;\n}\n//\u67e5\u627e\nint Search(SqList list,char num[])\n{\nfor(int i=0;i&lt; list-&gt;length;i++)\n{\nif(strcmp(list-&gt;infor[i].num,num))\n{\n//\u8fd4\u56de\u5e8f\u53f7\nreturn (i+1);\n}\nelse\nreturn FALSE;\n}\nfun();\n}\n//\u4fee\u6539\nStatus Update(SqList &amp;list)\n{\nchar num[10];\nprintf(\"\u8bf7\u8f93\u5165\u8981\u4fee\u6539\u7684\u5b66\u751f\u5b66\u53f7:\\n\");\nscanf(\"%s\",num);\nStudent e;\nprintf(\"\u8bf7\u8f93\u5165\u4fee\u6539\u540e\u7684\u5b66\u751f\u4fe1\u606f\uff1a\\n\");\nscanf(\"%s%s%lld\",e.name,e.num,&amp;e.telephone);\nint i=Search(list,num);\nlist-&gt;infor[i]=e;\nfun();\nreturn TRUE;\n}\n//\u8f93\u51fa\nvoid Dispaly(SqList &amp;list)\n{\nfor(int i=0;i&lt; list-&gt;length;i++)\n{\nprintf(\"%s\\t%s\\t%lld\\n\",list-&gt;infor[i].name,list-&gt;infor[i].num,list-&gt;infor[i].telephone);\n}\nprintf(\"\\n\u5b66\u751f\u4fe1\u606f\u8f93\u51fa\u6210\u529f\\a\\n\");\nfun();\n}\n//\u4fdd\u5b58\nStatus SaveList(SqList &amp;list,int n)\n{\nFILE* sp;\nif((sp=fopen(\"Student.txt\",\"w\"))==NULL)\n{\nprintf(\"\u6253\u5f00\u6587\u4ef6\u9519\u8bef\u3002\\n\");\nexit(1);\n}\nfor(int i=0;i&lt;n;i++)\n{\nfprintf(sp,\"%s\\t%s\\t%lld\\n\",list-&gt;infor[i].name,list-&gt;infor[i].num,list-&gt;infor[i].telephone);       }\nfclose(sp);\nprintf(\"\u4fdd\u5b58\u6210\u529f\uff01\\n\");\nfun();\n}\n//\u5f55\u5165\nvoid Input(int &amp;num,Student infor[])\n{\nprintf(\"\u8bf7\u8f93\u5165\u4eba\u6570\uff1a\\n\");\nscanf(\"%d\",&amp;num);\nprintf(\"\u8bf7\u8f93\u5165\u5b66\u751f\u59d3\u540d\u3001\u5b66\u53f7\u548c\u624b\u673a\u53f7\u7801:\\n\");\nfor(int i=0;i&lt;num;i++)\n{\nscanf(\"%s%s%lld\",infor[i].name,infor[i].num,&amp;infor[i].telephone);\n}\nfun();\n}\nvoid menu()\n{\nprintf(\"\\n\"\n\"*********************************************************\\n\"\n\"*\\t\\t1\u3001\u5f55\u5165\\t\\t\\t\\t\\t*\\n\"\n\"*\\t\\t2\u3001\u8f93\u51fa\\t\\t\\t\\t\\t*\\n\"\n\"*\\t\\t3\u3001\u6dfb\u52a0\\t\\t\\t\\t\\t*\\n\"\n\"*\\t\\t4\u3001\u5220\u9664\\t\\t\\t\\t\\t*\\n\"\n\"*\\t\\t5\u3001\u4fee\u6539\\t\\t\\t\\t\\t*\\n\"\n\"*\\t\\t6\u3001\u67e5\u627e\\t\\t\\t\\t\\t*\\n\"\n\"*\\t\\t7\u3001\u4fdd\u5b58\\t\\t\\t\\t\\t*\\n\"\n\"*\\t\\t0\u3001\u9000\u51fa\\t\\t\\t\\t\\t*\\n\"\n\"*********************************************************\\n\"\n);\n}\nint main()\n{\nStudent infor[MAX];\nint num;    SqList list;\nInitList(list);\nwhile(1)\n{\nmenu();\nint x;\nprintf(\"\u8bf7\u8f93\u5165\u8981\u6267\u884c\u7684\u529f\u80fd\uff1a\\n\");\nscanf(\"%d\",&amp;x);\nswitch(x)\n{\ncase 0: {\nexit(1);\n}\ncase 1:\n{\nInput(num,infor);\nCreatList(list,infor,num);\nbreak;\n}\ncase 2:\n{\nDispaly(list);  break;\n}\ncase 3:\n{\nStudent e;\nprintf(\"\u8f93\u5165\u8981\u6dfb\u52a0\u7684\u5b66\u751f\u4fe1\u606f\uff1a\\n\");\nscanf(\"%s%s%lld\",e.name,e.num,&amp;e.telephone);\nint y=InsertList(list,e);\nif(y==1)\nprintf(\"\u6dfb\u52a0\u6210\u529f\uff01\\n\");\nbreak;\n}\ncase 4:\n{\nDeleteList(list);\nbreak;\n}\ncase 5:\n{\nUpdate(list);\nbreak;\n}\ncase 6:\n{\nchar number[10];\nprintf(\"\u8bf7\u8f93\u5165\u8981\u67e5\u627e\u7684\u5b66\u53f7\uff1a\\n\");\nscanf(\"%s\",number);\nint c= Search(list,number);\nprintf(\"\u5e8f\u53f7\uff1a%d\\n\",c+1);\nbreak;\n}\ncase 7:\n{\nSaveList(list,num);\nbreak;\n}\n}\n}\nreturn 0;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/%E5%AD%A6%E7%94%9F%E9%80%9A%E8%AE%AF%E5%BD%95%28%E9%A1%BA%E5%BA%8F%E8%A1%A8%29/#chatgpt","title":"ChatGPT\u8f93\u51fa","text":"<ul> <li>\uff081\uff09\u521b\u5efa\u4e00\u4e2a\u987a\u5e8f\u8868L\uff0c\u521d\u59cb\u5316L\uff1b</li> <li>\uff082\uff09\u987a\u5e8f\u8868L\u662f\u5426\u4e3a\u7a7a\u8868\uff1b</li> <li>\uff083\uff09\u5728\u987a\u5e8f\u8868L\u63d2\u5165\u73ed\u7ea7\u901a\u8baf\u4fe1\u606f\uff1b</li> <li>\uff084\uff09\u8f93\u51faL\u4e2d\u7684\u73ed\u7ea7\u901a\u8baf\u5f55\u4fe1\u606f\u3002</li> </ul>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/%E5%AD%A6%E7%94%9F%E9%80%9A%E8%AE%AF%E5%BD%95%28%E9%A1%BA%E5%BA%8F%E8%A1%A8%29/#_3","title":"\u7b2c\u4e00\u4e2a","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#define MAXSIZE 100   // \u5b9a\u4e49\u6700\u5927\u5b58\u50a8\u7a7a\u95f4\n// \u5b66\u751f\u4fe1\u606f\u7ed3\u6784\u4f53\ntypedef struct student {\nint id;            // \u5b66\u53f7\nchar name[20];     // \u59d3\u540d\nchar phone[20];    // \u7535\u8bdd\n} Student;\n// \u987a\u5e8f\u8868\u7ed3\u6784\u4f53\ntypedef struct {\nStudent data[MAXSIZE];    // \u5b58\u50a8\u7a7a\u95f4\nint length;               // \u5f53\u524d\u957f\u5ea6\n} SqList;\n// \u521d\u59cb\u5316\u987a\u5e8f\u8868\nvoid InitList(SqList *L) {\nL-&gt;length = 0;\n}\n// \u5224\u65ad\u987a\u5e8f\u8868\u662f\u5426\u4e3a\u7a7a\nint ListIsEmpty(SqList L) {\nif (L.length == 0) {\nreturn 1;  // \u4e3a\u7a7a\n}\nelse {\nreturn 0;  // \u4e0d\u4e3a\u7a7a\n}\n}\n// \u5411\u987a\u5e8f\u8868\u4e2d\u63d2\u5165\u5b66\u751f\u4fe1\u606f\nint InsertList(SqList *L, Student stu) {\n// \u5224\u65ad\u987a\u5e8f\u8868\u662f\u5426\u5df2\u6ee1\nif (L-&gt;length &gt;= MAXSIZE) {\nreturn 0;  // \u63d2\u5165\u5931\u8d25\n}\n// \u63d2\u5165\u5b66\u751f\u4fe1\u606f\nL-&gt;data[L-&gt;length] = stu;\nL-&gt;length++;\nreturn 1;  // \u63d2\u5165\u6210\u529f\n}\n// \u8f93\u51fa\u987a\u5e8f\u8868\u4e2d\u7684\u5b66\u751f\u4fe1\u606f\nvoid PrintList(SqList L) {\nint i;\nfor (i = 0; i &lt; L.length; i++) {\nprintf(\"\u5b66\u53f7\uff1a%d\\t\u59d3\u540d\uff1a%s\\t\u7535\u8bdd\uff1a%s\\n\", L.data[i].id, L.data[i].name, L.data[i].phone);\n}\n}\nint main() {\nSqList L;      // \u58f0\u660e\u4e00\u4e2a\u987a\u5e8f\u8868\nStudent stu;   // \u58f0\u660e\u4e00\u4e2a\u5b66\u751f\u4fe1\u606f\u7ed3\u6784\u4f53\nint i, n;      // i\u7528\u4e8e\u5faa\u73af\uff0cn\u7528\u4e8e\u5b58\u50a8\u5b66\u751f\u4eba\u6570\n// \u521d\u59cb\u5316\u987a\u5e8f\u8868\nInitList(&amp;L);\n// \u8f93\u5165\u5b66\u751f\u4fe1\u606f\nprintf(\"\u8bf7\u8f93\u5165\u5b66\u751f\u4eba\u6570\uff1a\");\nscanf(\"%d\", &amp;n);\nprintf(\"\u8bf7\u6309\u7167\u201c\u5b66\u53f7 \u59d3\u540d \u7535\u8bdd\u201d\u7684\u683c\u5f0f\u8f93\u5165\u5b66\u751f\u4fe1\u606f\uff1a\\n\");\nfor (i = 0; i &lt; n; i++) {\nscanf(\"%d%s%s\", &amp;stu.id, stu.name, stu.phone);\nInsertList(&amp;L, stu);\n}\n// \u5224\u65ad\u987a\u5e8f\u8868\u662f\u5426\u4e3a\u7a7a\nif (ListIsEmpty(L)) {\nprintf(\"\u987a\u5e8f\u8868\u4e3a\u7a7a\u3002\\n\");\n}\nelse {\nprintf(\"\u987a\u5e8f\u8868\u4e0d\u4e3a\u7a7a\uff0c\u73ed\u7ea7\u901a\u8baf\u5f55\u4fe1\u606f\u5982\u4e0b\uff1a\\n\");\n// \u8f93\u51fa\u987a\u5e8f\u8868\u4e2d\u7684\u5b66\u751f\u4fe1\u606f\nPrintList(L);\n}\nreturn 0;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/%E5%AD%A6%E7%94%9F%E9%80%9A%E8%AE%AF%E5%BD%95%28%E9%A1%BA%E5%BA%8F%E8%A1%A8%29/#_4","title":"\u7b2c\u4e8c\u4e2a","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#define MAX_LEN 20  // \u5b9a\u4e49\u5b57\u7b26\u4e32\u6700\u5927\u957f\u5ea6\n#define MAX_NUM 100 // \u5b9a\u4e49\u5b66\u751f\u4fe1\u606f\u6700\u5927\u6570\u91cf\ntypedef struct StudentInfo {\nchar id[MAX_LEN];\nchar name[MAX_LEN];\nchar phone[MAX_LEN];\n} Student;\ntypedef struct StudentList {\nStudent students[MAX_NUM];\nint length;\n} List;\n// \u521d\u59cb\u5316\u987a\u5e8f\u8868\nvoid init(List* L) {\nL-&gt;length = 0;\n}\n// \u5224\u65ad\u987a\u5e8f\u8868\u662f\u5426\u4e3a\u7a7a\nint isEmpty(List L) {\nreturn L.length == 0;\n}\n// \u5728\u987a\u5e8f\u8868L\u4e2d\u63d2\u5165\u73ed\u7ea7\u901a\u8baf\u4fe1\u606f\nint insert(List* L) {\nif (L-&gt;length == MAX_NUM) {\nprintf(\"The list is full!\\n\");\nreturn 0;\n}\nStudent s;\nprintf(\"Please input the student id: \");\nscanf(\"%s\", s.id);\nprintf(\"Please input the student name: \");\nscanf(\"%s\", s.name);\nprintf(\"Please input the student phone: \");\nscanf(\"%s\", s.phone);\nL-&gt;students[L-&gt;length++] = s;\nreturn 1;\n}\n// \u8f93\u51fa\u987a\u5e8f\u8868L\u4e2d\u7684\u73ed\u7ea7\u901a\u8baf\u5f55\u4fe1\u606f\nvoid printList(List L) {\nprintf(\"Id\\tName\\tPhone\\n\");\nfor (int i = 0; i &lt; L.length; i++) {\nprintf(\"%s\\t%s\\t%s\\n\", L.students[i].id, L.students[i].name, L.students[i].phone);\n}\n}\nint main() {\nList L;\ninit(&amp;L);\nprintf(\"Is the list empty? %d\\n\", isEmpty(L));\ninsert(&amp;L);\ninsert(&amp;L);\nprintf(\"Is the list empty? %d\\n\", isEmpty(L));\nprintList(L);\nreturn 0;\n}\n</code></pre>"},{"location":"%E7%BA%BF%E6%80%A7%E8%A1%A8/dataStructure_day01/","title":"\u6570\u636e\u7ed3\u6784\u7eea\u8bba","text":"<p>\u51af\u8bfa\u4f9d\u66fc\u8ba1\u7b97\u673a\u673a\u4f53\u7cfb\uff1a</p> <ol> <li>\u8ba1\u7b97\u673a\u5e94\u8be5\u5177\u6709\uff1a\u8fd0\u7b97\u5668\u3001\u5bc4\u5b58\u5668\u3001\u8f93\u51fa\u8f93\u51fa\u3001\u63a7\u5236\u5668\u4e94\u5927\u57fa\u672c\u90e8\u4ef6\uff1b</li> <li>\u8ba1\u7b97\u673a\u4ee5\u4e8c\u8fdb\u5236\u5b58\u50a8\u6307\u4ee4\u548c\u6570\u636e</li> <li>\u8ba1\u7b97\u673a\u5e94\u8be5\u5177\u6709\u5b58\u50a8\u6570\u636e\u7684\u80fd\u529b</li> </ol> <p>Pascal\u4e4b\u7236\uff1a\u5c3c\u53e4\u62c9\u65af\u00b7\u6c83\u65af - \u7a0b\u5e8f = \u7b97\u6cd5 + \u6570\u636e\u7ed3\u6784 ---&gt; \u975e\u5e38\u91cd\u8981\uff0c\u6982\u62ec\u4e86\u6570\u636e\u7ed3\u6784\u6574\u4e2a\u5185\u5bb9</p> <ul> <li>\u7b97\u6cd5\u4e0e\u6570\u636e\u7ed3\u6784\u4e0d\u53ef\u5206\u5272</li> <li>\u5728\u5b66\u4e60\u6570\u636e\u7ed3\u6784\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u5b9a\u8981\u591a\u52a8\u624b\u5199\u4ee3\u7801\uff0c\u5199\u4ee3\u7801\u63d0\u9ad8\u81ea\u5df1\u4e00\u4e2a\u7b97\u6cd5\u80fd\u529b\u548c\u7f16\u7a0b\u601d\u7ef4\u3002 </li> </ul>"},{"location":"%E7%BA%BF%E6%80%A7%E8%A1%A8/dataStructure_day01/#_2","title":"\u6570\u636e\u7ed3\u6784\u5206\u4e3a\u903b\u8f91\u7ed3\u6784\u548c\u7269\u7406\u7ed3\u6784","text":"<ul> <li> <p>\u903b\u8f91\u7ed3\u6784\uff1a\u6570\u636e\u5bf9\u8c61\u4e2d\u6570\u636e\u5143\u7d20\u4e4b\u95f4\u7684\u76f8\u4e92\u5173\u7cfb</p> <ol> <li>\u7ebf\u6027\u7ed3\u6784\u548c\u975e\u7ebf\u6027\u7ed3\u6784 <ul> <li>\u7ebf\u6027\u7ed3\u6784\uff1a\u6570\u7ec4\uff0c\u94fe\u8868\u3001\u6808\u3001\u961f\u5217</li> <li>\u975e\u7ebf\u6027\u7ed3\u6784\uff1a\u6811\u3001\u56fe</li> </ul> </li> </ol> </li> <li> <p>\u7269\u7406\u7ed3\u6784\uff1a\u6570\u636e\u5728\u8ba1\u7b97\u673a\u5185\u90e8\u5b9e\u9645\u7684\u5b58\u50a8\u5f62\u5f0f\u3002</p> </li> <li> <ol> <li>\u79bb\u6563\u548c\u8fde\u7eed <ul> <li>\u79bb\u6563\uff1a\u5b58\u50a8\u7684\u4f4d\u7f6e\u4e0d\u662f\u8fde\u7eed\u7684</li> <li>\u8fde\u7eed\uff1a\u5b58\u50a8\u7684\u7a7a\u95f4\u662f\u8fde\u7eed\u7684</li> <li>\u6563\u5217\u5b58\u50a8\uff08\u4e86\u89e3\uff09</li> <li>\u7d22\u5f15\u5b58\u50a8\uff08\u4e86\u89e3\uff09</li> </ul> </li> </ol> </li> </ul>"},{"location":"%E7%BA%BF%E6%80%A7%E8%A1%A8/dataStructure_day02/","title":"\u7b97\u6cd5","text":"<ul> <li>\u7b97\u6cd5\u7684\u5b9a\u4e49</li> <li>\u7b97\u6cd5\u7684\u6027\u8d28</li> <li>\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u8ba1\u7b97</li> </ul>"},{"location":"%E7%BA%BF%E6%80%A7%E8%A1%A8/dataStructure_day02/#1","title":"1. \u7b97\u6cd5\u7684\u5b9a\u4e49","text":"<p>\u7b97\u6cd5\u662f\u89e3\u51b3\u7279\u5b9a\u95ee\u9898\u6c42\u89e3\u6b65\u9aa4\u7684\u63cf\u8ff0\u3002\u5728\u8ba1\u7b97\u673a\u4e2d\u8868\u73b0\u4e3a\u6307\u4ee4\u7684\u6709\u9650\u5e8f\u5217\uff0c\u5e76\u4e14\u6bcf\u6761\u6307\u4ee4\u8868\u793a\u4e00\u4e2a\u6216\u591a\u4e2a\u64cd\u4f5c\u3002</p>"},{"location":"%E7%BA%BF%E6%80%A7%E8%A1%A8/dataStructure_day02/#2","title":"2. \u7b97\u6cd5\u7684\u7279\u6027","text":"<ul> <li>\u8f93\u5165\uff1a\u4f8b\u5982\uff1a\u6709\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u6267\u884c\u4e4b\u540e\u83ab\u540d\u5176\u5999\u51fa\u4e2a\u7ed3\u679c\uff0c\u5e76\u4e14\u8fd9\u4e2a\u7ed3\u679c\uff0c\u6211\u4eec\u5e76\u4e0d\u6e05\u695a\u662f\u4ec0\u4e48\u4e1c\u897f</li> <li>\u8f93\u51fa\uff1a\u4f8b\u5982\uff1a\u6709\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8f93\u5165\u6570\u636e\u540e\uff0c\u6267\u884c\u5b8c\u540e\u6ca1\u6709\u8f93\u51fa\u7ed3\u679c</li> <li>\u6709\u7a77\u6027\uff1a\u4f8b\u5982\uff1a\u6709\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u6267\u884c\u5b8c\u4e4b\u540e\uff0c\u4e00\u76f4\u6267\u884c\u4e0b\u53bb(\u4f60\u7684\u7a0b\u5e8f\u6267\u884c\u9700\u8981100\u5e74\u6216\u800510\u5e74\u624d\u6709\u7ed3\u679c)\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u4e5f\u662f\u6709\u4e0d\u53ef\u884c</li> <li>\u786e\u5b9a\u6027\uff1a\u4f8b\u5982\uff1a\u6709\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8f93\u51651\u540e\uff0c\u4eca\u5929\u8f93\u51fa\u4e861\uff0c\u660e\u5929\u8f93\u51fa\u4e862\uff0c\u540e\u5929\u8f93\u51fa\u4e863.</li> <li>\u53ef\u884c\u6027\uff1a\u4f8b\u5982\uff1a\u6709\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u4ece\u865a\u62df\u4e16\u754c\u4e2d\u53d8\u4e3a\u5b9e\u4f53\u7684\uff08\u4e0d\u53ef\u80fd\u7684\u4e8b\uff01\uff09\u3002</li> </ul>"},{"location":"%E7%BA%BF%E6%80%A7%E8%A1%A8/dataStructure_day02/#3","title":"3. \u65f6\u95f4\u590d\u6742\u5ea6\u8ba1\u7b97","text":"<p>\u8ba1\u7b97\u65b9\u6cd5\uff1a\u5927O\u8868\u793a\u6cd5 \u65f6\u95f4\u590d\u6742\u5ea6 = \u53d6\uff08\u57fa\u672c\u8bed\u53e5\u7684\u6267\u884c\u6b21\u6570\uff09\u7684\u5927O\u8868\u793a\u6cd5 \u6570\u5b66\u7406\u8bba\u652f\u6491\uff1a\u7cfb\u6570\u65e0\u6cd5\u64bc\u52a8\u9636\u6570</p>"},{"location":"%E7%BA%BF%E6%80%A7%E8%A1%A8/dataStructure_day02/#4","title":"4. \u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u8ba1\u7b97","text":""},{"location":"%E7%BA%BF%E6%80%A7%E8%A1%A8/dataStructure_day03/","title":"\u7ebf\u6027\u8868","text":""},{"location":"%E7%BA%BF%E6%80%A7%E8%A1%A8/dataStructure_day03/#1","title":"1. \u7ebf\u6027\u8868\u7684\u5b9a\u4e49","text":"<p>\u96f6\u4e2a\u6216\u591a\u4e2a\u6570\u636e\u5143\u7d20\u7684\u6709\u9650\u5e8f\u5217</p>"},{"location":"%E7%BA%BF%E6%80%A7%E8%A1%A8/dataStructure_day03/#2","title":"2. \u7ebf\u6027\u8868\u7684\u987a\u5e8f\u5b58\u50a8","text":"<ul> <li> <p>\u5b9a\u4e49\uff1a\u7528\u4e00\u6bb5\u8fde\u7eed\u7684\u5b58\u50a8\u7a7a\u95f4\u5bf9\u6570\u636e\u5143\u7d20\u8fdb\u884c\u5b58\u50a8\u3002</p> </li> <li> <p>\u6839\u636e\u5b9a\u4e49\uff0c\u7ebf\u6027\u8868\u7684\u987a\u5e8f\u5b58\u50a8\u53ef\u4ee5\u76f4\u63a5\u7528\u6570\u7ec4\u8fdb\u884c\u8868\u793a\u3002\u4f46\u662f\u5b9e\u9645\u4e0a\uff0c\u7ebf\u6027\u8868\u7684\u4e00\u4e9b\u7b97\u6cd5\u64cd\u4f5c\u5e76\u4e0d\u80fd\u5355\u72ec\u901a\u8fc7\u4e00\u4e2a\u6570\u7ec4\u6765\u5b9e\u73b0\u3002</p> </li> <li> <p>\u9700\u8981\u4e00\u4e2a\u989d\u5916\u7684\u6570\u636e\u5bf9\u7ebf\u6027\u8868\u7684\u957f\u5ea6\u8fdb\u884c\u63cf\u8ff0\uff0c\u624d\u80fd\u4f7f\u5f97\u7ebf\u6027\u8868\u7684\u7b97\u6cd5\u64cd\u4f5c\u6b63\u5e38\u6267\u884c\u3002</p> </li> <li> <p>\u987a\u5e8f\u5b58\u50a8\u7ebf\u6027\u8868\u7684\u6784\u6210\uff1a\u4e00\u6bb5\u8fde\u7eed\u7684\u5b58\u50a8\u7a7a\u95f4 + \u7528\u4e8e\u63cf\u8ff0\u7a7a\u95f4\u7684\u957f\u5ea6\u7684\u53d8\u91cf </p> </li> </ul>"},{"location":"%E7%BA%BF%E6%80%A7%E8%A1%A8/dataStructure_day03/#3","title":"3. \u987a\u5e8f\u8868\u7684\u64cd\u4f5c\u96c6","text":"<pre><code>#include \"bits/stdc++.h\" // \u4e07\u80fd\u5934\u6587\u4ef6\uff0cmath.h\uff0cstring.h\n// typedef old_name new_name; ---&gt; \u5c06old_name \u91cd\u65b0\u547d\u540d\u4e3a new_name\n// \u5c06int\u91cd\u547d\u540d\u4e3adataType ---&gt; dataType\u8868\u793a\u6570\u636e\u7c7b\u578b\n// \u8fd9\u4e2aint\u7167\u5e38\u53ef\u4ee5\u7528\u3002\u53ea\u662f\u4e4b\u540e\u7684\u7a0b\u5e8f\u4e2d\uff0cdataType\u4f1a\u88ab\u770b\u505aint\ntypedef int dataType;\n// \u5c06int\u91cd\u547d\u540d\u4e3aStatus ---&gt; \u7528\u6765\u8868\u793a\u7b97\u6cd5\u6267\u884c\u72b6\u6001\u3002\u5982\u679c\u6211\u7684\u7b97\u6cd5\u6267\u884c\u6210\u529f\uff0c\u5c31\u8fd4\u56de1\uff0c\u5426\u5219\u8fd4\u56de0\ntypedef int Status;\n// #define True 1; ---&gt; \u4f7f\u7528\u5b8f\u5b9a\u4e49 ---&gt; \u51faBug\u53ef\u80fd\u6027\u4f1a\u5f88\u9ad8\n// const \u5b9a\u4e49\u4e00\u4e2aint\u7c7b\u578b\u7684\u5e38\u91cf\uff0cTURE\u3001FALSE --&gt; 1,0\nconst int TRUE = 1;\nconst int FALSE = 0;\n// \u5b9a\u4e49\u987a\u5e8f\u8868\u7684\u6700\u5927\u7a7a\u95f4\nconst int MAX = 1000;\n// \u987a\u5e8f\u8868\u7684\u5b9a\u4e49 ---&gt; \u7528\u7ed3\u6784\u4f53\u5c06\uff1a\u4e00\u6bb5\u8fde\u7eed\u7684\u5b58\u50a8\u7a7a\u95f4 \u548c \u7528\u4e8e\u63cf\u8ff0\u7a7a\u95f4\u957f\u5ea6\u7684\u53d8\u91cf \u653e\u5728\u4e00\u8d77\ntypedef struct Node{\ndataType data[MAX]; // \u7528\u4e8e\u5b58\u50a8\u6570\u636e\n// dataType* data; ---&gt; malloc\u51fd\u6570\u53ef\u4ee5\u52a8\u6001\u5730\u5f00\u8f9f\u51fa\u7a7a\u95f4 ==&gt; \u5728\u94fe\u8868\u91cc\u5177\u4f53\u8bb2\u8bb2\nint length; // \u63cf\u8ff0\u7ebf\u6027\u8868\u957f\u5ea6\n}Sqlist;\n// \u5c06Struct Node\u7ed3\u6784\u4f53\u91cd\u65b0\u547d\u540d\u4e3aSqlist\n// \u987a\u5e8f\u8868\u5728\u5b9a\u4e49\u5b8c\u6210\u540e\uff0c\u6240\u6709\u5bf9\u987a\u5e8f\u8868\u7684\u7b97\u6cd5\u64cd\u4f5c\u90fd\u9700\u8981\u901a\u8fc7\u6211\u5b9a\u4e49\u51fa\u7684\u5185\u5bb9\u6267\u884c\u3002\n// (\u5bf9\u4e8e\u5f53\u524d\u987a\u5e8f\u8868)\u540e\u7eed\u7684\u7b97\u6cd5\u5b9e\u73b0\u90fd\u662f\u901a\u8fc7data\u6570\u7ec4\u548clength\u53d8\u91cf\u64cd\u4f5c\u7684\u3002\n// 1. \u521d\u59cb\u5316list ---&gt; \u8c03\u7528\u8be5\u51fd\u6570\uff0c\u5f97\u5230\u4e00\u4e2alist\u8868\u30021. \u4f20\u5165\u4e00\u4e2a\u6570\u636e\u6570\u7ec4\u548c\u8be5\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2aSqlist\u7684\u4e1c\u897f\nSqlist createList(dataType data[], int length){\n// \u5f97\u5230\u4e00\u4e2a\u94fe\u8868\nSqlist list;\n// \u5c06\u4f20\u5165\u8fdb\u6765\u7684\u6570\u636e\u6570\u7ec4\u8d4b\u503c\u7ed9\u6211\u7684\u987a\u5e8f\u8868\u4e2d\nfor(int i=0;i&lt;length;i++){\nlist.data[i] = data[i];\n}\nlist.length = length;\nreturn list;\n}\n// 2. \u5224\u65ad\u8868\u662f\u5426\u4e3a\u7a7a ---&gt; \u82e5\u8868\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deTRUE\uff0c\u5426\u5219\u8fd4\u56deFALSE\nStatus isEmpty(Sqlist list){ // list\u957f\u5ea6\u4e3a0\uff0clist\u5c31\u4e3a\u7a7a\n// (!list.length)\nif(list.length == 0){\nreturn TRUE; // \u8868\u793a\u7a7a\n}else{\nreturn FALSE; // \u8868\u793a\u4e0d\u4e3a\u7a7a\n}\n}\n// 3. \u9500\u6bc1\u8868 ---&gt;\n// \u5982\u679c\u7528\u52a8\u6001\u6570\u7ec4\u5b9a\u4e49\u7684\u987a\u5e8f\u8868 -- &gt; malloc\u51fd\u6570\u5f00\u8f9f \u7528free\u51fd\u6570\u91ca\u653e\n// \u8fd9\u91cc\u4f7f\u7528\u7684\u662f\u9759\u6001\u6570\u7ec4\u7684\u7ebf\u6027\u8868\nStatus deleteList(Sqlist* list){\nif(list==NULL){\nreturn FALSE;\n}\nlist-&gt;length = 0;\nreturn TRUE;\n}\n// 4. \u589e --&gt; \u6839\u636e\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20\nStatus insertElem(Sqlist* list, int index, dataType elem ){\n// \u5224\u65ad\u63d2\u5165\u4f4d\u7f6e\u662f\u5426\u5408\u6cd5\n// \u63d2\u5165\u8303\u56f4(0 - length-1)\nif(index &lt; 0 || index &gt; list-&gt;length -1 ){\nreturn FALSE;\n}\n// \u79fb\u4f4d\nfor(int i=list-&gt;length-1;i&gt;=index;i--){\nlist-&gt;data[i+1] = list-&gt;data[i];\n}\n// \u63d2\u5165\nlist -&gt; data[index] = elem;\n// \u63d2\u5165\u5b8c\u6210\u4e4b\u540e\uff0c\u7ebf\u6027\u8868\u7684\u957f\u5ea6\u52a0\u4e00\nlist -&gt; length++;\nreturn TRUE;\n}\n// 5. \u5220 ---&gt; \u6839\u636e\u7d22\u5f15\u5220\u9664\u5143\u7d20\uff0c\u5e76\u7528\u4e00\u4e2a\u53d8\u91cfe\u4fdd\u5b58\u5220\u9664\u7684\u503c\nStatus deleteElem(Sqlist* list,int index,dataType *e){\nif(index &lt; 0 || index &gt; list-&gt;length-1){\nreturn FALSE;\n}\n*e = list-&gt;data[index];\n// \u79fb\u4f4d\nfor(int i = index; i &lt; list-&gt;length; i++){\nlist-&gt;data[i] = list-&gt;data[i+1];\n}\n// \u5220\u9664\u5b8c\u4e4b\u540e\uff0c\u7ebf\u6027\u8868\u7684\u957f\u5ea6\u51cf\u4e00\nlist-&gt;length--;\nreturn TRUE;\n}\n// 6. \u6539 ---&gt; \u6839\u636e\u7d22\u5f15\u4fee\u6539\u5143\u7d20\nStatus updateElem(Sqlist* list, int index, dataType e){\nif(index &lt; 0 || index &gt; list-&gt;length-1){\nreturn FALSE;\n}\nlist-&gt;data[index] = e;\nreturn TRUE;\n}\n// 7. \u67e5 ---&gt; \u6839\u636e\u6570\u636e\u5143\u7d20\u6765\u8fdb\u884c\u67e5\u8be2 e --&gt; \u8fd4\u56dee\u5728\u987a\u5e8f\u8868\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\n// return list-&gt;data[idnex]\nStatus searchElem(Sqlist* list,dataType e){\nfor(int i=0;i&lt;list-&gt;length;i++){\nif(list-&gt;data[i] == e){\nreturn i;\n}\n}\nreturn -1;\n}\n// 8. \u904d\u5386 ---&gt; \u6253\u5370\u987a\u5e8f\u8868\u4e2d\u7684\u6240\u6709\u5143\u7d20\nvoid display(Sqlist list)\n{\n// list\u7684\u957f\u5ea6\u662flist.length,\u6570\u636e\u662flist.data\u6570\u7ec4\u3002\nfor(int i=0;i&lt;list.length;i++){\nprintf(\"%d \",list.data[i]);\n}\nprintf(\"\\n\");\n}\nint main(){\nsystem(\"chcp 65001\");\ndataType datas[] = {4,5,6,3,7,3};\nSqlist list = createList(datas,6);\ndisplay(list);\n// &amp;\u53d8\u91cf --&gt; \u53d6\u51fa\u53d8\u91cf\u7684\u5730\u5740 scanf(\"%d\",&amp;a) --&gt; \u8bbf\u95ee\u53d8\u91cfa\u7684\u5730\u5740\uff0c\u5e76\u5c06\u7f13\u5b58\u533a\u7684\u6570\u636e\u8d4b\u503c\u7ed9\u76f8\u5e94\u7684\u683c\u5f0f\u7ad9\u4f4d\u7b26\u4e0a\u3002\n// *\u5730\u5740 --&gt; \u8bbf\u95ee\u5730\u5740\u6240\u5728\u7684\u7a7a\u95f4\n// deleteList(&amp;list);\ninsertElem(&amp;list,3,0);\ndisplay(list);\ndataType e;\ndeleteElem(&amp;list,5,&amp;e);\ndisplay(list);\nprintf(\"e=%d\\n\",e);\nupdateElem(&amp;list,3,10);\ndisplay(list);\nprintf(\"10\u2018s index = %d\\n\", searchElem(&amp;list,10));\nprintf(\"100's index = %d\\n\",searchElem(&amp;list,100));\nreturn 0;\n}\n</code></pre>"},{"location":"%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%8D%95%E9%93%BE%E8%A1%A8/","title":"\u5355\u94fe\u8868","text":""},{"location":"%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%8D%95%E9%93%BE%E8%A1%A8/#_2","title":"\u7ebf\u6027\u8868\u7684\u5206\u7c7b","text":"<p>\u4f9d\u636e\u5b58\u50a8\u5f62\u5f0f\uff1a\u987a\u5e8f\u8868 \u548c \u94fe\u8868 1. \u987a\u5e8f\u8868 - \u5b58\u50a8\u539f\u7406\uff1a\u7528\u4e00\u6bb5\u8fde\u7eed\u7684\u5b58\u50a8\u7a7a\u95f4\u5b9e\u73b0 - \u4e00\u822c\u7684\u8bdd\uff0c\u6211\u4eec\u5b9e\u73b0\u987a\u5e8f\u8868\u5c31\u662f\u7528\u6570\u7ec4\u6765\u5b9e\u73b0</p> <ol> <li>\u94fe\u8868</li> <li>\u5b58\u50a8\u539f\u7406\uff1a\u94fe\u5f0f\u5b58\u50a8</li> <li>\u5206\u7c7b <ul> <li>\u5355\u94fe\u8868 --&gt; \u5f88\u91cd\u8981</li> <li>\u53cc\u5411\u94fe\u8868</li> <li>\u5faa\u73af\u94fe\u8868</li> <li>\u9759\u6001\u94fe\u8868</li> </ul> </li> </ol>"},{"location":"%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%8D%95%E9%93%BE%E8%A1%A8/#_3","title":"\u987a\u5e8f\u8868\u7684\u4f18\u7f3a\u70b9","text":"<p>\u4f18\u70b9 - \u4fbf\u4e8e\u5b9e\u73b0\u548c\u7406\u89e3\uff0c\u9002\u5408\u4fee\u6539\u6570\u636e\u64cd\u4f5c\u6b21\u6570\u591a\u7684\u7b97\u6cd5</p> <p>\u7f3a\u70b9 - \u63d2\u5165\u548c\u5220\u9664\u65f6\u95f4\u590d\u6742\u5ea6\u8fc7\u9ad8\uff0c\u6bcf\u6b21\u64cd\u4f5c\u90fd\u9700\u8981\u8fdb\u884c\u5927\u91cf\u7684\u79fb\u4f4d\u64cd\u4f5c</p>"},{"location":"%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%8D%95%E9%93%BE%E8%A1%A8/#_4","title":"\u5355\u94fe\u8868\u7684\u5b9a\u4e49","text":"<p>\u5b9a\u4e49\uff1a\u5355\u5411\u94fe\u8868\u4e2d\u5305\u542b\u6570\u636e\u57df\u548c\u6307\u9488\u57df\uff0c\u5176\u4e2d\u6570\u636e\u57df\u7528\u4e8e\u5b58\u653e\u6570\u636e\uff0c\u6307\u9488\u57df\u7528\u6765\u8fde\u63a5\u5f53\u524d\u7ed3\u70b9\u548c\u4e0b\u4e00\u8282\u70b9\u3002</p> <p>\u5355\u4e2a\u7ed3\u70b9\u7684\u5b9a\u4e49 <pre><code>struct Node{ // \u94fe\u8868\u4e2d\u5355\u4e2a\u7ed3\u70b9\ndataType data; // \u6570\u636e\u57df\nstruct Node* next; // \u6307\u9488\u57df \n};\n</code></pre> \u6574\u4f53\u8fde\u63a5\u65b9\u5f0f <pre><code>node1-&gt;next = node2;\nnode2-&gt;next = node3;\nnode3-&gt;next = node4;\nnode4-&gt;next = NULL\n</code></pre> <pre><code>node1 -&gt; node2 -&gt; node3 -&gt; node4\n</code></pre></p> <p>\u94fe\u8868\u5206\u4e3a\u4e24\u7c7b\uff0c\u542b\u5934\u7ed3\u70b9\u548c\u4e0d\u542b\u5934\u7ed3\u70b9</p>"},{"location":"%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%8D%95%E9%93%BE%E8%A1%A8/#_5","title":"\u542b\u5934\u7ed3\u70b9\u7684\u5355\u94fe\u8868\u64cd\u4f5c\u96c6(\u5168)","text":"<pre><code>#include&lt;bits/stdc++.h&gt;\n// typedef int Name --&gt; \u5c06int\u91cd\u547d\u540d\u4e3aName\uff0c\u91cd\u547d\u540d\u5b8c\u4e4b\u540e\uff0cName\u7b49\u4ef7\u4e8eint\uff0c\u5f53\u7136\u539fint\u53ef\u4ee5\u7ee7\u7eed\u4f7f\u7528\n// dataType \u7b49\u4ef7\u4e8e int\uff0c\u8fd9\u8bf4\u660e\u6211\u7684\u6570\u636e\u7c7b\u578b\u662fint\u7c7b\u578b\u7684\ntypedef int dataType;\n// Status \u8868\u793a\u72b6\u6001\ntypedef int Status;\n// C\u91cc\u9762\u6ca1\u6709TRUE\u548cFALSE\uff0c\u53ea\u67090\u548c\u975e\u96f6\u6765\u8868\u793a\u5e03\u5c14\u503c\nconst int TRUE = 1;\nconst int FALSE = 0;\n// \u5b9a\u4e49\u5355\u4e2a\u7ed3\u70b9\nstruct Node{\ndataType data;// \u6570\u636e\u57df\nstruct Node* next; // \u6307\u9488\u57df\n};\n// malloc(sizeof):\n// return: void*\u7c7b\u578b --&gt; \u6307\u5411\u4efb\u4f55\u53d8\u91cf\u7684\u5730\u5740\n// param: sizeof --&gt; \u5f00\u8f9f\u7684\u7a7a\u95f4\u5927\u5c0f\n// \u4f5c\u7528\uff1a\u4ece\u5185\u5b58\u6c60\u91cc\u5212\u5206\u51fa\u4e00\u7247\u5927\u5c0f\u4e3asizeof\u7684\u7a7a\u95f4\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u6307\u9488\uff0c\u8be5\u6307\u9488\u53ef\u4ee5\u6307\u5411\u4efb\u4f55\u53d8\u91cf\n//\n// free(void*)\n// \u4f5c\u7528\uff1a\u5b83\u80fd\u591f\u91ca\u653e\u7684\u7a7a\u95f4\u5fc5\u987b\u662f\u7528malloc\u51fd\u6570\u5f00\u8f9f\u51fa\u6765\u7684\n// \u5982\u679c\u7528malloc\u51fd\u6570\u5f00\u8f9f\u4e86\u7a7a\u95f4\uff0c\u5c31\u5fc5\u987b\u8981\u7528free\u51fd\u6570\u8fd8\u56de\u53bb\uff0c\u5426\u5219\u7684\u8bdd\u7a0b\u5e8f\u4f1a\u975e\u5e38\u5403\u5185\u5b58\u3002\n//\n// Java\u5783\u573e\u56de\u6536\u673a\u5236\uff1a\u5982\u679c\u4e00\u5757\u7a7a\u95f4\u6ca1\u6709\u88ab\u5176\u5b83\u53d8\u91cf\u5f15\u7528\u6216\u8005\u6307\u5411\uff0c\u5219\u8be5\u7247\u7a7a\u95f4\u4f1a\u81ea\u52a8\u91ca\u653e\u3002\n// (struct Node)* node = (struct Node* )malloc(sizeof(struct Node));\n// \u5982\u679c\u8fd9\u6837\u5b9a\u4e49\u7684\u8bdd\uff0c\u4ee3\u7801\u975e\u5e38\u5197\u4f59\n// \u56e0\u6b64\u53ef\u4ee5\u7528 typedef struct Node LNode;\n// LNode* node = (Lnode*)malloc(sizeof(LNode));\n// \u8fd9\u5c31\u662f\u91cd\u65b0\u547d\u540d\u7684\u597d\u5904\uff1a\u53ef\u4ee5\u538b\u7f29\u4ee3\u7801\uff0c\u4f7f\u5f97\u4ee3\u7801\u6574\u4f53\u53d8\u5f97\u7b80\u6d01\u548c\u76f4\u89c2\n// \u91cd\u547d\u540d\ntypedef struct Node LNode;\n// \u5b9a\u4e49\u94fe\u8868\ntypedef struct Node* linkList;\n// \u56e0\u4e3a\u53ea\u8981\u77e5\u9053\u4e86\u94fe\u8868\u7684\u8868\u5934\u7ed3\u70b9\u7684\u5730\u5740(\u6307\u9488)\uff0c\u5c31\u76f8\u5f53\u4e8e\u83b7\u5f97\u4e86\u6574\u5f20\u94fe\u8868\n// \u56e0\u6b64\uff0c\u5c06struct Node* \u547d\u540d\u4e3alinkList.linkList\u5c31\u662f\u6574\u5f20\u94fe\u8868\n// \u4ee5\u4e0b\u64cd\u4f5c\u90fd\u662f\u5e26\u5934\u7ed3\u70b9\u7684\u94fe\u8868\u64cd\u4f5c\n// 0. \u94fe\u8868\u521d\u59cb\u5316 ---&gt; \u8c03\u7528\u4e4b\u540e\uff0c\u8fd4\u56de\u4e00\u4e2a\u94fe\u8868\uff08\u94fe\u8868\u6ca1\u6709\u503c\uff0cnext==NULL\uff09\uff0c\u8fd4\u56de\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u7ed3\u70b9\nlinkList initList()\n{\nlinkList head; // \u6b64\u65f6\u8fd9\u4e2ahead\u5904\u4e8e\u4e00\u4e2a\u91ce\u6307\u9488\u7684\u72b6\u6001\uff0c\u4e0d\u6307\u5411\u4efb\u4f55\u5730\u65b9\nhead = (LNode* )malloc(sizeof(LNode)); // sizeof(LNode) = sizeof(data) + sizeof(next)\n// \u6ce8\u610f\uff1amalloc\u6709\u53ef\u80fd\u8fd4\u56deNULL\uff0c\u8fd9\u4e2a\u60c5\u51b5\u5c31\u662f\u5185\u5b58\u4e0d\u8db3\nif(head == NULL){ // head==NULL \u8bf4\u660e\u7a7a\u95f4\u5f00\u8f9f\u5931\u8d25\nreturn NULL;\n}\n// head!=NULL \u5c31\u8bf4\u660e\u7a7a\u95f4\u5f00\u8f9f\u6210\u529f\n// \u5934\u7ed3\u70b9\u7684\u6570\u636e\u57df\uff0c\u662f\"\u4e0d\u4f7f\u7528\u7684\"\n// \u56e0\u4e3a\u5f00\u59cb\u521d\u59cb\u5316\u662f\u6ca1\u6709\u6570\u636e\u7684\uff0c\u56e0\u6b64\u5934\u7ed3\u70b9\u7684\u6307\u9488\u57dfnext==NULL\nhead-&gt;next = NULL;\nreturn head;\n}\n// 1. \u94fe\u8868\u521b\u5efa ---&gt; \u5934\u63d2\u6cd5\nStatus headCreate(linkList head,dataType data[],int length){\nif(head == NULL){\nreturn FALSE;\n}\nfor(int i=0;i&lt;length;i++){\nLNode* node = (LNode*) malloc(sizeof(LNode));\nif(node == NULL){\nreturn FALSE;\n}\nnode-&gt;data = data[i];\n// \u4ee5\u4e0b\u4e24\u6b65\u4e0d\u80fd\u98a0\u5012\u6b21\u5e8f\nnode-&gt;next = head-&gt;next;\nhead-&gt;next = node;\n}\nreturn TRUE;\n}\n// 2. \u94fe\u8868\u521b\u5efa ---&gt; \u5c3e\u63d2\u6cd5\nStatus tailCreate(linkList head,dataType data[],int length)\n{\nif(head == NULL){\nreturn FALSE;\n}\nLNode* s = head;\nfor(int i=0;i&lt;length;i++){\nLNode* t = (LNode*)malloc(sizeof(LNode));\nif(t == NULL){\nreturn FALSE;\n}\nt-&gt;data = data[i];\nt-&gt;next = s-&gt;next;\ns-&gt;next = t;\ns=t;\n}\ns-&gt;next = NULL;\nreturn TRUE;\n}\n// 3. \u94fe\u8868\u662f\u5426\u4e3a\u7a7a\nStatus isEmpty(linkList head){\n// \u82e5\u8fdb\u884c\u8be5\u4e0d\u5224\u65ad\uff0c\u5219\u4f1a\u51fa\u73b0\u7a7a\u6307\u9488\u5f15\u7528\u5f02\u5e38\nif(head == NULL){\nreturn FALSE;\n}\nif(head -&gt; next == NULL){\nreturn TRUE;\n}\nreturn FALSE;\n}\n// 4. \u9500\u6bc1\u94fe\u8868 ---&gt; \u7a7a\u95f4\u4ece\u54ea\u91cc\u6765\u5c31\u56de\u5230\u54ea\u91cc\u53bb \u7528free\u51fd\u6570\u91ca\u653e\nStatus deleteList(linkList head)\n{\nif(head == NULL){\nreturn FALSE;\n}\nLNode* p = head;\nwhile(head-&gt;next != NULL){\n// p\u59cb\u7ec8\u6307\u5411\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u7ed3\u70b9(\u975e\u5934\u7ed3\u70b9)\np = head-&gt;next;\n// \u5934\u7ed3\u70b9\u7684\u6307\u9488 \u6307\u5411 \u88ab\u91ca\u653e\u7684\u7ed3\u70b9p\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\nhead-&gt;next = p-&gt;next;\nfree(p);\n}\nreturn TRUE;\n}\n// 5. \u67e5\u627e\u5143\u7d20 --&gt; \u6309\u4f4d\u67e5\u627e(\u8fd4\u56de\u7ed3\u70b9)\nLNode* searchNodeOfIndex(linkList head,int index){\n// \u82e5index == 0 \u5219\u8fd4\u56de\u5934\u7ed3\u70b9\nif(index &lt; 0){\nreturn NULL;\n}\nint j=0;\nLNode* p = head;\nwhile(p!=NULL &amp;&amp; j &lt; index){\np = p-&gt;next;\nj++;\n}\nreturn p;\n}\n// 6. \u67e5\u627e\u5143\u7d20 --&gt; \u6309\u5143\u7d20\u67e5\u627e(\u8fd4\u56de\u7b2c\u4e00\u6b21\u51fa\u73b0\u8be5\u5143\u7d20\u7684\u6240\u5728\u7ed3\u70b9)\nLNode* searchNodeOfElem(linkList head,dataType data){\nif(head == NULL){\nreturn NULL;\n}\nLNode* p = head-&gt;next;\nwhile (p!=NULL &amp;&amp; p-&gt;data != data){\np = p-&gt;next;\n}\n// \u5faa\u73af\u7ed3\u675f\u540e\uff0cp\u8981\u4e48\u662fNULL\uff0c\u8981\u4e48\u662f\u9700\u8981\u67e5\u627e\u7684\u7ed3\u70b9\nreturn p;\n}\n// 7. \u589e\u52a0\u5143\u7d20 --&gt; \u6309\u7ed3\u70b9\u8fdb\u884c\u540e\u63d2\u64cd\u4f5c(\u5728\u94fe\u8868\u4e2d\u7684\u67d0\u4e2a\u7ed3\u70b9\u7684\u540e\u65b9\u63d2\u5165\u5143\u7d20)\nStatus insertElemOfNodeP(LNode* node,dataType data){\nif(node == NULL){\nreturn FALSE;\n}\n// \u521b\u5efa\u4e00\u4e2a\u65b0\u7ed3\u70b9\nLNode* t = (LNode*)malloc(sizeof(LNode));\nif(t==NULL){\nreturn FALSE;\n}\n// \u5f80\u65b0\u521b\u5efa\u7684\u7ed3\u70b9\u4e2d\u52a0\u5165\u9700\u8981\u63d2\u5165\u7684\u6570\u636e\nt-&gt;data = data;\nt-&gt;next = node-&gt;next;\nnode-&gt;next = t;\nreturn TRUE;\n}\n// 8. \u589e\u52a0\u5143\u7d20 --&gt; \u6309\u7ed3\u70b9\u8fdb\u884c\u524d\u63d2\u64cd\u4f5c(\u5728\u94fe\u8868\u4e2d\u7684\u67d0\u4e2a\u7ed3\u70b9\u7684\u524d\u65b9\u63d2\u5165\u5143\u7d20)\n/**\n * \u56e0\u4e3a\u5355\u94fe\u8868\u5728\u904d\u5386\u4e4b\u540e\uff0c\u662f\u65e0\u6cd5\u77e5\u6653\u4e4b\u524d\u7684\u5143\u7d20\u7684\uff0c\u56e0\u6b64\u9700\u8981\u8fdb\u884c\u7279\u6b8a\u5904\u7406\u3002\n */\nStatus insertElemOfNodeQ(LNode* node,dataType data){\n/**\n     * \u5f80\u67d0\u4e2a\u7ed3\u70b9\u7684\u524d\u65b9\u63d2\u5165\u6570\u636e\uff1a\u7b49\u4ef7\u4e8e\u5f85\u63d2\u5165\u7684\u6570\u636e\u4e0e\u5f53\u524d\u7ed3\u70b9\u7684\u6570\u636e\u8fdb\u884c\u4ea4\u6362\uff0c\u7136\u540e\u5f80\u5f53\u524d\u7ed3\u70b9\u7684\u540e\u65b9\u63d2\u5165\u6570\u636e\n     * \u539f\u7ed3\u70b9\uff1anode1(3) --&gt; node2(4) --&gt; node3(1)\n     * \u6570\u636e\u6392\u5217\uff1a 3 4 1\n     * \u73b0\u9700\u8981\u5411node3(1)\u7ed3\u70b9\u7684\u524d\u9762\u63d2\u5165\u6570\u636edata = 0;\n     * \u7b56\u7565\uff1a\u5c06data\u6570\u636e\u4e0enode3(1) \u7684\u6570\u636e\u8fdb\u884c\u4ea4\u6362 \u5f97\uff1a data = 1,node3(0),\u518d\u5728node3\u540e\u65b9\u63d2\u5165\u6570\u636edata\u5f97\u5230\n     * \u5904\u7406\u540e\u7684\u7ed3\u70b9: node1(3) --&gt; node2(4) --&gt; node3(0) --&gt; node4(1)\n     * \u6570\u636e\u6392\u5217\uff1a 3 4 0 1\n     */\nif(node == NULL){\nreturn FALSE;\n}\n// \u5f00\u8f9f\u65b0\u7ed3\u70b9\nLNode* t = (LNode*)malloc(sizeof(LNode));\nif(!t){\nreturn FALSE;\n}\n// data \u4e0e node-&gt;data\u8fdb\u884c\u4ea4\u6362\ndataType temp = data;\ndata = node-&gt;data;\nnode-&gt;data = temp;\n// \u8c03\u7528\u5728\u540e\u65b9\u63d2\u5165\u5143\u7d20\u7684\u51fd\u6570\ninsertElemOfNodeP(node,data);\nreturn TRUE;\n}\n// 9. \u589e\u52a0\u5143\u7d20 --&gt; \u6309\u4f4d\u5e8f\u63d2\u5165(1,2,...,n)\n/**\n * \u5728\u7b2ci\u4e2a\u4f4d\u7f6e\u4e0a\u63d2\u5165\u5143\u7d20\uff0c\u5219\u9700\u8981\u83b7\u53d6\u7b2ci-1\u4e2a\u7ed3\u70b9\uff0c\u5e76\u5728\u8be5\u7ed3\u70b9\u4e4b\u540e\u5b8c\u6210\u63d2\u5165\u64cd\u4f5c\n */\nStatus insertElemOfIndex(linkList head,int index,dataType data){\n// \u83b7\u53d6\u7b2ci-1\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u7ed3\u70b9\nLNode* node = searchNodeOfIndex(head,index-1);\nif(node == NULL){\nreturn FALSE;\n}\n// \u5f80node\u7ed3\u70b9\u7684\u540e\u9762\u63d2\u5165\u5143\u7d20\nStatus status = insertElemOfNodeP(node,data);\nif(status){\nreturn TRUE;\n}\nreturn FALSE;\n}\n// 10. \u5220\u9664\u5143\u7d20 --&gt; \u6309\u4f4d\u5e8f\u5220\u9664(1,2,...,n,\u5e76\u7528\u53d8\u91cfe\u63a5\u6536\u88ab\u5220\u9664\u7684\u6570\u636e)\n/**\n * \u82e5\u8981\u5220\u9664\u7b2ci\u4e2a\u5143\u7d20\uff0c\u5219\u9700\u8981\u77e5\u9053\u7b2ci-1\u4e2a\u5143\u7d20\u7684\u7ed3\u70b9\uff0c\u5e76\u5c06\u7b2ci-1\u4e0a\u7684\u7ed3\u70b9\u4e0e\u7b2ci+1\u4e0a\u7684\u7ed3\u70b9\u76f8\u8fde\n *\n */\nStatus deleteElemOfIndex(linkList head,int index,dataType *e){\n// \u83b7\u53d6i-1\u4e2a\u5143\u7d20\u7684\u7ed3\u70b9\nLNode* node = searchNodeOfIndex(head,index-1);\nif(node == NULL){\nreturn FALSE;\n}\n// node-&gt;next \u662f\u7b2ci\u4e2a\u5143\u7d20\u7684\u7ed3\u70b9\nLNode* p = node-&gt;next;\n*e = p-&gt;data;\n// \u5c06i-1\u4e2a\u5143\u7d20\u7684\u7ed3\u70b9\u7684\u6307\u9488 \u6307\u5411 \u7b2c i+1 \u4e2a\u7ed3\u70b9\nnode-&gt;next = p-&gt;next;\nreturn TRUE;\n}\n// 11. \u4fee\u6539\u5143\u7d20 --&gt; \u6309\u4f4d\u5e8f\u4fee\u6539\nStatus updateElemOfIndex(linkList head,int index,dataType e){\n// \u83b7\u53d6index\u4e0a\u7684\u7ed3\u70b9\nLNode* node = searchNodeOfIndex(head,index);\nif(node == NULL){\nreturn FALSE;\n}\n// \u76f4\u63a5\u5bf9\u8be5\u7ed3\u70b9\u7684\u6570\u636e\u57df\u8fdb\u884c\u64cd\u4f5c\nnode-&gt;data = e;\nreturn TRUE;\n}\n// 12. \u6c42\u94fe\u8868\u7684\u957f\u5ea6 --&gt; \u8fd4\u56de\u94fe\u8868\u957f\u5ea6\nint getLength(linkList head)\n{\nif(head == NULL){\nreturn -1;\n}\nint len = 0;\nLNode* p = head;\n// p = p-&gt;next // \u5728\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u6267\u884c\u4e86\u4e00\u6b21p=p-&gt;next\nwhile(p-&gt;next != NULL){\np = p-&gt;next;\nlen++;\n}\nreturn len;\n}\n// 13. \u904d\u5386\u6574\u5f20\u8868 --&gt; \u8f93\u51fa\u94fe\u8868\u7684\u6240\u6709\u5143\u7d20\nvoid display(linkList head){\nif(head == NULL){\nreturn;\n}\nLNode* p = head-&gt;next;\nwhile(p!=NULL){\nprintf(\"%d \",p-&gt;data);\np = p-&gt;next;\n}\nprintf(\"\\n\");\nprintf(\"len: %d\\n\",getLength(head));\nprintf(\"****************************\\n\");\n}\n// *************************************\u9ad8\u7ea7\u64cd\u4f5c*************************************\n// 1. \u83b7\u53d6\u94fe\u8868\u4e2d\u7684\u6700\u5c0f\u503c\u7684\u4e0b\u6807,\u5e76\u7528min\u53d8\u91cf\u63a5\u6536\u6700\u5c0f\u503c\nint getMinValue(linkList head,dataType *min){\nif(head == NULL){\nreturn -1;\n}\nint len = getLength(head);\n// \u6700\u5c0f\u503c\u521d\u59cb\u4e3a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\n*min = (head-&gt;next)-&gt;data;\nint index = 1;\nfor(int i=2;i&lt;=len;i++){\n// \u83b7\u53d6\u7b2ci\u4e2a\u7ed3\u70b9\uff0c\u4e0emin\u8fdb\u884c\u6bd4\u8f83\nLNode* node = searchNodeOfIndex(head,i);\n// \u5982\u679c\u6bd4min\u5c0f\uff0c\u66f4\u597dmin\u503c\u548c\u7d22\u5f15\u503c\nif((node-&gt;data) &lt; *min){\n*min = node-&gt;data;\nindex = i;\n}\n}\nreturn index;\n}\n// 2. \u83b7\u53d6\u94fe\u8868\u4e2d\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\uff0c\u5e76\u7528max\u53d8\u91cf\u4fdd\u5b58\nint getMaxValue(linkList head,dataType *max){\nif(head == NULL){\nreturn -1;\n}\nint len = getLength(head);\n*max = (head-&gt;next)-&gt;data;\nint index = 1;\nfor(int i=2;i&lt;=len;i++){\nLNode* node = searchNodeOfIndex(head,i);\nif(node-&gt;data &gt; *max){\n*max = node-&gt;data;\nindex = i;\n}\n}\nreturn index;\n}\n// 3. \u4ea4\u6362\u4e24\u4e2a\u7ed3\u70b9\u95f4\u7684\u6570\u636e\nStatus swapDataOfNode(LNode* node1,LNode* node2){\nif(node1 == NULL || node2 == NULL){\nreturn FALSE;\n}\n// \u76f4\u63a5\u5bf9\u4e24\u4e2a\u7ed3\u70b9\u7684\u6570\u636e\u57df\u8fdb\u884c\u4ea4\u6362\ndataType t = node1-&gt;data;\nnode1-&gt;data = node2-&gt;data;\nnode2-&gt;data = t;\nreturn TRUE;\n}\n// 4. \u5bf9\u94fe\u8868\u8fdb\u884c\u6392\u5e8f --&gt; \u5192\u6ce1\nStatus sortOfBubble(linkList head){\nif(head == NULL){\nreturn FALSE;\n}\nint len = getLength(head);\nint flag = 1;\nLNode* node1;\nLNode* node2;\n// \u5b9e\u73b0\u7684\u662f\u5192\u6ce1\u6392\u5e8f\uff0cflag\u662f\u5bf9\u6bcf\u8f6e\u662f\u5426\u8fdb\u884c\u4ea4\u6362\u7684\u4e00\u4e2a\u6807\u5fd7\uff0c\u82e5\u6709\u4e00\u8f6e\u6ca1\u6709\u8fdb\u884c\u4ea4\u6362\uff0c\u5219\u8bf4\u660e\u4e86\u5df2\u7ecf\u6709\u5e8f\u4e86\uff0c\u5c31\u4e0d\u9700\u8981\u6267\u884c\u540e\u7eed\u7684\u4ea4\u6362\u64cd\u4f5c\u4e86\nwhile(flag){\nflag = 0;\nfor(int i=1;i&lt;len;i++){\n// \u83b7\u53d6\u76f8\u90bb\u7684\u4e24\u4e2a\u7ed3\u70b9\nnode1 = searchNodeOfIndex(head,i);\nnode2 = searchNodeOfIndex(head,i+1);\n// \u82e5\u7b2ci\u4e2a\u7ed3\u70b9\u4e0a\u7684\u6570\u636e\u6bd4\u7b2ci+1\u4e2a\u6570\u636e\u5927\uff0c\u5219\u4ea4\u6362\u4e24\u4e2a\u6570\u636e\nif(node1-&gt;data &gt; node2-&gt;data){\nflag = true;\nswapDataOfNode(node1,node2);\n}\n}\n}\n}\n// 5. \u5408\u5e76\u4e24\u4e2a\u94fe\u8868 --&gt; \u8868\u4e8c\u6dfb\u52a0\u81f3\u8868\u4e00\u5c3e\u90e8\nStatus mergeDoubleList(linkList head1,linkList head2){\nif(head1 == NULL || head2 == NULL){\nreturn FALSE;\n}\n// \u83b7\u53d6head1\u8868\u5c3e\u7ed3\u70b9\nLNode* node = searchNodeOfIndex(head1, getLength(head1));\nif(node == NULL){\nreturn FALSE;\n}\n// head1\u8868\u5c3e\u4e0ehead2\u8868\u5934\u76f8\u8fde\u63a5\nnode-&gt;next = head2-&gt;next;\nreturn TRUE;\n}\n// 3. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\n/*\n * \u65b9\u6cd5\u4e00\uff1a\u8fde\u63a5\u4e24\u4e2a\u8868 \u518d\u6392\u5e8f --&gt; \u672c\u51fd\u6570\u5b9e\u73b0\n * \u65b9\u6cd5\u4e8c\uff1a\u53cc\u6307\u9488\u5b9e\u73b0\n */\nStatus mergeDoubleSortList(linkList head1,linkList head2){\nif(mergeDoubleList(head1,head2)){\nsortOfBubble(head1);\nreturn TRUE;\n}\nreturn FALSE;\n}\n// 4. \u7ffb\u8f6c\u6574\u4e2a\u94fe\u8868\nStatus flipList(linkList head){\nif(head == NULL){\nreturn FALSE;\n}\nint len = getLength(head);\nLNode* node1;\nLNode* node2;\n// \u5bf9\u8868\u5934\u548c\u8868\u5c3e\u7684\u7ed3\u70b9\u5143\u7d20\u76f4\u63a5\u8fdb\u884c\u4ea4\u6362\nfor(int i=1;i&lt;=len/2;i++){\nnode1 = searchNodeOfIndex(head,i);\nnode2 = searchNodeOfIndex(head,len-i+1);\nswapDataOfNode(node1,node2);\n}\n}\nint main()\n{\n// \u6253\u5370\u7a97\u53e3\u51fa\u73b0\u4e2d\u6587\u4e71\u7801\u7684\u8bdd\u53ef\u4ee5\u52a0\u4e0a\u4e0b\u9762\u7684\u8bed\u53e5\nsystem(\"chcp 65001\");\nlinkList head1 = initList();\nlinkList head2 = initList();\ndataType data[] = {3,4,5,6,7,8};\nheadCreate(head1,data,6);\n// \u5934\u63d2\u6cd5\u53ef\u4ee5\u5b9e\u73b0\u5012\u5e8f\u5b58\u50a8\ndisplay(head1);\ntailCreate(head2,data,6);\ndisplay(head2);\n// \u5934\u63d2\u6cd5\u548c\u5c3e\u63d2\u6cd5\u7684\u5b58\u50a8\u987a\u5e8f\u662f\u76f8\u53cd\u7684\n// \u5224\u65adhead1\u662f\u5426\u4e3a\u7a7a\u8868\nif(!isEmpty(head1)){\nprintf(\"NO\\n\");\n}\n// \u9500\u6bc1head1\ndeleteList(head1);\n// \u5224\u65adhead1\u662f\u5426\u4e3a\u7a7a\u8868\nif(isEmpty(head1)){\nprintf(\"TRUE\\n\");\n}\ndisplay(head1);\n// \u5c06\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u5143\u7d20\u4fee\u6539\u4e3a0\nupdateElemOfIndex(head2,1,0);\ndisplay(head2);\n// \u5220\u9664\u7b2c1\u4e2a\u5143\u7d20\u5e76\u7528\u53d8\u91cfe\u4fdd\u5b58\u88ab\u5220\u9664\u7684\u5143\u7d20\ndataType e;\ndeleteElemOfIndex(head2,6,&amp;e);\ndisplay(head2);\nprintf(\"e = %d\\n\",e);\n// \u5728\u7b2c6\u4e2a\u4f4d\u7f6e\u4e0a\u63d2\u5165\u5143\u7d2010\ninsertElemOfIndex(head2,6,10);\ndisplay(head2);\n// \u5728\u7b2c1\u4e2a\u4f4d\u7f6e\u4e0a\u63d2\u5165\u5143\u7d206\ninsertElemOfIndex(head2,1,6);\ndisplay(head2);\n// \u83b7\u53d6\u7b2c\u4e00\u6b21\u51fa\u73b0\u5143\u7d205\u7684\u7ed3\u70b9\nLNode* node = searchNodeOfElem(head2,5);\nprintf(\"%d \\n\",node-&gt;data);\n// \u5728\u8be5\u7ed3\u70b9\u7684\u540e\u9762\u63d2\u5165\u5143\u7d20100,\u524d\u9762\u63d2\u516599\ninsertElemOfNodeP(node,10);\ninsertElemOfNodeQ(node,99);\ndisplay(head2);\n// \u83b7\u53d6\u7b2c\u4e5d\u4e2a\u7ed3\u70b9\u5e76\u5f80\u8be5\u7ed3\u70b9\u7684\u524d\u9762\u548c\u540e\u9762\u5747\u63d2\u51650\nnode = searchNodeOfIndex(head2,9);\ninsertElemOfNodeP(node,0);\ninsertElemOfNodeQ(node,0);\ndisplay(head2);\nsortOfBubble(head2);\ndisplay(head2);\n// \u91cd\u65b0\u5efa\u4e2a\u8868\ndataType datas[] = {110,330,51,38,99,1,64,11};\nheadCreate(head1,datas,8);\n// \u8f93\u51fa\u6700\u5927\u6700\u5c0f\u503c\ndataType max,min;\nint index_max,index_min;\nindex_max = getMaxValue(head1,&amp;max);\nindex_min = getMinValue(head1,&amp;min);\nprintf(\"max's index = %d max = %d\\n\",index_max,max);\nprintf(\"min's index = %d min = %d\\n\",index_min,min);\ndisplay(head1);\n// \u6392\u5e8f\nsortOfBubble(head1);\ndisplay(head1);\n// \u5408\u5e76\u4e24\u4e2a\u8868\nmergeDoubleSortList(head1,head2);\ndisplay(head1);\n// \u6392\u5e8f\nsortOfBubble(head1);\ndisplay(head1);\n// \u7ffb\u8f6c\nflipList(head1);\ndisplay(head1);\n}\n</code></pre>"},{"location":"%E7%BA%BF%E6%80%A7%E8%A1%A8/%E9%A1%BA%E5%BA%8F%E8%A1%A8/","title":"\u987a\u5e8f\u8868","text":"<pre><code>#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\ntypedef int dataType;\ntypedef int Status;\nconst int TRUE = 1;\nconst int FALSE = 0;\n// sequence list\u5b9a\u4e49\ntypedef struct{\ndataType *data;\nint length;\n}SqList;\n// 1. \u521d\u59cb\u5316list\nSqList initList(dataType data[], int length){\nSqList sq;\nsq.data = data;\nsq.length = length;\nreturn sq;\n}\n// 2. \u5224\u65ad\u8868\u662f\u5426\u4e3a\u7a7a\nStatus isEmpty(SqList sq){\nif(sq.length == 0){\nreturn TRUE;\n}else{\nreturn FALSE;\n}\n}\n// 3. \u9500\u6bc1\u8868\nStatus clearList(SqList* sq){\nsq-&gt;data = NULL;\nsq-&gt;length = 0;\nreturn TRUE;\n}\n// 4. \u589e -- &gt; \u63d2\u5165 \u4f4d\u7f6e\u6309\u903b\u8f91\u4e0b\u6807\nStatus insertElemBaseOfIndex(SqList *sq,int index, dataType elem){\nif(index &lt; 1 || index &gt; sq-&gt;length){\nreturn FALSE;\n}\ndataType t;\nfor(int i = sq-&gt;length-1; i&gt;=index; i--){\nt = sq-&gt;data[i];\nsq-&gt;data[i] = sq-&gt;data[i+1];\nsq-&gt;data[i+1] = t;\n}\nsq-&gt;data[index] = elem;\nsq-&gt;length += 1;\nreturn TRUE;\n}\n// 5. \u5220\nStatus deleteElemBaseOfIndex(SqList* sq,int index,dataType* e){\nif(index &lt; 1 || index &gt; sq-&gt;length){\nreturn FALSE;\n}\n*e = sq-&gt;data[index-1];\ndataType t;\nfor(int i=index-1;i&lt;sq-&gt;length;i++){\nt = sq-&gt;data[i];\nsq-&gt;data[i] = sq-&gt;data[i+1];\nsq-&gt;data[i+1] = t;\n}\nsq-&gt;length--;\nreturn TRUE;\n}\n// 6. \u6539\nStatus updateElem(SqList* sq, int index, dataType e){\nif(index &lt; 1 || index &gt; sq-&gt;length){\nreturn FALSE;\n}\nsq-&gt;data[index-1] = e;\nreturn TRUE;\n}\n// 7. \u67e5\nStatus searchElem(SqList* sq,dataType e){\nfor(int i=0;i&lt;sq-&gt;length;i++){\nif(sq-&gt;data[i]==e){\nreturn i+1;\n}\n}\nreturn -1;\n}\n// 8. \u904d\u5386\nvoid displayList(SqList sq){\nfor(int i=0;i&lt;sq.length;i++){\nprintf(\"%d \",sq.data[i]);\n}\nprintf(\"\\n\");\n}\nint main(){\nsystem(\"chcp 65001\");\ndataType arrs[] = {5,6,4,1,3};\nSqList  sq = initList(arrs,5);\nprintf(\"length: %d\\n\",sq.length);\ndisplayList(sq);\ninsertElemBaseOfIndex(&amp;sq,3,0);\nprintf(\"length: %d\\n\",sq.length);\ndisplayList(sq);\ndataType e;\ndeleteElemBaseOfIndex(&amp;sq,1,&amp;e);\ndisplayList(sq);\nprintf(\"delete elem:%d\\n\",e);\nupdateElem(&amp;sq,3,5);\ndisplayList(sq);\nint index = searchElem(&amp;sq,5);\nprintf(\"%d 's index: %d\\n\",5,index);\nclearList(&amp;sq);\nif(isEmpty(sq)){\nprintf(\"\u5df2\u9500\u6bc1\");\n}else{\nprintf(\"\u9500\u6bc1\u5931\u8d25\");\n}\nreturn 0;\n}\n</code></pre>"}]}